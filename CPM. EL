"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1


                         C      include	RkConfig.mac 
  0001                   C      OWN_GETC	EQU	1 
                         C      ;USE_PRG_DC	EQU	1 
  0001                   C      RK60K		EQU	1 
                                 
                         C      include b0disk.mac 
                         C      ;	B0DISK.MAC - common defines for disk bios 
                         C       
  0000                   C      NOTHING	EQU	0 
  0001                   C      READING	EQU	1 
  0002                   C      WRITING	EQU	2 
                         C       
  0020                   C      C_DIR_ENTRS	equ	32 
  0008                   C      C_OFFSET	equ	8 
  0008                   C      C_SEC_ON_TRK	equ	8 
                         C       
                         C      include 82xx.mac 
                         C      ;	82XX.MAC - 82XX CHIP SET DEFINITION 
                         C       
                         C      ;  8275 display adapter (russian analog - K580VG75) 
                         C      ;DISP	equ	0C000h 
                         C      ; Status register 
  0040                   C      DISP_INTE_Flag	equ	40h 
  0020                   C      DISP_INTR_Flag	equ	20h 
                         C      include RK86.MAC 
                         C      ;** RK86.MAC - Radio-86 computer specific constants & macro *** 
                         C      ; 
                         C      ;	09-Oct-1992  - first version 
                         C      ;	15-Nov-1992  - Add 82XX.MAC 
                         C       
  0040                   C      ?Ctrl	equ	40h 
  0020                   C      ?Shift	equ	20h 
                         C       
  0001                   C      EXTERNAL_PORTS	equ	1 
                         C       
                         C      ; IN and OUT MACRO comands 
                         C      @in	MACRO	addr 
                         C      IF ((addr) LT 256) 
                         C      	in	addr 
                         C      ELSE 
                         C      	lda	addr 
                         C      ENDIF 
                         C      	ENDM 
                         C       
                         C      @out	MACRO	addr 
                         C      IF ((addr) LT 256) 
                         C      	out	addr 
                         C      ELSE 
                         C      	sta	addr 
                         C      ENDIF 
                         C      	ENDM 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      IFDEF EXTERNAL_PORTS 
                         C      ;************ Controller's mapping **************** 
                         C      PPI	equ	000h;  8255 first		  * 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-1


                         C      PPI2	equ	010h;  8255 second	   	  * 
                         C      DISP	equ	020h;  8275 display adapter	  * 
                         C      DMA	equ	030h;  8257 DMA chip	    	  * 
                         C      PSG1	equ	040h;  8253 first	          * 
                         C      PALM_CNTRL equ	0c0h;  Palmira control byte       * 
                         C      ;************************************************** 
                         C      ELSE 
                         C      ;************ Controller's mapping **************** 
                         C      PSG1	equ	0F800h;  8253 first	          * 
                         C      PPI	equ	0F900h;  8255 first		  * 
                         C      PPI2	equ	0FA00h;  8255 second	   	  * 
                         C      DISP	equ	0FB00h;  8275 display adapter	  * 
                         C      DMA	equ	0FC00h;  8257 DMA chip	    	  * 
                         C      PALM_CNTRL equ	0FD00h;  Palmira control byte     * 
                         C      ;************************************************** 
                         C      ENDIF 
                         C      ELSE 
                         C      IFDEF	RK60K 
                         C      ;************ Controller's mapping **************** 
  F700                   C      FDC	equ	0F700h;				  * 
  F720                   C      INTR	equ	0F720h;  8259 interrupt controller* 
  F740                   C      PSG1	equ	0F740h;  8253 first	          * 
  F760                   C      PSG2	equ	0F760h;  8253 second	      	  * 
  F780                   C      PPI	equ	0F780h;  8255 fist		  * 
  F7A0                   C      PPI2	equ	0F7A0h;  8255 second	   	  * 
  F7C0                   C      DISP	equ	0F7C0h;  8275 display adapter	  * 
  F7E0                   C      DMA	equ	0F7E0h;  8257 DMA chip	    	  * 
                         C      ;************************************************** 
                         C      ELSE 
                         C      ;************ Controller's mapping **************** 
                         C      ;FDC	equ	0F700h;				  * 
                         C      ;INTR	equ	0F720h;  8259 interrupt controller* 
                         C      PSG1	equ	0CC00h;  8253 first	          * 
                         C      ;PSG2	equ	0F760h;  8253 second	      	  * 
                         C      PPI	equ	0C200h;  8255 frist		  * 
                         C      PPI2	equ	0C400h;  8255 second	   	  * 
                         C      DISP	equ	0C000h;  8275 display adapter	  * 
                         C      DMA	equ	0E000h;  8257 DMA chip	    	  * 
                         C      PALM_CNTRL equ	0CE00h;  Palmira control byte     * 
                         C      ;************************************************** 
                         C      ENDIF 
                         C      ENDIF 
                         C      include SCREEN.MAC 
                         C      ;	SCREEN.MAC - bios screen parameters 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      IFDEF EXTERNAL_PORTS 
                         C      SCR_BUFF	EQU	0EEd0h+800h 
                         C      ELSE 
                         C      SCR_BUFF	EQU	0EEd0h 
                         C      ENDIF 
                         C      ELSE 
  B6D0                   C      SCR_BUFF	EQU	0b6d0h 
                         C      ENDIF 
                         C       
  004E                   C      PHYS_W		EQU	78 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-2


  001E                   C      PHYS_H  	equ	29+1 
  0924                   C      SCR_SIZE	equ	PHYS_W*PHYS_H 
                         C       
  0002                   C      FirstStr	equ	2 
                         C       
                         C       
  B76C                   C      VRAM	EQU	SCR_BUFF+FirstStr*PHYS_W 
                         C       
  004E                   C      SCR_W	EQU	78 
  001A                   C      SCR_H	EQU	25+1 
                         C       
  BF58                   C      ENDSCR	EQU	VRAM+SCR_H*PHYS_W 
                         C       
  001B                   C      @ESC	EQU	27 
                                 
                                IFDEF	USE_PRG_DC 
                                IFDEF	EXTERNAL_PORTS 
                                START_CCP	EQU 0D200H 
                                ELSE 
                                START_CCP	EQU 0CA00h 
                                ENDIF 
                                ELSE 
                                IFDEF	RK60K 
  BC00                          START_CCP	EQU 0BC00h 
                                ELSE 
                                START_CCP	EQU 9200h 
                                ENDIF 
                                ENDIF 
                                 
                                	.phase	100h 
                         C      include B0PRGDC.ASM 
                         C      @SYSREG	MACRO	VAL 
                         C      	IN	-1 
                         C      	MVI	A,VAL 
                         C      	OUT	-1 
                         C      	ENDM 
                         C       
  0100    31 0100        C      	LXI	SP,100h 
                         C       
                         C      IFNDEF	USE_PRG_DC 
  0103    21 20E0        C      	LXI	H,CCP_START + (CPM_BIN - C_BASE) 
  0106    06 3F          C      	MVI	B,63 
  0108    CD 0177        C      	CALL	strcpyN 
                         C      ENDIF 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      	@SYSREG	0C0h ; Turn on external device programming mode (for in/out commands) 
                         C      	LXI	H,BEGPRO+1 
                         C      	LXI	B,00000h 
                         C      	MVI	A,15 
                         C      	CALL	READR 
                         C      	CALL	LOOP01 ; Turn on working mode 
                         C       
                         C      	MVI	A,80H ; Start page 
                         C      	LXI	D,MAP 
                         C      	CALL	PROG_DC 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-3


                         C      ENDIF 
                         C       
  010B    21 17A0        C      	LXI	H,CCP_START + (B_BASE-C_BASE) 
  010E    11 D200        C      	LXI	D, B_BASE 
  0111    01 0E23        C      	LXI	B, (BIOS_END-B_BASE) 
  0114    CD 012E        C      	CALL	CP001 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      IFDEF	EXTERNAL_PORTS 
                         C      	@SYSREG	0C0h ; Turn on external device programming mode (for in/out commands) 
                         C       
                         C      	LXI	H,BEGPRO+1 
                         C      	LXI	B,400h + PPI 
                         C      	XRA	A 
                         C      	CALL	READR 
                         C       
                         C      	LXI	B,400h + PPI2 
                         C      	INR	A 
                         C      	CALL	READR 
                         C       
                         C      	INR	A 
                         C      	OUT	DISP 
                         C      	OUT	DISP+1 
                         C       
                         C      	LXI	B,1000h + DMA	; DMA 
                         C      	MVI	A,9 
                         C      	CALL	READR 
                         C       
                         C      	MVI	A,6	; PSG 
                         C      	LXI	B,400h + PSG1 
                         C      	CALL	READR 
                         C       
                         C      	MVI	A,11 
                         C      	OUT	PALM_CNTRL 
                         C       
                         C      	@SYSREG	80h 
                         C      ENDIF 
                         C      ENDIF 
                         C       
                         C      IFNDEF	RK60K 
                         C      	MVI	A,80H 
                         C      	@out	PALM_CNTRL 
                         C      	LXI	H,FONT 
                         C      	MVI	D,0 
                         C      	CALL	CmdOpenDelete 
                         C      	ORA	A 
                         C      	JNZ	ERR_READ 
                         C       
                         C      	LXI	D,0D800H 
                         C      	LXI	H,2048 
                         C      	CALL	CmdRead 
                         C      	ORA	A 
                         C      	JNZ	ERR_READ 
                         C      	MVI	A,0C0h 
                         C      	@out	PALM_CNTRL 
                         C      ENDIF 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-4


                         C       
  0117    3E D8          C      	MVI	A,0D8h 
  0119    11 019D        C      	LXI	D,MAP2 
  011C    CD 0155        C      	CALL	PROG_DC 
  011F    21 01A0        C      	LXI	H,CCP_START 
  0122    11 BC00        C      	LXI	D, C_BASE 
  0125    01 1600        C      	LXI	B, (B_BASE-C_BASE) 
  0128    CD 012E        C      	CALL	CP001 
  012B    C3 D241        C      	JMP	BOOT 
                         C       
  012E                   C      CP001: 
  012E    78             C      	MOV	A,B 
  012F    B1             C      	ORA	C 
  0130    C8             C      	RZ 
  0131    7E             C      	MOV	A,M 
  0132    12             C      	STAX	D 
  0133    23             C      	INX	H 
  0134    13             C      	INX	D 
  0135    0B             C      	DCX	B 
  0136    C3 012E        C      	JMP	CP001 
                         C       
  0139                   C      ERR_READ: 
                         C      	@SYSREG	0A0h 
  0139    DB FF          C+     	IN	-1 
  013B    3E A0          C+     	MVI	A,0A0h 
  013D    D3 FF          C+     	OUT	-1 
  013F    3E 04          C      	MVI	A,4 
  0141    D3 E0          C      	OUT	0E0H 
                         C      	@SYSREG	80h 
  0143    DB FF          C+     	IN	-1 
  0145    3E 80          C+     	MVI	A,80h 
  0147    D3 FF          C+     	OUT	-1 
  0149    C3 E000        C      	JMP	0E000H 
                         C       
  014C                   C      READR: 
  014C    71             C      	MOV	M,C 
  014D                   C      BEGPRO: 
  014D    D3 00          C      	OUT 0 
  014F    34             C      	INR M 
  0150    05             C      	DCR B 
  0151    C8             C      	RZ 
  0152    C3 014D        C      	JMP BEGPRO 
                         C       
  0155                   C      PROG_DC: 
  0155    F5             C      	PUSH	PSW 
                         C      	@SYSREG	0A0H;  Bjk~whr| pefhl peopncp`llhpnb`mh  bmsrpemmhu sqrpniqrb 
  0156    DB FF          C+     	IN	-1 
  0158    3E A0          C+     	MVI	A,0A0H 
  015A    D3 FF          C+     	OUT	-1 
  015C    F1             C      	POP	PSW 
  015D    21 014E        C      	LXI H,BEGPRO+1 ; G`ohq`r| b hl `dpeq noep`md` 
                         C      		     ; jnl`md{ out dk naeqoewemh hmjpelemr` 
                         C      		     ; m`whm`el q out 80H 
  0160    77             C      	MOV	M,A 
  0161                   C      LOOP: 
  0161    1A             C      	LDAX	D 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-5


  0162    B7             C      	ORA	A 
  0163    CA 0170        C      	JZ	LOOP01 
  0166    47             C      	MOV	B,A 
  0167    13             C      	INX	D 
  0168    1A             C      	LDAX	D 
  0169    13             C      	INX	D 
  016A    CD 014D        C      	CALL	BEGPRO 
  016D    C3 0161        C      	JMP	LOOP 
  0170                   C      LOOP01: 
                         C      	@SYSREG	80H	; G`ohq`r| b qhqrelm{i pechqrp-m`w`k|m{e 
  0170    DB FF          C+     	IN	-1 
  0172    3E 80          C+     	MVI	A,80H 
  0174    D3 FF          C+     	OUT	-1 
                         C      			; gm`wemh: rspanpefhl b{jk~wem, mskeb` 
                         C      			; qrp`mhv` dnonkmhrek|mncn ngs 
  0176    C9             C      	RET 
                         C       
  0177                   C      strcpyN: 
  0177    1A             C      	LDAX	D 
  0178    13             C      	INX	D 
  0179    77             C      	MOV	M, A 
  017A    23             C      	INX	H 
  017B    B7             C      	ORA	A 
  017C    C8             C      	RZ 
  017D    05             C      	DCR	B 
  017E    C2 0177        C      	JNZ	strcpyN 
  0181    36 00          C      	MVI	M, 0 ; Replhm`rnp 
  0183    C9             C      	RET 
                         C       
                         C       
  0184    43 50 4D 2F    C      FONT:	DB	'CPM/8X16ENG.FNT',0 
  0188    38 58 31 36    C      
  018C    45 4E 47 2E    C      
  0190    46 4E 54 00    C      
                         C       
  0194                   C      MAP: 
  0194    58 0A          C      	DB	58h,10 
  0196    08 0D          C      	DB	8,13 
  0198    18 0A          C      	DB	18h,10 
                         C      IFDEF	EXTERNAL_PORTS 
  019A    08 0A          C      	DB	8,10 
                         C      ELSE 
                         C      	DB	1,6 ;  8253 first 
                         C      	DB	1,0 ;  8255 first 
                         C      	DB	1,1 ;  8255 second 
                         C      	DB	1,2 ;  8275 display adapter 
                         C      	DB	1,4 ;  8257 DMA chip 
                         C      	DB	1,11;  Palmira control byte 
                         C      	DB	2,10; 
                         C      ENDIF 
  019C    00             C      	DB	0 
                         C       
  019D    08 0A 00       C      MAP2:	DB	8,10,0 
                         C       
  01A0                   C      CCP_START: 
                                	.dephase 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-6


                                	.phase START_CCP 
                                 
                         C      include CCP.ASM 
                         C      ; Reformatted and converted for cross-assembly by Macro Assembler AS 
                         C      ; Eric Smith <spacewar@gmail.com> 2018-01-24 
                         C      ; from original source os2ccp.asm from 
                         C      ;   http://www.cpm.z80.de/download/cpm2-plm.zip 
                         C       
                         C      ; Changes: 
                         C      ;   multiple instructions per line split to separate lines 
                         C      ;   dollar sign in labels replaced by underscore 
                         C      ;   dollar sign (as digit separator) in binary constants removed 
                         C      ;   single quotes around strings replaced with double quotes 
                         C      ;   true and false replaced with _true and _false 
                         C      ;   replaced "not" operator with "~" 
                         C      ;   removed empty comments 
                         C      ;   added ifdef origin to allow origin to be specified from command line 
                         C      ;   added commments about serial number 
                         C      ;   added ifdefs on "noserial" to omit serialization check 
                         C       
                         C       
                         C      	.8080;.cpu	8080 
                         C       
                         C      	title	"console command processor (CCP), ver 2.0" 
                         C      ;	assembly language version of the CP/M console command processor 
                         C       
                         C      ;	version 2.2 February, 1980 
                         C       
                         C      ;	Copyright (c) 1976, 1977, 1978, 1979, 1980 
                         C      ;	Digital Research 
                         C      ;	Box 579, Pacific Grove, 
                         C      ;	California, 93950 
                         C       
  0000                   C      _false	equ	0000h 
                         C      ;_true	equ	~_false 
  0000                   C      testing	equ	_false	;true if debugging 
  0001                   C      noserialize	equ	1 
                         C       
                         C      	ifdef	origin 
                         C      	org	origin 
                         C      bdosl	equ	$+800h		;bdos location 
                         C      	else 
                         C      	if	testing 
                         C      	org	3400h 
                         C      bdosl	equ	$+800h		;bdos location 
                         C      	else 
                         C      	;org	000h 
  C400                   C      bdosl	equ	$+800h		;bdos location 
                         C      	endif 
                         C      	endif 
  0100                   C      tran	equ	100h 
  BC00                   C      tranm	equ	$ 
  BC00                   C      ccploc	equ	$ 
                         C       
                         C      ;	******************************************************** 
                         C      ;	*	Base of CCP contains the following code/data   * 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-7


                         C      ;	*	ccp:	jmp ccpstart	(start with command)   * 
                         C      ;	*		jmp ccpclear    (start, clear command) * 
                         C      ;	*	ccp+6	127		(max command length)   * 
                         C      ;	*	ccp+7	comlen		(command length = 00)  * 
                         C      ;	*	ccp+8	' ... '		(16 blanks)	       * 
                         C      ;	******************************************************** 
                         C      ;	* Normal entry is at ccp, where the command line given * 
                         C      ;	* at ccp+8 is executed automatically (normally a null  * 
                         C      ;	* command with comlen = 00).  An initializing program  * 
                         C      ;	* can be automatically loaded by storing the command   * 
                         C      ;	* at ccp+8, with the command length at ccp+7.  In this * 
                         C      ;	* case, the ccp executes the command before prompting  * 
                         C      ;	* the console for input.  Note that the command is exe-* 
                         C      ;	* cuted on both warm and cold starts.  When the command* 
                         C      ;	* line is initialized, a jump to "jmp ccpclear" dis-   * 
                         C      ;	* ables the automatic command execution.               * 
                         C      ;	******************************************************** 
  BC00                   C      C_BASE: 
  BC00    C3 BF5C        C      	jmp	ccpstart	;start ccp with possible initial command 
  BC03    C3 BF58        C      	jmp	ccpclear	;clear the command buffer 
  BC06    7F             C      maxlen:	db	127	;max buffer length 
  BC07    00             C      comlen:	db	0	;command length (filled in by dos) 
                         C      ;	(command executed initially if comlen non zero) 
  BC08                   C      combuf: 
  BC08    20 20 20 20    C      	db	"        "	;8 character fill 
  BC0C    20 20 20 20    C      
  BC10    20 20 20 20    C      	db	"        "	;8 character fill 
  BC14    20 20 20 20    C      
  BC18    43 4F 50 59    C      	db	"COPYRIGHT (C) 1979, DIGITAL RESEARCH  "; 38 
  BC1C    52 49 47 48    C      
  BC20    54 20 28 43    C      
  BC24    29 20 31 39    C      
  BC28    37 39 2C 20    C      
  BC2C    44 49 47 49    C      
  BC30    54 41 4C 20    C      
  BC34    52 45 53 45    C      
  BC38    41 52 43 48    C      
  BC3C    20 20          C      
  BC3E                   C      	ds	128-($-combuf) 
                         C      ;	total buffer length is 128 characters 
  BC88    BC08           C      comaddr:dw	combuf	;address of next to char to scan 
  BC8A                   C      staddr:	ds	2	;starting address of current fillfcb request 
                         C       
  0004                   C      diska	equ	0004h	;disk address for current disk 
  0005                   C      bdos	equ	0005h	;primary bdos entry point 
  0080                   C      buff	equ	0080h	;default buffer 
  005C                   C      fcb	equ	005ch	;default file control block 
                         C       
  0001                   C      rcharf	equ	1	;read character function 
  0002                   C      pcharf	equ	2	;print character function 
  0009                   C      pbuff	equ	9	;print buffer function 
  000A                   C      rbuff	equ	10	;read buffer function 
  000B                   C      breakf	equ	11	;break key function 
  000C                   C      liftf	equ	12	;lift head function (no operation) 
  000D                   C      initf	equ	13	;initialize bdos function 
  000E                   C      self	equ	14	;select disk function 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-8


  000F                   C      openf	equ	15	;open file function 
  0010                   C      closef	equ	16	;close file function 
  0011                   C      searf	equ	17	;search for file function 
  0012                   C      searnf	equ	18	;search for next file function 
  0013                   C      delf	equ	19	;delete file function 
  0014                   C      dreadf	equ	20	;disk read function 
  0015                   C      dwritf	equ	21	;disk write function 
  0016                   C      makef	equ	22	;file make function 
  0017                   C      renf	equ	23	;rename file function 
  0018                   C      logf	equ	24	;return login vector 
  0019                   C      cself	equ	25	;return currently selected drive number 
  001A                   C      dmaf	equ	26	;set dma address 
  0020                   C      userf	equ	32	;set user number 
                         C       
                         C      ;	special fcb flags 
  0009                   C      rofile	equ	9	;read only file 
  000A                   C      sysfile	equ	10	;system file flag 
                         C       
                         C      ;	special characters 
  000D                   C      cr	equ	13	;carriage return 
  000A                   C      lf	equ	10	;line feed 
  005F                   C      la	equ	5fh	;left arrow 
  001A                   C      eofile	equ	1ah	;end of file 
                         C       
                         C      ;	utility procedures 
  BC8C                   C      printchar: 
  BC8C    5F             C      	mov	e,a 
  BC8D    0E 02          C      	mvi	c,pcharf 
  BC8F    C3 0005        C      	jmp	bdos 
                         C       
  BC92                   C      printbc: 
                         C      	;print character, but save b,c registers 
  BC92    C5             C      	push	b 
  BC93    CD BC8C        C      	call	printchar 
  BC96    C1             C      	pop	b 
  BC97    C9             C      	ret 
                         C       
  BC98                   C      ccp_crlf: 
  BC98    3E 0D          C      	mvi	a,cr 
  BC9A    CD BC92        C      	call	printbc 
  BC9D    3E 0A          C      	mvi	a,lf 
  BC9F    C3 BC92        C      	jmp	printbc 
                         C       
  BCA2                   C      blank: 
  BCA2    3E 20          C      	mvi	a,' ' 
  BCA4    C3 BC92        C      	jmp	printbc 
                         C       
  BCA7                   C      ccp_print:	; print string starting at b,c until next 00 entry 
  BCA7    C5             C      	push	b		;now print the string 
  BCA8    CD BC98        C      	call	ccp_crlf 
  BCAB    E1             C      	pop	h 
  BCAC    7E             C      prin0:	mov	a,m		;stop on 00 
  BCAD    B7             C      	ora	a 
  BCAE    C8             C      	rz 
  BCAF    23             C      	inx	h		;ready for next 
  BCB0    E5             C      	push	h 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-9


  BCB1    CD BC8C        C      	call	printchar	;character printed 
  BCB4    E1             C      	pop	h 
  BCB5    C3 BCAC        C      	jmp	prin0		;for another character 
                         C       
  BCB8                   C      ccp_initialize: 
  BCB8    0E 0D          C      	mvi	c,initf 
  BCBA    C3 0005        C      	jmp	bdos 
                         C       
  BCBD                   C      ccp_select: 
  BCBD    5F             C      	mov	e,a 
  BCBE    0E 0E          C      	mvi	c,self 
  BCC0    C3 0005        C      	jmp	bdos 
                         C       
  BCC3                   C      bdos_inr: 
  BCC3    CD 0005        C      	call	bdos 
  BCC6    32 C3EB        C      	sta	ccp_dcnt 
  BCC9    3C             C      	inr	a 
  BCCA    C9             C      	ret 
                         C       
  BCCB                   C      ccp_open:	;open the file given by d,e 
  BCCB    0E 0F          C      	mvi	c,openf 
  BCCD    C3 BCC3        C      	jmp	bdos_inr 
                         C       
  BCD0                   C      openc:	;open comfcb 
  BCD0    AF             C      	xra	a		;clear next record to read 
  BCD1    32 C3EA        C      	sta	comrec 
  BCD4    11 C3CA        C      	lxi	d,comfcb 
  BCD7    C3 BCCB        C      	jmp	ccp_open 
                         C       
  BCDA                   C      ccp_close:	;close the file given by d,e 
  BCDA    0E 10          C      	mvi	c,closef 
  BCDC    C3 BCC3        C      	jmp	bdos_inr 
                         C       
  BCDF                   C      ccp_search:	;search for the file given by d,e 
  BCDF    0E 11          C      	mvi	c,searf 
  BCE1    C3 BCC3        C      	jmp	bdos_inr 
                         C       
  BCE4                   C      ccp_searchn: 
                         C      	;search for the next occurrence of the file given by d,e 
  BCE4    0E 12          C      	mvi	c,searnf 
  BCE6    C3 BCC3        C      	jmp	bdos_inr 
                         C       
  BCE9                   C      searchcom: 
                         C      	;search for comfcb file 
  BCE9    11 C3CA        C      	lxi	d,comfcb 
  BCEC    C3 BCDF        C      	jmp	ccp_search 
                         C       
  BCEF                   C      ccp_delete:	;delete the file given by d,e 
  BCEF    0E 13          C      	mvi	c,delf 
  BCF1    C3 0005        C      	jmp	bdos 
                         C       
  BCF4                   C      bdos_cond: 
  BCF4    CD 0005        C      	call	bdos 
  BCF7    B7             C      	ora	a 
  BCF8    C9             C      	ret 
                         C       
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-10


  BCF9                   C      ccp_diskread: 
                         C      	;read the next record from the file given by d,e 
  BCF9    0E 14          C      	mvi	c,dreadf 
  BCFB    C3 BCF4        C      	jmp	bdos_cond 
                         C       
  BCFE                   C      diskreadc: 
                         C      	;read the comfcb file 
  BCFE    11 C3CA        C      	lxi	d,comfcb 
  BD01    C3 BCF9        C      	jmp	ccp_diskread 
                         C       
  BD04                   C      ccp_diskwrite: 
                         C      	;write the next record to the file given by d,e 
  BD04    0E 15          C      	mvi	c,dwritf 
  BD06    C3 BCF4        C      	jmp	bdos_cond 
                         C       
  BD09                   C      ccp_make:	;create the file given by d,e 
  BD09    0E 16          C      	mvi	c,makef 
  BD0B    C3 BCC3        C      	jmp	bdos_inr 
                         C       
  BD0E                   C      renam:	;rename the file given by d,e 
  BD0E    0E 17          C      	mvi	c,renf 
  BD10    C3 0005        C      	jmp	bdos 
                         C       
  BD13                   C      getuser: 
                         C      	;return current user code in a 
  BD13    1E FF          C      	mvi	e,0ffh		;drop through to setuser 
                         C       
  BD15                   C      setuser: 
  BD15    0E 20          C              mvi	c,userf		;sets user number 
  BD17    C3 0005        C      	jmp	bdos 
                         C       
  BD1A                   C      saveuser: 
                         C      	;save user#/disk# before possible ^c or transient 
  BD1A    CD BD13        C      	call	getuser		;code to a 
  BD1D    87             C      	add	a		;rot left 
  BD1E    87             C      	add	a 
  BD1F    87             C      	add	a 
  BD20    87             C      	add	a 
  BD21    21 C3EC        C      	lxi	h,cdisk		;4b=user, 4b=disk 
  BD24    B6             C      	ora	m 
  BD25    32 0004        C      	sta	diska		;stored away in memory for later 
  BD28    C9             C      	ret 
                         C       
  BD29                   C      setdiska: 
  BD29    3A C3EC        C      	lda	cdisk		;user/disk 
  BD2C    32 0004        C      	sta	diska 
  BD2F    C9             C      	ret 
                         C       
  BD30                   C      translate: 
                         C      	;translate character in register A to upper case 
  BD30    FE 61          C      	cpi	61h		;return if below lower case a 
  BD32    D8             C      	rc 
  BD33    FE 7B          C      	cpi	7bh		;return if above lower case z 
  BD35    D0             C      	rnc 
  BD36    E6 5F          C      	ani	5fh		;translated to upper case 
  BD38    C9             C      	ret 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-11


                         C       
  BD39                   C      readcom: 
                         C      	;read the next command into the command buffer 
                         C      	;check for submit file 
  BD39    3A C3A8        C      	lda	submit 
  BD3C    B7             C      	ora	a 
  BD3D    CA BD96        C      	jz	nosub 
                         C      	;scanning a submit file 
                         C      	;change drives to open and read the file 
  BD40    3A C3EC        C      	lda	cdisk 
  BD43    B7             C      	ora	a 
  BD44    3E 00          C      	mvi	a,0 
  BD46    C4 BCBD        C      	cnz	ccp_select 
                         C      	;have to open again in case xsub present 
  BD49    11 C3A9        C      	lxi	d,subfcb	;skip if no sub 
  BD4C    CD BCCB        C      	call	ccp_open 
  BD4F    CA BD96        C      	jz	nosub 
  BD52    3A C3B8        C      	lda	subrc		;read last record(s) first 
  BD55    3D             C      	dcr	a 
  BD56    32 C3C9        C      	sta	subcr		;current record to read 
  BD59    11 C3A9        C      	lxi	d,subfcb	;end of file if last record 
  BD5C    CD BCF9        C      	call	ccp_diskread 
  BD5F    C2 BD96        C      	jnz	nosub 
                         C      	;disk read is ok, transfer to combuf 
  BD62    11 BC07        C      	lxi	d,comlen 
  BD65    21 0080        C      	lxi	h,buff 
  BD68    06 80          C      	mvi	b,128 
  BD6A    CD C042        C      	call	move0 
                         C      	;line is transferred, close the file with a 
                         C      	;deleted record 
  BD6D    21 C3B7        C      	lxi	h,submod	;clear fwflag 
  BD70    36 00          C      	mvi	m,0 
  BD72    23             C      	inx	h		;one less record 
  BD73    35             C      	dcr	m 
  BD74    11 C3A9        C      	lxi	d,subfcb 
  BD77    CD BCDA        C      	call	ccp_close 
  BD7A    CA BD96        C      	jz	nosub 
                         C      	;close went ok, return to original drive 
  BD7D    3A C3EC        C      	lda	cdisk 
  BD80    B7             C      	ora	a 
  BD81    C4 BCBD        C      	cnz	ccp_select 
                         C      	;print to the 00 
  BD84    21 BC08        C      	lxi	h,combuf 
  BD87    CD BCAC        C      	call	prin0 
  BD8A    CD BDC2        C      	call	break_key 
  BD8D    CA BDA7        C      	jz	noread 
  BD90    CD BDDD        C      	call	del_sub		;break key depressed 
  BD93    C3 BF82        C      	jmp	ccp 
                         C       
  BD96                   C      nosub:	;no submit file 
  BD96    CD BDDD        C      	call	del_sub 
                         C      	;translate to upper case, store zero at end 
  BD99    CD BD1A        C      	call	saveuser	;user # save in case control c 
  BD9C    0E 0A          C      	mvi	c,rbuff 
  BD9E    11 BC06        C      	lxi	d,maxlen 
  BDA1    CD 0005        C      	call	bdos 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-12


  BDA4    CD BD29        C      	call	setdiska	;no control c, so restore diska 
  BDA7                   C      noread:	;enter here from submit file 
                         C      	;set the last character to zero for later scans 
  BDA7    21 BC07        C      	lxi	h,comlen	;length is in b 
  BDAA    46             C      	mov	b,m 
  BDAB                   C      readcom0: 
  BDAB    23             C      	inx	h		;end of scan? 
  BDAC    78             C      	mov	a,b 
  BDAD    B7             C      	ora	a 
  BDAE    CA BDBA        C      	jz	readcom1	;get character and translate 
  BDB1    7E             C      	mov	a,m 
  BDB2    CD BD30        C      	call	translate 
  BDB5    77             C      	mov	m,a 
  BDB6    05             C      	dcr	b 
  BDB7    C3 BDAB        C      	jmp	readcom0 
                         C       
  BDBA                   C      readcom1: ;end of scan, h,l address end of command 
  BDBA    77             C      	mov	m,a		;store a zero 
  BDBB    21 BC08        C      	lxi	h,combuf	;ready to scan to zero 
  BDBE    22 BC88        C      	shld	comaddr 
  BDC1    C9             C      	ret 
                         C       
  BDC2                   C      break_key: 
                         C      	;check for a character ready at the console 
  BDC2    0E 0B          C      	mvi	c,breakf 
  BDC4    CD 0005        C      	call	bdos 
  BDC7    B7             C      	ora	a 
  BDC8    C8             C      	rz 
  BDC9    0E 01          C      	mvi	c,rcharf	;character cleared 
  BDCB    CD 0005        C      	call	bdos 
  BDCE    B7             C      	ora	a 
  BDCF    C9             C      	ret 
                         C       
  BDD0                   C      cselect: 
                         C      	;get the currently selected drive number to reg-A 
  BDD0    0E 19          C      	mvi	c,cself 
  BDD2    C3 0005        C      	jmp	bdos 
                         C       
  BDD5                   C      setdmabuff: 
                         C      	;set default buffer dma address 
  BDD5    11 0080        C      	lxi	d,buff		;(drop through) 
                         C       
  BDD8                   C      ccp_setdma: 
                         C      	;set dma address to d,e 
  BDD8    0E 1A          C      	mvi	c,dmaf 
  BDDA    C3 0005        C      	jmp	bdos 
                         C       
  BDDD                   C      del_sub: 
                         C      	;delete the submit file, and set submit flag to false 
  BDDD    21 C3A8        C      	lxi	h,submit	;return if no sub file 
  BDE0    7E             C      	mov	a,m 
  BDE1    B7             C      	ora	a 
  BDE2    C8             C      	rz 
  BDE3    36 00          C      	mvi	m,0		;submit flag is set to false 
  BDE5    AF             C      	xra	a		;on drive a to erase file 
  BDE6    CD BCBD        C      	call	ccp_select 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-13


  BDE9    11 C3A9        C      	lxi	d,subfcb 
  BDEC    CD BCEF        C      	call	ccp_delete 
  BDEF    3A C3EC        C      	lda	cdisk		;back to original drive 
  BDF2    C3 BCBD        C      	jmp	ccp_select 
                         C       
                         C      	ifndef	noserial 
  BDF5                   C      serialize: 
                         C      	;check serialization 
  BDF5    11 BF28        C      	lxi	d,serial	;check six bytes 
  BDF8    21 C400        C      	lxi	h,bdosl 
  BDFB    06 06          C      	mvi	b,6 
  BDFD    1A             C      ser0:	ldax	d 
  BDFE    BE             C      	cmp	m 
  BDFF    C2 BFCF        C      	jnz	badserial 
  BE02    13             C      	inx	d 
  BE03    23             C      	inx	h 
  BE04    05             C      	dcr	b 
  BE05    C2 BDFD        C      	jnz	ser0 
  BE08    C9             C      	ret			;serial number is ok 
                         C      	endif 
                         C       
  BE09                   C      comerr: 
                         C      	;error in command string starting at position 
                         C      	;'staddr' and ending with first delimiter 
  BE09    CD BC98        C      	call	ccp_crlf		;space to next line 
  BE0C    2A BC8A        C      	lhld	staddr		;h,l address first to print 
  BE0F                   C      comerr0: ;print characters until blank or zero 
  BE0F    7E             C      	mov	a,m		; not blank 
  BE10    FE 20          C      	cpi	' ' 
  BE12    CA BE22        C      	jz	comerr1 
  BE15    B7             C      	ora	a		; not zero, so print it 
  BE16    CA BE22        C      	jz	comerr1 
  BE19    E5             C      	push	h 
  BE1A    CD BC8C        C      	call	printchar 
  BE1D    E1             C      	pop	h 
  BE1E    23             C      	inx	h 
  BE1F    C3 BE0F        C      	jmp	comerr0;	for another character 
  BE22                   C      comerr1: ;print question mark,and delete sub file 
  BE22    3E 3F          C      	mvi	a,'?' 
  BE24    CD BC8C        C      	call	printchar 
  BE27    CD BC98        C      	call	ccp_crlf 
  BE2A    CD BDDD        C      	call	del_sub 
  BE2D    C3 BF82        C      	jmp	ccp ;restart with next command 
                         C       
                         C      ; fcb scan and fill subroutine (entry is at fillfcb below) 
                         C      	;fill the comfcb, indexed by A (0 or 16) 
                         C      	;subroutines 
  BE30                   C      delim:	;look for a delimiter 
  BE30    1A             C      	ldax	d		;not the last element 
  BE31    B7             C      	ora	a 
  BE32    C8             C      	rz 
  BE33    FE 20          C      	cpi	' '		;non graphic 
  BE35    DA BE09        C      	jc	comerr 
  BE38    C8             C      	rz			;treat blank as delimiter 
  BE39    FE 3D          C      	cpi	'=' 
  BE3B    C8             C      	rz 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-14


  BE3C    FE 5F          C      	cpi	la		;left arrow 
  BE3E    C8             C      	rz 
  BE3F    FE 2E          C      	cpi	'.' 
  BE41    C8             C      	rz 
  BE42    FE 3A          C      	cpi	':' 
  BE44    C8             C      	rz 
  BE45    FE 3B          C      	cpi	';' 
  BE47    C8             C      	rz 
  BE48    FE 3C          C      	cpi	'<' 
  BE4A    C8             C      	rz 
  BE4B    FE 3E          C      	cpi	'>' 
  BE4D    C8             C      	rz 
  BE4E    C9             C      	ret			;delimiter not found 
                         C       
  BE4F                   C      deblank: ;deblank the input line 
  BE4F    1A             C      	ldax	d		;treat end of line as blank 
  BE50    B7             C      	ora	a 
  BE51    C8             C      	rz 
  BE52    FE 20          C      	cpi	' ' 
  BE54    C0             C      	rnz 
  BE55    13             C      	inx	d 
  BE56    C3 BE4F        C      	jmp	deblank 
                         C       
  BE59                   C      ccp_addh: ;add a to h,l 
  BE59    85             C      	add	l 
  BE5A    6F             C      	mov	l,a 
  BE5B    D0             C      	rnc 
  BE5C    24             C      	inr	h 
  BE5D    C9             C      	ret 
                         C       
  BE5E                   C      fillfcb0: 
                         C      	;equivalent to fillfcb(0) 
  BE5E    3E 00          C      	mvi	a,0 
                         C       
  BE60                   C      fillfcb: 
  BE60    21 C3CA        C      	lxi	h,comfcb	;fcb rescanned at end 
  BE63    CD BE59        C      	call	ccp_addh 
  BE66    E5             C      	push	h 
  BE67    E5             C      	push	h 
  BE68    AF             C      	xra	a		;clear selected disk (in case A:...) 
  BE69    32 C3ED        C      	sta	sdisk 
  BE6C    2A BC88        C      	lhld	comaddr		;command address in d,e 
  BE6F    EB             C      	xchg 
  BE70    CD BE4F        C      	call	deblank		;to first non-blank character 
  BE73    EB             C      	xchg			;in case of errors 
  BE74    22 BC8A        C      	shld	staddr 
  BE77    EB             C      	xchg			;d,e has command, h,l has fcb address 
  BE78    E1             C      	pop	h 
                         C      	;look for preceding file name A: B: ... 
  BE79    1A             C      	ldax	d		;use current disk if empty command 
  BE7A    B7             C      	ora	a 
  BE7B    CA BE89        C      	jz	setcur0 
  BE7E    DE 40          C      	sbi	'A'-1		;disk name held in b if : follows 
  BE80    47             C      	mov	b,a 
  BE81    13             C      	inx	d		;set disk name if : 
  BE82    1A             C      	ldax	d 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-15


  BE83    FE 3A          C      	cpi	':' 
  BE85    CA BE90        C      	jz	setdsk 
                         C       
  BE88                   C      setcur: ;set current disk 
  BE88    1B             C      	dcx	d		;back to first character of command 
  BE89                   C      setcur0: 
  BE89    3A C3EC        C      	lda	cdisk 
  BE8C    77             C      	mov	m,a 
  BE8D    C3 BE96        C      	jmp	setname 
                         C       
  BE90                   C      setdsk: ;set disk to name in register b 
  BE90    78             C      	mov	a,b		;mark as disk selected 
  BE91    32 C3ED        C      	sta	sdisk 
  BE94    70             C      	mov	m,b		;past the : 
  BE95    13             C      	inx	d 
                         C       
  BE96                   C      setname: ;set the file name field 
  BE96    06 08          C      	mvi	b,8		;file name length (max) 
  BE98                   C      setnam0: 
  BE98    CD BE30        C      	call	delim		;not a delimiter 
  BE9B    CA BEB9        C      	jz	padname 
  BE9E    23             C      	inx	h		;must be ?'s 
  BE9F    FE 2A          C      	cpi	'*' 
  BEA1    C2 BEA9        C      	jnz	setnam1 
  BEA4    36 3F          C      	mvi	m,'?'		;to dec count 
  BEA6    C3 BEAB        C      	jmp	setnam2 
                         C       
  BEA9                   C      setnam1: 
  BEA9    77             C      	mov	m,a		;store character to fcb 
  BEAA    13             C      	inx	d 
  BEAB                   C      setnam2: 
  BEAB    05             C      	dcr	b		;count down length 
  BEAC    C2 BE98        C      	jnz	setnam0 
                         C       
                         C      	;end of name, truncate remainder 
  BEAF    CD BE30        C      trname:	call	delim		;set type field if delimiter 
  BEB2    CA BEC0        C      	jz	setty 
  BEB5    13             C      	inx	d 
  BEB6    C3 BEAF        C      	jmp	trname 
                         C       
  BEB9                   C      padname: 
  BEB9    23             C      	inx	h 
  BEBA    36 20          C      	mvi	m,' ' 
  BEBC    05             C      	dcr	b 
  BEBD    C2 BEB9        C      	jnz	padname 
                         C       
  BEC0                   C      setty: ;set the type field 
  BEC0    06 03          C      	mvi	b,3		;skip the type field if no . 
  BEC2    FE 2E          C      	cpi	'.' 
  BEC4    C2 BEE9        C      	jnz	padty 
  BEC7    13             C      	inx	d		;past the ., to the file type field 
  BEC8                   C      setty0: ;set the field from the command buffer 
  BEC8    CD BE30        C      	call	delim 
  BECB    CA BEE9        C      	jz	padty 
  BECE    23             C      	inx	h 
  BECF    FE 2A          C      	cpi	'*' 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-16


  BED1    C2 BED9        C      	jnz	setty1 
  BED4    36 3F          C      	mvi	m,'?'		;since * specified 
  BED6    C3 BEDB        C      	jmp	setty2 
                         C       
  BED9                   C      setty1: ;not a *, so copy to type field 
  BED9    77             C      	mov	m,a 
  BEDA    13             C      	inx	d 
  BEDB                   C      setty2: ;decrement count and go again 
  BEDB    05             C      	dcr	b 
  BEDC    C2 BEC8        C      	jnz	setty0 
                         C       
                         C      	;end of type field, truncate 
  BEDF                   C      trtyp: ;truncate type field 
  BEDF    CD BE30        C      	call	delim 
  BEE2    CA BEF0        C      	jz	efill 
  BEE5    13             C      	inx	d 
  BEE6    C3 BEDF        C      	jmp	trtyp 
                         C       
  BEE9                   C      padty:	;pad the type field with blanks 
  BEE9    23             C      	inx	h 
  BEEA    36 20          C      	mvi	m,' ' 
  BEEC    05             C      	dcr	b 
  BEED    C2 BEE9        C      	jnz	padty 
                         C       
  BEF0                   C      efill: ;end of the filename/filetype fill, save command address 
                         C      	;fill the remaining fields for the fcb 
  BEF0    06 03          C      	mvi	b,3 
  BEF2    23             C      efill0:	inx h 
  BEF3    36 00          C      	mvi	m,0 
  BEF5    05             C      	dcr	b 
  BEF6    C2 BEF2        C      	jnz	efill0 
  BEF9    EB             C      	xchg			;set new starting point 
  BEFA    22 BC88        C      	shld	comaddr 
                         C       
                         C      	;recover the start address of the fcb and count ?'s 
  BEFD    E1             C      	pop	h		;b=0, c=8+3 
  BEFE    01 000B        C      	lxi	b,11 
  BF01    23             C      scnq:	inx	h 
  BF02    7E             C      	mov	a,m 
  BF03    FE 3F          C      	cpi	'?' 
  BF05    C2 BF09        C      	jnz	scnq0 
                         C      	;? found, count it in b 
  BF08    04             C      	inr b 
  BF09    0D             C      scnq0:	dcr	c 
  BF0A    C2 BF01        C      	jnz	scnq 
                         C       
                         C      	;number of ?'s in c, move to a and return with flags set 
  BF0D    78             C      	mov	a,b 
  BF0E    B7             C      	ora	a 
  BF0F    C9             C      	ret 
                         C       
  BF10                   C      intvec: 
                         C      	;intrinsic function names (all are four characters) 
  BF10    44 49 52 20    C      	db	"DIR " 
  BF14    45 52 41 20    C      	db	"ERA " 
  BF18    54 59 50 45    C      	db	"TYPE" 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-17


  BF1C    53 41 56 45    C      	db	"SAVE" 
  BF20    52 45 4E 20    C      	db	"REN " 
  BF24    55 53 45 52    C              db      "USER" 
  0006                   C      intlen	equ ($-intvec)/4 ;intrinsic function length 
                         C      	 
                         C      ; serial number (details not documented in original DRI source file) 
  BF28    00             C      serial:	db	0		; OEM number, low byte 
  BF29    00             C      	db	0		; CP/M version, 16h = 2.2 
  BF2A    00             C      	db	0		; OEM number, high byte 
  BF2B    00 00 00       C      	db	0,0,0		; serial number, big-endian 
                         C       
                         C       
  BF2E                   C      intrinsic: 
                         C      	;look for intrinsic functions (comfcb has been filled) 
  BF2E    21 BF10        C      	lxi	h,intvec	;c counts intrinsics as scanned 
  BF31    0E 00          C      	mvi	c,0 
  BF33                   C      intrin0: 
  BF33    79             C      	mov	a,c		;done with scan? 
  BF34    FE 06          C      	cpi	intlen 
  BF36    D0             C      	rnc 
                         C      	;no, more to scan 
  BF37    11 C3CB        C      	lxi	d,comfcb+1	;beginning of name 
  BF3A    06 04          C      	mvi	b,4		;length of match is in b 
  BF3C                   C      intrin1: 
  BF3C    1A             C      	ldax	d		;match? 
  BF3D    BE             C      	cmp	m 
  BF3E    C2 BF4F        C      	jnz	intrin2		;skip if no match 
  BF41    13             C      	inx	d 
  BF42    23             C      	inx	h 
  BF43    05             C      	dcr	b 
  BF44    C2 BF3C        C      	jnz	intrin1		;loop while matching 
                         C       
                         C      	;complete match on name, check for blank in fcb 
  BF47    1A             C      	ldax	d		;otherwise matched 
  BF48    FE 20          C      	cpi	' ' 
  BF4A    C2 BF54        C      	jnz	intrin3 
  BF4D    79             C      	mov	a,c		;with intrinsic number in a 
  BF4E    C9             C      	ret 
                         C       
  BF4F                   C      intrin2: ;mismatch, move to end of intrinsic 
  BF4F    23             C      	inx	h 
  BF50    05             C      	dcr	b 
  BF51    C2 BF4F        C      	jnz	intrin2 
                         C       
  BF54                   C      intrin3: ;try next intrinsic 
  BF54    0C             C      	inr	c		;to next intrinsic number 
  BF55    C3 BF33        C      	jmp	intrin0		;for another round 
                         C       
  BF58                   C      ccpclear: 
                         C      	;clear the command buffer 
  BF58    AF             C      	xra	a 
  BF59    32 BC07        C      	sta	comlen 
                         C      	;drop through to start ccp 
  BF5C                   C      ccpstart: 
                         C      	;enter here from boot loader 
  BF5C    31 C3A8        C      	lxi	sp,stack	;save initial disk number 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-18


  BF5F    C5             C      	push	b 
                         C              ;(high order 4bits=user code, low 4bits=disk#) 
  BF60    79             C      	mov	a,c		;user code 
  BF61    1F             C      	rar 
  BF62    1F             C      	rar 
  BF63    1F             C      	rar 
  BF64    1F             C      	rar 
  BF65    E6 0F          C      	ani	0fh 
                         C      	 
  BF67    5F             C      	mov	e,a		;user code selected 
  BF68    CD BD15        C      	call	setuser 
                         C      	;initialize for this user, get $ flag 
  BF6B    CD BCB8        C              call	ccp_initialize	;0ffh in accum if $ file present 
  BF6E    32 C3A8        C              sta	submit		;submit flag set if $ file present 
  BF71    C1             C              pop	b		;recall user code and disk number 
  BF72    79             C      	mov	a,c		;disk number in accumulator 
  BF73    E6 0F          C      	ani	0fh 
  BF75    32 C3EC        C              sta	cdisk		;clears user code nibble 
  BF78    CD BCBD        C      	call	ccp_select		;proper disk is selected, now check sub files 
                         C      	;check for initial command 
  BF7B    3A BC07        C      	lda	comlen		;assume typed already 
  BF7E    B7             C      	ora	a 
  BF7F    C2 BF98        C      	jnz	ccp0 
                         C       
  BF82                   C      ccp: 
                         C      	;enter here on each command or error condition 
  BF82    31 C3A8        C      	lxi	sp,stack 
  BF85    CD BC98        C      	call	ccp_crlf		;print d> prompt, where d is disk name 
  BF88    CD BDD0        C      	call	cselect		;get current disk number 
  BF8B    C6 41          C      	adi	'A' 
  BF8D    CD BC8C        C      	call	printchar 
  BF90    3E 3E          C      	mvi	a,'>' 
  BF92    CD BC8C        C      	call	printchar 
  BF95    CD BD39        C      	call	readcom		;command buffer filled 
  BF98                   C      ccp0:	;(enter here from initialization with command full) 
  BF98    11 0080        C      	lxi	d,buff		;default dma address at buff 
  BF9B    CD BDD8        C      	call	ccp_setdma 
  BF9E    CD BDD0        C      	call	cselect		;current disk number saved 
  BFA1    32 C3EC        C      	sta	cdisk 
  BFA4    CD BE5E        C      	call	fillfcb0	;command fcb filled 
  BFA7    C4 BE09        C      	cnz	comerr		;the name cannot be an ambiguous reference 
  BFAA    3A C3ED        C      	lda	sdisk 
  BFAD    B7             C      	ora	a 
  BFAE    C2 C2A5        C      	jnz	userfunc 
                         C      	;check for an intrinsic function 
  BFB1    CD BF2E        C      	call	intrinsic 
  BFB4    21 BFC1        C      	lxi	h,jmptab	;index is in the accumulator 
  BFB7    5F             C      	mov	e,a		;index in d,e 
  BFB8    16 00          C      	mvi	d,0 
  BFBA    19             C      	dad	d 
  BFBB    19             C      	dad	d 
  BFBC    7E             C      	mov	a,m 
  BFBD    23             C      	inx	h 
  BFBE    66             C      	mov	h,m 
  BFBF    6F             C      	mov	l,a 
  BFC0    E9             C      	pchl 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-19


                         C      	;pc changes to the proper intrinsic or user function 
                         C       
  BFC1                   C      jmptab: 
  BFC1    C077           C      	dw	direct	;directory search 
  BFC3    C11F           C      	dw	erase	;file erase 
  BFC5    C15D           C      	dw	type	;type file 
  BFC7    C1AD           C      	dw	save	;save memory image 
  BFC9    C210           C      	dw	ccp_rename	;file rename 
  BFCB    C28E           C      	dw	user	;user number 
  BFCD    C2A5           C      	dw	userfunc;user-defined function 
                         C       
                         C      	ifndef	noserial 
  BFCF                   C      badserial: 
  BFCF    21 76F3        C      	LXI	H,76F3H	;'DI HLT' instructions.	 
                         C      	;typo "lxi h,di or (hlt shl 8)" here originally, 
                         C      	;corrected by comparing to disassembly of Clark Calkins. 
  BFD2    22 BC00        C      	shld	ccploc 
  BFD5    21 BC00        C      	lxi	h,ccploc 
  BFD8    E9             C      	pchl 
                         C      	endif 
                         C       
                         C      ;utility subroutines for intrinsic handlers 
  BFD9                   C      readerr: 
                         C      	;print the read error message 
  BFD9    01 BFDF        C      	lxi	b,rdmsg 
  BFDC    C3 BCA7        C      	jmp	ccp_print 
  BFDF    52 45 41 44    C      rdmsg: db "READ ERROR",0 
  BFE3    20 45 52 52    C      
  BFE7    4F 52 00       C      
                         C       
  BFEA                   C      nofile: 
                         C      	;print no file message 
  BFEA    01 BFF0        C      	lxi	b,nofmsg 
  BFED    C3 BCA7        C      	jmp	ccp_print 
  BFF0    4E 4F 20 46    C      nofmsg: db "NO FILE",0 
  BFF4    49 4C 45 00    C      
                         C       
  BFF8                   C      getnumber: ;read a number from the command line 
  BFF8    CD BE5E        C      	call	fillfcb0	;should be number 
  BFFB    3A C3ED        C      	lda	sdisk		;cannot be prefixed 
  BFFE    B7             C      	ora	a 
  BFFF    C2 BE09        C      	jnz	comerr 
                         C      	;convert the byte value in comfcb to binary 
  C002    21 C3CB        C      	lxi	h,comfcb+1	;(b=0, c=11) 
  C005    01 000B        C      	lxi	b,11 
                         C      	;value accumulated in b, c counts name length to zero 
  C008    7E             C      conv0:	mov	a,m 
  C009    FE 20          C      	cpi ' ' 
  C00B    CA C033        C      	jz	conv1 
                         C      	;more to scan, convert char to binary and add 
  C00E    23             C      	inx	h		;valid? 
  C00F    D6 30          C      	sui	'0' 
  C011    FE 0A          C      	cpi	10 
  C013    D2 BE09        C      	jnc	comerr 
  C016    57             C      	mov	d,a		;save value 
  C017    78             C      	mov	a,b		;mult by 10 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-20


  C018    E6 E0          C      	ani	11100000b 
  C01A    C2 BE09        C      	jnz	comerr 
  C01D    78             C      	mov	a,b		;recover value 
  C01E    07             C      	rlc			;*8 
  C01F    07             C      	rlc 
  C020    07             C      	rlc 
  C021    80             C      	add	b 
  C022    DA BE09        C      	jc	comerr 
  C025    80             C      	add	b		;*8+*2 = *10 
  C026    DA BE09        C      	jc	comerr 
  C029    82             C      	add	d		;+digit 
  C02A    DA BE09        C      	jc	comerr 
  C02D    47             C      	mov	b,a		;for another digit 
  C02E    0D             C      	dcr	c 
  C02F    C2 C008        C      	jnz	conv0 
  C032    C9             C      	ret 
  C033                   C      conv1:	;end of digits, check for all blanks 
  C033    7E             C      	mov	a,m		;blanks? 
  C034    FE 20          C      	cpi	' ' 
  C036    C2 BE09        C      	jnz	comerr 
  C039    23             C      	inx	h 
  C03A    0D             C      	dcr	c 
  C03B    C2 C033        C      	jnz	conv1 
  C03E    78             C      	mov	a,b		;recover value 
  C03F    C9             C      	ret 
                         C       
  C040                   C      movename: 
                         C      	;move 3 characters from h,l to d,e addresses 
  C040    06 03          C      	mvi	b,3 
  C042    7E             C      move0:	mov	a,m 
  C043    12             C      	stax	d 
  C044    23             C      	inx	h 
  C045    13             C      	inx	d 
  C046    05             C      	dcr	b 
  C047    C2 C042        C      	jnz	move0 
  C04A    C9             C      	ret 
                         C       
  C04B                   C      addhcf:	;buff + a + c to h,l followed by fetch 
  C04B    21 0080        C      	lxi	h,buff 
  C04E    81             C      	add	c 
  C04F    CD BE59        C      	call	ccp_addh 
  C052    7E             C      	mov	a,m 
  C053    C9             C      	ret 
                         C       
  C054                   C      setdisk: 
                         C      	;change disks for this command, if requested 
  C054    AF             C      	xra	a		;clear disk name from fcb 
  C055    32 C3CA        C      	sta	comfcb 
  C058    3A C3ED        C      	lda	sdisk		;no action if not specified 
  C05B    B7             C      	ora	a 
  C05C    C8             C      	rz 
  C05D    3D             C      	dcr	a		;already selected 
  C05E    21 C3EC        C      	lxi	h,cdisk 
  C061    BE             C      	cmp	m 
  C062    C8             C      	rz 
  C063    C3 BCBD        C      	jmp	ccp_select 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-21


                         C       
  C066                   C      resetdisk: 
                         C      	;return to original disk after command 
  C066    3A C3ED        C      	lda	sdisk		;no action if not selected 
  C069    B7             C      	ora	a 
  C06A    C8             C      	rz 
  C06B    3D             C      	dcr	a		;same disk 
  C06C    21 C3EC        C      	lxi	h,cdisk 
  C06F    BE             C      	cmp	m 
  C070    C8             C      	rz 
  C071    3A C3EC        C      	lda	cdisk 
  C074    C3 BCBD        C      	jmp	ccp_select 
                         C       
                         C      ;individual intrinsics follow 
  C077                   C      direct: 
                         C      	;directory search 
  C077    CD BE5E        C      	call	fillfcb0	;comfcb gets file name 
  C07A    CD C054        C      	call	setdisk		;change disk drives if requested 
  C07D    21 C3CB        C      	lxi	h,comfcb+1	;may be empty request 
  C080    7E             C      	mov	a,m 
  C081    FE 20          C      	cpi	' '		;skip fill of ??? if not blank 
  C083    C2 C08F        C      	jnz	dir1 
                         C      	;set comfcb to all ??? for current disk 
  C086    06 0B          C      	mvi	b,11		;length of fill ????????.??? 
  C088    36 3F          C      dir0:	mvi	m,'?' 
  C08A    23             C      	inx	h 
  C08B    05             C      	dcr	b 
  C08C    C2 C088        C      	jnz	dir0 
                         C      	;not a blank request, must be in comfcb 
  C08F    1E 00          C      dir1:	mvi	e,0		;E counts directory entries 
  C091    D5             C      	push	d 
  C092    CD BCE9        C      	call	searchcom	;first one has been found 
  C095    CC BFEA        C      	cz	nofile		;not found message 
  C098    CA C11B        C      dir2:	jz	endir 
                         C      	;found, but may be system file 
  C09B    3A C3EB        C      	lda	ccp_dcnt		;get the location of the element 
  C09E    0F             C      	rrc 
  C09F    0F             C      	rrc 
  C0A0    0F             C      	rrc 
  C0A1    E6 60          C      	ani	1100000b 
  C0A3    4F             C      	mov	c,a 
                         C      	;c contains base index into buff for dir entry 
  C0A4    3E 0A          C      	mvi	a,sysfile	;value to A 
  C0A6    CD C04B        C      	call	addhcf 
  C0A9    17             C      	ral			;skip if system file 
  C0AA    DA C10F        C      	jc	dir6 
                         C      	;c holds index into buffer 
                         C      	;another fcb found, new line? 
  C0AD    D1             C      	pop	d 
  C0AE    7B             C      	mov	a,e 
  C0AF    1C             C      	inr	e 
  C0B0    D5             C      	push	d 
                         C      	;e=0,1,2,3,...new line if mod 4 = 0 
  C0B1    E6 03          C      	ani	11b		;and save the test 
  C0B3    F5             C      	push	psw 
  C0B4    C2 C0CC        C      	jnz	dirhdr0		;header on current line 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-22


  C0B7    CD BC98        C      	call	ccp_crlf 
  C0BA    C5             C      	push	b 
  C0BB    CD BDD0        C      	call	cselect 
  C0BE    C1             C      	pop	b 
                         C      	;current disk in A 
  C0BF    C6 41          C      	adi	'A' 
  C0C1    CD BC92        C      	call	printbc 
  C0C4    3E 3A          C      	mvi	a,':' 
  C0C6    CD BC92        C      	call	printbc 
  C0C9    C3 C0D4        C      	jmp	dirhdr1		;skip current line hdr 
  C0CC                   C      dirhdr0: 
  C0CC    CD BCA2        C      	call	blank		;after last one 
  C0CF    3E 3A          C      	mvi	a,':' 
  C0D1    CD BC92        C      	call	printbc 
  C0D4                   C      dirhdr1: 
  C0D4    CD BCA2        C      	call	blank 
                         C      	;compute position of name in buffer 
  C0D7    06 01          C      	mvi	b,1		;start with first character of name 
  C0D9    78             C      dir3:	mov	a,b		;buff+a+c fetched 
  C0DA    CD C04B        C      	call	addhcf 
  C0DD    E6 7F          C      	ani	7fh		;mask flags 
                         C      	;may delete trailing blanks 
  C0DF    FE 20          C      	cpi	' '		;check for blank type 
  C0E1    C2 C0F9        C      	jnz	dir4 
  C0E4    F1             C      	pop	psw		;may be 3rd item 
  C0E5    F5             C      	push	psw 
  C0E6    FE 03          C      	cpi	3		;place blank at end if not 
  C0E8    C2 C0F7        C      	jnz	dirb 
  C0EB    3E 09          C      	mvi	a,9		;first char of type 
  C0ED    CD C04B        C      	call	addhcf 
  C0F0    E6 7F          C      	ani	7fh 
  C0F2    FE 20          C      	cpi	' ' 
  C0F4    CA C10E        C      	jz	dir5 
                         C      	;not a blank in the file type field 
  C0F7    3E 20          C      dirb:	mvi	a,' '		;restore trailing filename chr 
  C0F9                   C      dir4: 
  C0F9    CD BC92        C      	call	printbc		;char printed 
  C0FC    04             C      	inr	b 
  C0FD    78             C      	mov	a,b 
  C0FE    FE 0C          C      	cpi	12 
  C100    D2 C10E        C      	jnc	dir5 
                         C      	;check for break between names 
  C103    FE 09          C      	cpi	9		;for another char 
  C105    C2 C0D9        C      	jnz	dir3 
                         C      	;print a blank between names 
  C108    CD BCA2        C      	call	blank 
  C10B    C3 C0D9        C      	jmp	dir3 
                         C       
  C10E                   C      dir5:	;end of current entry 
  C10E    F1             C      	pop	psw		;discard the directory counter (mod 4) 
  C10F    CD BDC2        C      dir6:	call	break_key	;check for interrupt at keyboard 
  C112    C2 C11B        C      	jnz	endir		;abort directory search 
  C115    CD BCE4        C      	call	ccp_searchn		;for another entry 
  C118    C3 C098        C      	jmp	dir2 
  C11B                   C      endir:	;end of directory scan 
  C11B    D1             C      	pop	d		;discard directory counter 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-23


  C11C    C3 C383        C      	jmp	retcom 
                         C       
                         C       
  C11F                   C      erase: 
  C11F    CD BE5E        C      	call	fillfcb0	;cannot be all ???'s 
  C122    FE 0B          C      	cpi	11 
  C124    C2 C142        C      	jnz	erasefile 
                         C      	;erasing all of the disk 
  C127    01 C152        C      	lxi	b,ermsg 
  C12A    CD BCA7        C      	call	ccp_print 
  C12D    CD BD39        C      	call	readcom 
  C130    21 BC07        C      	lxi	h,comlen	;bad input 
  C133    35             C      	dcr	m 
  C134    C2 BF82        C      	jnz	ccp 
  C137    23             C      	inx	h 
  C138    7E             C      	mov	a,m 
  C139    FE 59          C      	cpi	'Y' 
  C13B    C2 BF82        C      	jnz	ccp 
                         C      	;ok, erase the entire diskette 
  C13E    23             C      	inx	h		;otherwise error at retcom 
  C13F    22 BC88        C      	shld	comaddr 
  C142                   C      erasefile: 
  C142    CD C054        C      	call	setdisk 
  C145    11 C3CA        C      	lxi	d,comfcb 
  C148    CD BCEF        C      	call	ccp_delete 
  C14B    3C             C      	inr	a		;255 returned if not found 
  C14C    CC BFEA        C      	cz	nofile		;no file message if so 
  C14F    C3 C383        C      	jmp	retcom 
                         C       
  C152    41 4C 4C 20    C      ermsg:	db	"ALL (Y/N)?",0 
  C156    28 59 2F 4E    C      
  C15A    29 3F 00       C      
                         C       
  C15D                   C      type: 
  C15D    CD BE5E        C      	call	fillfcb0	;don't allow ?'s in file name 
  C160    C2 BE09        C      	jnz	comerr 
  C163    CD C054        C      	call	setdisk		;open the file 
  C166    CD BCD0        C      	call	openc 
  C169    CA C1A7        C      	jz	typerr		;zero flag indicates not found 
                         C      	;file opened, read 'til eof 
  C16C    CD BC98        C      	call	ccp_crlf		;read first buffer 
  C16F    21 C3EE        C      	lxi	h,bptr 
  C172    36 FF          C      	mvi	m,255 
  C174                   C      type0:	;loop on bptr 
  C174    21 C3EE        C      	lxi	h,bptr		;end buffer 
  C177    7E             C      	mov	a,m 
  C178    FE 80          C      	cpi	128 
  C17A    DA C187        C      	jc	type1		;carry if 0,1,...,127 
  C17D    E5             C      	push	h 
                         C      	;read another buffer full 
  C17E    CD BCFE        C      	call	diskreadc 
  C181    E1             C      	pop	h		;recover address of bptr 
  C182    C2 C1A0        C      	jnz	typeof		;hard end of file 
  C185    AF             C      	xra	a		;bptr = 0 
  C186    77             C      	mov	m,a 
  C187                   C      type1:	;read character at bptr and print 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-24


  C187    34             C      	inr	m		;bptr = bptr + 1 
  C188    21 0080        C      	lxi	h,buff		;h,l addresses char 
  C18B    CD BE59        C      	call	ccp_addh 
  C18E    7E             C      	mov	a,m 
  C18F    FE 1A          C      	cpi	eofile 
  C191    CA C383        C      	jz	retcom 
  C194    CD BC8C        C      	call	printchar 
  C197    CD BDC2        C      	call	break_key	;abort if break 
  C19A    C2 C383        C      	jnz	retcom 
  C19D    C3 C174        C      	jmp	type0 ;for another character 
                         C       
  C1A0                   C      typeof:	;end of file, check for errors 
  C1A0    3D             C      	dcr	a 
  C1A1    CA C383        C      	jz	retcom 
  C1A4    CD BFD9        C      	call	readerr 
  C1A7    CD C066        C      typerr:	call	resetdisk 
  C1AA    C3 BE09        C      	jmp	comerr 
                         C       
  C1AD                   C      save: 
  C1AD    CD BFF8        C      	call	getnumber	; value to register a 
  C1B0    F5             C      	push	psw		;save it for later 
                         C       
                         C      	;should be followed by a file to save the memory image 
  C1B1    CD BE5E        C      	call	fillfcb0 
  C1B4    C2 BE09        C      	jnz	comerr		;cannot be ambiguous 
  C1B7    CD C054        C      	call	setdisk		;may be a disk change 
  C1BA    11 C3CA        C      	lxi	d,comfcb	;existing file removed 
  C1BD    D5             C      	push	d 
  C1BE    CD BCEF        C      	call	ccp_delete 
  C1C1    D1             C      	pop	d 
  C1C2    CD BD09        C      	call	ccp_make		;create a new file on disk 
  C1C5    CA C1FB        C      	jz	saverr		;no directory space 
  C1C8    AF             C      	xra	a		;clear next record field 
  C1C9    32 C3EA        C      	sta	comrec 
  C1CC    F1             C      	pop	psw		;#pages to write is in a, change to #sectors 
  C1CD    6F             C      	mov	l,a 
  C1CE    26 00          C      	mvi	h,0 
  C1D0    29             C      	dad	h  
  C1D1    11 0100        C      	lxi	d,tran		;h,l is sector count, d,e is load address 
  C1D4                   C      save0:	;check for sector count zero 
  C1D4    7C             C      	mov	a,h		;may be completed 
  C1D5    B5             C      	ora	l 
  C1D6    CA C1F1        C      	jz	save1 
  C1D9    2B             C      	dcx	h		;sector count = sector count - 1 
  C1DA    E5             C      	push	h		;save it for next time around 
  C1DB    21 0080        C      	lxi	h,128		;next dma address saved 
  C1DE    19             C      	dad	d 
  C1DF    E5             C      	push	h 
  C1E0    CD BDD8        C      	call	ccp_setdma		;current dma address set 
  C1E3    11 C3CA        C      	lxi	d,comfcb 
  C1E6    CD BD04        C      	call	ccp_diskwrite 
  C1E9    D1             C      	pop	d		;dma address, sector count 
  C1EA    E1             C      	pop	h 
  C1EB    C2 C1FB        C      	jnz	saverr		;may be disk full case 
  C1EE    C3 C1D4        C      	jmp	save0		;for another sector 
                         C       
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-25


  C1F1                   C      save1:	;end of dump, close the file 
  C1F1    11 C3CA        C      	lxi	d,comfcb 
  C1F4    CD BCDA        C      	call	ccp_close 
  C1F7    3C             C      	inr	a		;255 becomes 00 if error 
  C1F8    C2 C201        C      	jnz	retsave		;for another command 
  C1FB                   C      saverr:	;must be full or read only disk 
  C1FB    01 C207        C      	lxi	b,fullmsg 
  C1FE    CD BCA7        C      	call	ccp_print 
  C201                   C      retsave: 
                         C      	;reset dma buffer 
  C201    CD BDD5        C      	call	setdmabuff 
  C204    C3 C383        C      	jmp	retcom 
  C207                   C      fullmsg: 
  C207    4E 4F 20 53    C      	db "NO SPACE",0 
  C20B    50 41 43 45    C      
  C20F    00             C      
                         C       
                         C       
  C210                   C      ccp_rename: 
                         C      	;rename a file on a specific disk 
  C210    CD BE5E        C      	call	fillfcb0	;must be unambiguous 
  C213    C2 BE09        C      	jnz	comerr 
  C216    3A C3ED        C      	lda	sdisk		;save for later compare 
  C219    F5             C      	push	psw 
  C21A    CD C054        C      	call	setdisk		;disk selected 
  C21D    CD BCE9        C      	call	searchcom	;is new name already there? 
  C220    C2 C279        C      	jnz	renerr3 
                         C      	;file doesn't exist, move to second half of fcb 
  C223    21 C3CA        C      	lxi	h,comfcb 
  C226    11 C3DA        C      	lxi	d,comfcb+16 
  C229    06 10          C      	mvi	b,16 
  C22B    CD C042        C      	call	move0 
                         C      	;check for = or left arrow 
  C22E    2A BC88        C      	lhld	comaddr 
  C231    EB             C      	xchg 
  C232    CD BE4F        C      	call	deblank 
  C235    FE 3D          C      	cpi	'='		;ok if = 
  C237    CA C23F        C      	jz	ren1 
  C23A    FE 5F          C      	cpi	la 
  C23C    C2 C273        C      	jnz	renerr2 
  C23F    EB             C      ren1:	xchg			;past delimiter 
  C240    23             C      	inx	h 
  C241    22 BC88        C      	shld	comaddr 
                         C      	;proper delimiter found 
  C244    CD BE5E        C      	call	fillfcb0 
  C247    C2 C273        C      	jnz	renerr2 
                         C      	;check for drive conflict 
  C24A    F1             C      	pop	psw		;previous drive number 
  C24B    47             C      	mov	b,a 
  C24C    21 C3ED        C      	lxi	h,sdisk 
  C24F    7E             C      	mov	a,m 
  C250    B7             C      	ora	a 
  C251    CA C259        C      	jz	ren2 
                         C      	;drive name was specified.  same one? 
  C254    B8             C      	cmp	b 
  C255    70             C      	mov	m,b 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-26


  C256    C2 C273        C      	jnz	renerr2 
  C259    70             C      ren2:	mov	m,b		;store the name in case drives switched 
  C25A    AF             C      	xra	a		;is old file there? 
  C25B    32 C3CA        C      	sta	comfcb 
  C25E    CD BCE9        C      	call	searchcom 
  C261    CA C26D        C      	jz	renerr1 
                         C       
                         C      	;everything is ok, rename the file 
  C264    11 C3CA        C      	lxi	d,comfcb 
  C267    CD BD0E        C      	call	renam 
  C26A    C3 C383        C      	jmp	retcom 
                         C       
  C26D                   C      renerr1:; no file on disk 
  C26D    CD BFEA        C      	call	nofile 
  C270    C3 C383        C      	jmp	retcom 
  C273                   C      renerr2:; ambigous reference/name conflict 
  C273    CD C066        C      	call	resetdisk 
  C276    C3 BE09        C      	jmp	comerr 
  C279                   C      renerr3:; file already exists 
  C279    01 C282        C      	lxi	b,renmsg 
  C27C    CD BCA7        C      	call	ccp_print 
  C27F    C3 C383        C      	jmp	retcom 
  C282    46 49 4C 45    C      renmsg:	db "FILE EXISTS",0 
  C286    20 45 58 49    C      
  C28A    53 54 53 00    C      
                         C       
  C28E                   C      user: 
                         C      	;set user number 
  C28E    CD BFF8        C      	call	getnumber	; leaves the value in the accumulator 
  C291    FE 10          C      	cpi	16		; must be between 0 and 15 
  C293    D2 BE09        C      	jnc	comerr 
  C296    5F             C      	mov	e,a		;save for setuser call 
  C297    3A C3CB        C      	lda	comfcb+1 
  C29A    FE 20          C      	cpi	' ' 
  C29C    CA BE09        C      	jz	comerr 
  C29F    CD BD15        C      	call	setuser		;new user number set 
  C2A2    C3 C386        C      	jmp	endcom 
                         C       
  C2A5                   C      userfunc: 
                         C      	ifndef	noserialize 
                         C      	call	serialize	;check serialization 
                         C      	endif 
                         C      	;load user function and set up for execution 
  C2A5    3A C3CB        C      	lda	comfcb+1 
  C2A8    FE 20          C      	cpi	' ' 
  C2AA    C2 C2C1        C      	jnz	user0 
                         C      	;no file name, but may be disk switch 
  C2AD    3A C3ED        C      	lda	sdisk		;no disk name if 0 
  C2B0    B7             C      	ora	a 
  C2B1    CA C386        C      	jz	endcom 
  C2B4    3D             C      	dcr	a		;set user/disk 
  C2B5    32 C3EC        C      	sta	cdisk 
  C2B8    CD BD29        C      	call	setdiska 
  C2BB    CD BCBD        C      	call	ccp_select 
  C2BE    C3 C386        C      	jmp	endcom 
  C2C1                   C      user0:	;file name is present 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-27


  C2C1    11 C3D3        C      	lxi	d,comfcb+9	;type ' ' 
  C2C4    1A             C      	ldax	d 
  C2C5    FE 20          C      	cpi	' ' 
  C2C7    C2 BE09        C      	jnz	comerr 
  C2CA    D5             C      	push	d		;.com 
  C2CB    CD C054        C      	call	setdisk 
  C2CE    D1             C      	pop	d 
  C2CF    21 C380        C      	lxi	h,comtype 
  C2D2    CD C040        C      	call	movename	;file type is set to .com 
  C2D5    CD BCD0        C      	call	openc 
  C2D8    CA C368        C      	jz	userer 
                         C      	;file opened properly, read it into memory 
  C2DB    21 0100        C      	lxi	h,tran		;transient program base 
  C2DE    E5             C      load0:	push	h		;save dma address 
  C2DF    EB             C      	xchg 
  C2E0    CD BDD8        C      	call	ccp_setdma 
  C2E3    11 C3CA        C      	lxi	d,comfcb 
  C2E6    CD BCF9        C      	call	ccp_diskread 
  C2E9    C2 C2FE        C      	jnz	load1 
                         C      	;sector loaded, set new dma address and compare 
  C2EC    E1             C      	pop	h 
  C2ED    11 0080        C      	lxi	d,128 
  C2F0    19             C      	dad	d 
  C2F1    11 BC00        C      	lxi	d,tranm		;has the load overflowed? 
  C2F4    7D             C      	mov	a,l 
  C2F5    93             C      	sub	e 
  C2F6    7C             C      	mov	a,h 
  C2F7    9A             C      	sbb	d 
  C2F8    D2 C36E        C      	jnc	loaderr 
  C2FB    C3 C2DE        C      	jmp	load0		;for another sector 
                         C       
  C2FE    E1             C      load1:	pop	h		;end file is 1 
  C2FF    3D             C      	dcr	a 
  C300    C2 C36E        C      	jnz	loaderr 
  C303    CD C066        C      	call	resetdisk	;back to original disk 
  C306    CD BE5E        C      	call	fillfcb0 
  C309    21 C3ED        C      	lxi	h,sdisk 
  C30C    E5             C      	push	h 
  C30D    7E             C      	mov	a,m		;drive number set 
  C30E    32 C3CA        C      	sta	comfcb 
  C311    3E 10          C      	mvi	a,16		;move entire fcb to memory 
  C313    CD BE60        C      	call	fillfcb 
  C316    E1             C      	pop	h 
  C317    7E             C      	mov	a,m 
  C318    32 C3DA        C      	sta	comfcb+16 
  C31B    AF             C      	xra	a		;record number set to zero 
  C31C    32 C3EA        C      	sta	comrec 
  C31F    11 005C        C      	lxi	d,fcb 
  C322    21 C3CA        C      	lxi	h,comfcb 
  C325    06 21          C      	mvi	b,33 
  C327    CD C042        C      	call	move0 
                         C      	;move command line to buff 
  C32A    21 BC08        C      	lxi	h,combuf 
  C32D    7E             C      bmove0:	mov	a,m 
  C32E    B7             C      	ora	a 
  C32F    CA C33B        C      	jz	bmove1 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-28


  C332    FE 20          C      	cpi	' ' 
  C334    CA C33B        C      	jz	bmove1 
  C337    23             C      	inx	h		;for another scan 
  C338    C3 C32D        C      	jmp	bmove0 
                         C      	;first blank position found 
  C33B    06 00          C      bmove1:	mvi	b,0		;ready for the move 
  C33D    11 0081        C      	lxi	d,buff+1 
  C340    7E             C      bmove2:	mov	a,m 
  C341    12             C      	stax	d 
  C342    B7             C      	ora	a 
  C343    CA C34C        C      	jz	bmove3 
                         C      	;more to move 
  C346    04             C      	inr	b 
  C347    23             C      	inx	h 
  C348    13             C      	inx	d 
  C349    C3 C340        C      	jmp	bmove2 
  C34C                   C      bmove3:	;b has character count 
  C34C    78             C      	mov	a,b 
  C34D    32 0080        C      	sta	buff 
  C350    CD BC98        C      	call	ccp_crlf 
                         C      	;now go to the loaded program 
  C353    CD BDD5        C      	call	setdmabuff	;default dma 
  C356    CD BD1A        C      	call	saveuser	;user code saved 
                         C      	;low memory diska contains user code 
  C359    CD 0100        C      	call	tran		;gone to the loaded program 
  C35C    31 C3A8        C      	lxi	sp,stack	;may come back here 
  C35F    CD BD29        C      	call	setdiska 
  C362    CD BCBD        C      	call	ccp_select 
  C365    C3 BF82        C      	jmp	ccp 
                         C       
  C368                   C      userer:	;arrive here on command error 
  C368    CD C066        C      	call	resetdisk 
  C36B    C3 BE09        C      	jmp	comerr 
                         C       
  C36E                   C      loaderr:;cannot load the program 
  C36E    01 C377        C      	lxi	b,loadmsg 
  C371    CD BCA7        C      	call	ccp_print 
  C374    C3 C383        C      	jmp	retcom 
  C377                   C      loadmsg: 
  C377    42 41 44 20    C      	db "BAD LOAD",0 
  C37B    4C 4F 41 44    C      
  C37F    00             C      
  C380                   C      comtype: 
  C380    43 4F 4D       C      	db "COM"		;for com files 
                         C       
                         C       
  C383                   C      retcom:	;reset disk before end of command check 
  C383    CD C066        C      	call	resetdisk 
                         C       
  C386                   C      endcom:	;end of intrinsic command 
  C386    CD BE5E        C      	call	fillfcb0	;to check for garbage at end of line 
  C389    3A C3CB        C      	lda	comfcb+1 
  C38C    D6 20          C      	sui	' ' 
  C38E    21 C3ED        C      	lxi	h,sdisk 
  C391    B6             C      	ora	m 
                         C      	;0 in accumulator if no disk selected, and blank fcb 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-29


  C392    C2 BE09        C      	jnz	comerr 
  C395    C3 BF82        C      	jmp	ccp 
                         C       
                         C       
                         C       
                         C      ;	data areas 
  C398                   C      	ds	16	;8 level stack 
  C3A8                   C      stack: 
                         C       
                         C      ;	'submit' file control block 
  C3A8    00             C      submit:	db	0	;00 if no submit file, ff if submitting 
  C3A9    00 24 24 24    C      subfcb:	db	0,"$$$     "	;file name is $$$ 
  C3AD    20 20 20 20    C      
  C3B1    20             C      
  C3B2    53 55 42 00    C      	db	"SUB",0,0	;file type is sub 
  C3B6    00             C      
  C3B7    00             C      submod:	db	0	;module number 
  C3B8                   C      subrc:	ds	1	;record count filed 
  C3B9                   C      	ds	16	;disk map 
  C3C9                   C      subcr:	ds	1	;current record to read 
                         C       
                         C      ;	command file control block 
  C3CA                   C      comfcb:	ds	32	;fields filled in later 
  C3EA                   C      comrec:	ds	1	;current record to read/write 
  C3EB                   C      ccp_dcnt:	ds	1	;disk directory count (used for error codes) 
  C3EC                   C      cdisk:	ds	1	;current disk 
  C3ED                   C      sdisk:	ds	1	;selected disk for current operation 
                         C      			;none=0, a=1, b=2 ... 
  C3EE                   C      bptr:	ds	1	;buffer pointer 
                         C      	;end	ccploc 
  07EF                   C      C_SIZE	equ	$-C_BASE 
                         C      include BDOS.ASM 
                         C      ; Reformatted and converted for cross-assembly by Macro Assembler AS 
                         C      ; Eric Smith <spacewar@gmail.com> 2018-01-24 
                         C      ; from original source os3bdos.asm from 
                         C      ;   http://www.cpm.z80.de/download/cpm2-plm.zip 
                         C      ; includes Digital Research CP/M V2.2 Patch 01 (cpm22pat.01) from 
                         C      ;   http://www.cpm.z80.de/download/cpm22pat.zip 
                         C       
                         C      ; Changes: 
                         C      ;   multiple instructions per line split to separate lines 
                         C      ;   dollar sign in labels replaced by underscore 
                         C      ;   dollar sign (as digit separator) in binary constants removed 
                         C      ;   no colons for labels for equates 
                         C      ;   single quotes around strings replaced with double quotes 
                         C      ;   true and false replaced with _true and _false 
                         C      ;   eliminated equates for 8080 registers, added comments introduced with % 
                         C      ;   replaced "not", "and" operators with "~", "&" 
                         C      ;   removed empty comments 
                         C      ;   added ifdef origin to allow origin to be specified from command line 
                         C      ;   added commments about serial number 
                         C       
                         C      	.8080;.cpu	8080 
                         C       
  0001                   C      patch1	equ	1 
                         C       
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-30


                         C       
                         C      	title	"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C      ;**                                                             ** 
                         C      ;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    ** 
                         C      ;**            I n t e r f a c e   M o d u l e                   ** 
                         C      ;**                                                             ** 
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C      ; 
                         C      ;	Copyright (c) 1978, 1979, 1980 
                         C      ;	Digital Research 
                         C      ;	Box 579, Pacific Grove 
                         C      ;	California 
                         C      ; 
                         C      ; 
                         C      ;      20 january 1980 
                         C      ; 
                         C      ; 
  FFFF                   C      on	equ	0ffffh 
  0000                   C      off	equ	00000h 
  0000                   C      test	equ	off 
                         C       
                         C      	ifdef	origin 
                         C      	org	origin 
                         C      	else 
                         C      	if	test 
                         C      	org	0dc00h 
                         C      	else 
                         C      	;org	0800h 
                         C      	endif 
                         C      	endif 
                         C      ;	bios value defined at end of module 
                         C       
  C400                   C      bdos_start	equ	($ AND 0ff00h)+100h 
  C3EF                   C      	DS	bdos_start-$ 
  C400                   C      D_BASE: 
  0018                   C      ssize	equ	24		;24 level stack 
                         C       
                         C      ;	low memory locations 
  0000                   C      reboot	equ	0000h		;reboot system 
  0003                   C      ioloc	equ	0003h		;i/o byte location 
  0006                   C      bdosa	equ	0006h		;address field of jmp BDOS 
                         C       
                         C      ;	bios access constants 
  D200                   C      bootf	set	bios+3*0	;cold boot function 
  D203                   C      wbootf	set	bios+3*1	;warm boot function 
  D206                   C      constf	set	bios+3*2	;console status function 
  D209                   C      coninf	set	bios+3*3	;console input function 
  D20C                   C      conoutf	set	bios+3*4	;console output function 
  D20F                   C      listf	set	bios+3*5	;list output function 
  D212                   C      punchf	set	bios+3*6	;punch output function 
  D215                   C      readerf	set	bios+3*7	;reader input function 
  D218                   C      homef	set	bios+3*8	;disk home function 
  D21B                   C      seldskf	set	bios+3*9	;select disk function 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-31


  D21E                   C      settrkf	set	bios+3*10	;set track function 
  D221                   C      setsecf	set	bios+3*11	;set sector function 
  D224                   C      setdmaf	set	bios+3*12	;set dma function 
  D227                   C      readf	set	bios+3*13	;read disk function 
  D22A                   C      writef	set	bios+3*14	;write disk function 
  D22D                   C      liststf	set	bios+3*15	;list status function 
  D230                   C      sectran	set	bios+3*16	;sector translate 
                         C       
                         C      ;	equates for non graphic characters 
  0003                   C      ctlc	equ	03h	;control c 
  0005                   C      ctle	equ	05h	;physical eol 
  0008                   C      ctlh	equ	08h	;backspace 
  0010                   C      ctlp	equ	10h	;prnt toggle 
  0012                   C      ctlr	equ	12h	;repeat line 
  0013                   C      ctls	equ	13h	;stop/start screen 
  0015                   C      ctlu	equ	15h	;line delete 
  0018                   C      ctlx	equ	18h	;=ctl-u 
  001A                   C      ctlz	equ	1ah	;end of file 
  007F                   C      rubout	equ	7fh	;char delete 
  0009                   C      tab	equ	09h	;tab char 
  000D                   C      cr	equ	0dh	;carriage return 
  000A                   C      lf	equ	0ah	;line feed 
  005E                   C      ctl	equ	5eh	;up arrow 
                         C       
                         C      ; serial number (not documented in original DRI source file) 
  C400    00             C      	db	0	; OEM number, low byte 
  C401    00             C      	db	0	; CP/M version, 16h = 2.2 
  C402    00             C      	db	0	; OEM number, high byte 
  C403    00 00 00       C      	db	0,0,0	; serial number, big-endian 
                         C       
                         C      ;	enter here from the user's program with function number in c, 
                         C      ;	and information address in d,e 
  C406    C3 C411        C      	jmp	bdose	;past parameter block 
                         C       
                         C      ;	************************************************ 
                         C      ;	*** relative locations 0009 - 000e           *** 
                         C      ;	************************************************ 
  C409    C499           C      pererr:	dw	persub	;permanent error subroutine 
  C40B    C4A5           C      selerr:	dw	selsub	;select error subroutine 
  C40D    C4AB           C      roderr:	dw	rodsub	;ro disk error subroutine 
  C40F    C4B1           C      roferr:	dw	rofsub	;ro file error subroutine 
                         C       
                         C       
  C411                   C      bdose:				;arrive here from user programs 
  C411    EB             C      	xchg			;info=DE, DE=info 
  C412    22 C743        C      	shld	info 
  C415    EB             C      	xchg 
  C416    7B             C      	mov	a,e		;linfo = low(info) - don't equ 
  C417    32 D1D6        C      	sta	linfo 
  C41A    21 0000        C      	lxi	h,0		;return value defaults to 0000 
  C41D    22 C745        C      	shld	aret 
                         C      	;save user's stack pointer, set to local stack 
  C420    39             C      	dad	sp		;entsp = stackptr 
  C421    22 C70F        C      	shld	entsp 
  C424    31 C741        C      	lxi	sp,lstack	;local stack setup 
  C427    AF             C      	xra	a		;fcbdsk,resel=false 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-32


  C428    32 D1E0        C      	sta	fcbdsk 
  C42B    32 D1DE        C      	sta	resel 
  C42E    21 D174        C      	lxi	h,goback	;return here after all functions 
  C431    E5             C      	push	h		;jmp goback equivalent to ret 
  C432    79             C      	mov	a,c		;skip if invalid # 
  C433    FE 29          C      	cpi	nfuncs 
  C435    D0             C      	rnc 
  C436    4B             C      	mov	c,e		;possible output character to C 
  C437    21 C447        C      	lxi	h,functab	;DE=func, HL=.ciotab 
  C43A    5F             C      	mov	e,a 
  C43B    16 00          C      	mvi	d,0 
  C43D    19             C      	dad	d		;DE=functab(func) 
  C43E    19             C      	dad	d 
  C43F    5E             C      	mov	e,m 
  C440    23             C      	inx	h 
  C441    56             C      	mov	d,m 
  C442    2A C743        C      	lhld	info		;info in DE for later xchg	 
  C445    EB             C      	xchg			;dispatched 
  C446    E9             C      	pchl 
                         C       
                         C      ;	dispatch table for functions 
  C447                   C      functab: 
  C447    D203 C6C8      C      	dw	wbootf, func1, func2, func3 
  C44B    C590 C6CE      C      
  C44F    D212 D20F      C      	dw	punchf, listf, func6, func7 
  C453    C6D4 C6ED      C      
  C457    C6F3 C6F8      C      	dw	func8, func9, func10,func11 
  C45B    C5E1 C6FE      C      
  000C                   C      diskf	equ	($-functab)/2	;disk funcs 
  C45F    D07E D083      C      	dw	func12,func13,func14,func15 
  C463    D045 D09C      C      
  C467    D0A5 D0AB      C      	dw	func16,func17,func18,func19 
  C46B    D0C8 D0D7      C      
  C46F    D0E0 D0E6      C      	dw	func20,func21,func22,func23 
  C473    D0EC D0F5      C      
  C477    D0FE D104      C      	dw	func24,func25,func26,func27 
  C47B    D10A D111      C      
  C47F    C92C D117      C      	dw	func28,func29,func30,func31 
  C483    D11D D126      C      
  C487    D12D D141      C      	dw	func32,func33,func34,func35 
  C48B    D147 D14D      C      
  C48F    D00E D153      C      	dw	func36,func37,func38,func39 
  C493    C704 C704      C      
  C497    D19B           C      	dw	func40 
  0029                   C      nfuncs	equ	($-functab)/2 
                         C       
                         C       
                         C      ;	error subroutines 
  C499                   C      persub:	;report permanent error 
  C499    21 C4CA        C      	lxi	h,permsg	;to report the error 
  C49C    CD C4E5        C      	call	errflg 
  C49F    FE 03          C      	cpi	ctlc		;reboot if response is ctlc 
  C4A1    CA 0000        C      	jz	reboot 
  C4A4    C9             C      	ret			;and ignore the error 
                         C       
  C4A5                   C      selsub:	;report select error 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-33


  C4A5    21 C4D5        C      	lxi	h,selmsg	;wait console before boot 
  C4A8    C3 C4B4        C      	jmp	wait_err 
                         C      ; 
  C4AB                   C      rodsub:	;report write to read/only disk 
  C4AB    21 C4E1        C      	lxi	h,rodmsg	;wait console 
  C4AE    C3 C4B4        C      	jmp	wait_err 
                         C      ; 
  C4B1                   C      rofsub:	;report read/only file 
  C4B1    21 C4DC        C      	lxi	h,rofmsg	;drop through to wait for console 
                         C      ; 
  C4B4                   C      wait_err: 
                         C      	;wait for response before boot 
  C4B4    CD C4E5        C      	call	errflg 
  C4B7    C3 0000        C      	jmp	reboot 
                         C       
                         C      ;	error messages 
  C4BA    42 64 6F 73    C      dskmsg:	db	"Bdos Err On " 
  C4BE    20 45 72 72    C      
  C4C2    20 4F 6E 20    C      
  C4C6    20 3A 20 24    C      dskerr:	db	" : $"	;filled in by errflg 
  C4CA    42 61 64 20    C      permsg:	db	"Bad Sector$" 
  C4CE    53 65 63 74    C      
  C4D2    6F 72 24       C      
  C4D5    53 65 6C 65    C      selmsg:	db	"Select$" 
  C4D9    63 74 24       C      
  C4DC    46 69 6C 65    C      rofmsg:	db	"File " 
  C4E0    20             C      
  C4E1    52 2F 4F 24    C      rodmsg:	db	"R/O$" 
                         C       
                         C       
  C4E5                   C      errflg: 
                         C      	;report error to console, message address in HL 
  C4E5    E5             C      	push	h		;stack mssg address, new line 
  C4E6    CD C5C9        C      	call	crlf 
  C4E9    3A C742        C      	lda	curdsk		;current disk name 
  C4EC    C6 41          C      	adi	'A' 
  C4EE    32 C4C6        C      	sta	dskerr 
  C4F1    01 C4BA        C      	lxi	b,dskmsg	;the error message 
  C4F4    CD C5D3        C      	call	print 
  C4F7    C1             C      	pop	b		;error mssage tail 
  C4F8    CD C5D3        C      	call	print 
                         C      	;jmp	_conin		;to get the input character			 
                         C      	;(drop through to _conin) 
                         C      	;ret 
                         C       
                         C       
                         C      ;	console handlers 
  C4FB                   C      _conin: 
                         C      	;read console character to A 
  C4FB    21 C70E        C      	lxi	h,kbchar 
  C4FE    7E             C      	mov	a,m 
  C4FF    36 00          C      	mvi	m,0 
  C501    B7             C      	ora	a 
  C502    C0             C      	rnz 
                         C      	;no previous keyboard character ready 
  C503    C3 D209        C      	jmp	coninf		;get character externally 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-34


                         C      	;ret 
                         C       
  C506                   C      conech: 
                         C      	;read character with echo 
  C506    CD C4FB        C      	call	_conin		;echo character? 
  C509    CD C514        C      	call	echoc 
  C50C    D8             C      	rc  
                         C              ;character must be echoed before return 
  C50D    F5             C      	push	psw 
  C50E    4F             C      	mov	c,a 
  C50F    CD C590        C      	call	tabout 
  C512    F1             C      	pop	psw 
  C513    C9             C      	ret			;with character in A 
                         C       
  C514                   C      echoc: 
                         C      	;echo character if graphic 
                         C      	;cr, lf, tab, or backspace 
  C514    FE 0D          C      	cpi	cr		;carriage return? 
  C516    C8             C      	rz 
  C517    FE 0A          C      	cpi	lf		;line feed? 
  C519    C8             C      	rz 
  C51A    FE 09          C      	cpi	tab		;tab? 
  C51C    C8             C      	rz 
  C51D    FE 08          C      	cpi	ctlh		;backspace? 
  C51F    C8             C      	rz 
  C520    FE 20          C      	cpi	' '		;carry set if not graphic 
  C522    C9             C      	ret  
                         C       
  C523                   C      conbrk:	;check for character ready 
  C523    3A C70E        C      	lda	kbchar		;skip if active kbchar 
  C526    B7             C      	ora	a 
  C527    C2 C545        C      	jnz	conb1 
                         C      	;no active kbchar, check external break 
  C52A    CD D206        C      	call	constf		;return if no char ready 
  C52D    E6 01          C      	ani	1 
  C52F    C8             C      	rz 
                         C      	;character ready, read it 
  C530    CD D209        C      	call	coninf		;to A 
  C533    FE 13          C      	cpi	ctls		;check stop screen function 
  C535    C2 C542        C      	jnz	conb0 
                         C      	;found ctls, read next character 
  C538    CD D209        C      	call	coninf		;to A 
  C53B    FE 03          C      	cpi	ctlc		;ctlc implies re-boot 
  C53D    CA 0000        C      	jz	reboot 
                         C      	;not a reboot, act as if nothing has happened 
  C540    AF             C      	xra a			;with zero in accumulator 
  C541    C9             C      	ret 
  C542                   C      conb0:	;character in accum, save it 
  C542    32 C70E        C      	sta	kbchar 
  C545                   C      conb1:	;return with true set in accumulator 
  C545    3E 01          C      	mvi	a,1 
  C547    C9             C      	ret 
                         C       
  C548                   C      _conout: 
                         C      	;compute character position/write console char from C 
                         C      	;compcol = true if computing column position 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-35


  C548    3A C70A        C      	lda	compcol 
  C54B    B7             C      	ora	a 
  C54C    C2 C562        C      	jnz	compout 
                         C      	;write the character, then compute the column 
                         C      	;write console character from C 
  C54F    C5             C      	push	b		;check for screen stop function 
  C550    CD C523        C      	call	conbrk 
  C553    C1             C      	pop	b		;recall/save character 
  C554    C5             C      	push	b 
  C555    CD D20C        C      	call	conoutf		;externally, to console 
  C558    C1             C      	pop	b		;recall/save character 
  C559    C5             C      	push	b 
                         C      	;may be copying to the list device 
  C55A    3A C70D        C      	lda	listcp		;to printer, if so 
  C55D    B7             C      	ora	a 
  C55E    C4 D20F        C      	cnz	listf 
  C561    C1             C      	pop	b		;recall the character 
  C562                   C      compout: 
  C562    79             C      	mov	a,c		;recall the character 
                         C      	;and compute column position 
  C563    21 C70C        C      	lxi	h,column	;A = char, HL = .column 
  C566    FE 7F          C      	cpi	rubout		;no column change if nulls 
  C568    C8             C      	rz 
  C569    34             C      	inr	m		;column = column + 1 
  C56A    FE 20          C      	cpi	' '		;return if graphic 
  C56C    D0             C      	rnc 
                         C      	;not graphic, reset column position 
  C56D    35             C      	dcr	m		;column = column - 1 
  C56E    7E             C      	mov	a,m		;return if at zero 
  C56F    B7             C      	ora	a 
  C570    C8             C      	rz 
                         C      	;not at zero, may be backspace or end line 
  C571    79             C      	mov	a,c		;character back to A 
  C572    FE 08          C      	cpi	ctlh 
  C574    C2 C579        C      	jnz	notbacksp 
                         C      	;backspace character 
  C577    35             C      	dcr	m		;column = column - 1 
  C578    C9             C      	ret 
  C579                   C      notbacksp: 
                         C      	;not a backspace character, eol? 
  C579    FE 0A          C      	cpi	lf		;return if not 
  C57B    C0             C      	rnz 
                         C      	;end of line, column = 0 
  C57C    36 00          C      	mvi	m,0		;column = 0 
  C57E    C9             C      	ret 
                         C       
  C57F                   C      ctlout: 
                         C      	;send C character with possible preceding up-arrow 
  C57F    79             C      	mov	a,c		;cy if not graphic (or special case) 
  C580    CD C514        C      	call	echoc 
  C583    D2 C590        C      	jnc	tabout		;skip if graphic, tab, cr, lf, or ctlh 
                         C      	;send preceding up arrow 
  C586    F5             C      	push	psw		;up arrow 
  C587    0E 5E          C      	mvi	c,ctl 
  C589    CD C548        C      	call	_conout 
  C58C    F1             C      	pop	psw		;becomes graphic letter 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-36


  C58D    F6 40          C      	ori	40h 
  C58F    4F             C      	mov	c,a		;ready to print 
                         C      	;(drop through to tabout) 
                         C       
  C590                   C      tabout: 
                         C      	;expand tabs to console 
  C590    79             C      	mov	a,c		;direct to _conout if not 
  C591    FE 09          C      	cpi	tab 
  C593    C2 C548        C      	jnz	_conout 
                         C      	;tab encountered, move to next tab position 
  C596                   C      tab0: 
  C596    0E 20          C      	mvi	c,' '		;another blank 
  C598    CD C548        C      	call	_conout 
  C59B    3A C70C        C      	lda	column		;column mod 8 = 0 ? 
  C59E    E6 07          C      	ani	111b 
  C5A0    C2 C596        C      	jnz	tab0		;back for another if not 
  C5A3    C9             C      	ret 
                         C       
                         C       
  C5A4                   C      backup: 
                         C      	;back-up one screen position 
  C5A4    CD C5AC        C      	call	pctlh 
  C5A7    0E 20          C      	mvi	c,' ' 
  C5A9    CD D20C        C      	call	conoutf 
                         C      ;	(drop through to pctlh) 
  C5AC                   C      pctlh: 
                         C      	;send ctlh to console without affecting column count 
  C5AC    0E 08          C      	mvi	c,ctlh 
  C5AE    C3 D20C        C      	jmp	conoutf 
                         C      	;ret 
                         C       
  C5B1                   C      crlfp: 
                         C      	;print #, cr, lf for ctlx, ctlu, ctlr functions 
                         C      	;then move to strtcol (starting column) 
  C5B1    0E 23          C      	mvi	c,'#' 
  C5B3    CD C548        C      	call	_conout 
  C5B6    CD C5C9        C      	call	crlf 
                         C      	;column = 0, move to position strtcol 
  C5B9                   C      crlfp0: 
  C5B9    3A C70C        C      	lda	column 
  C5BC    21 C70B        C      	lxi	h,strtcol 
  C5BF    BE             C      	cmp	m		;stop when column reaches strtcol 
  C5C0    D0             C      	rnc 
  C5C1    0E 20          C      	mvi	c,' '		;print blank 
  C5C3    CD C548        C      	call	_conout  
  C5C6    C3 C5B9        C      	jmp	crlfp0 
                         C       
                         C       
  C5C9                   C      crlf: 
                         C      	;carriage return line feed sequence 
  C5C9    0E 0D          C      	mvi	c,cr 
  C5CB    CD C548        C      	call	_conout 
  C5CE    0E 0A          C      	mvi	c,lf 
  C5D0    C3 C548        C      	jmp	_conout 
                         C      	;ret 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-37


  C5D3                   C      print: 
                         C      	;print message until M(BC) = '$' 
  C5D3    0A             C      	ldax	b		;stop on $ 
  C5D4    FE 24          C      	cpi	'$' 
  C5D6    C8             C      	rz 
                         C      	;more to print 
  C5D7    03             C      	inx	b		;char to C 
  C5D8    C5             C      	push	b 
  C5D9    4F             C      	mov	c,a 
  C5DA    CD C590        C      	call	tabout		;another character printed 
  C5DD    C1             C      	pop	b 
  C5DE    C3 C5D3        C      	jmp	print 
                         C       
  C5E1                   C      read:	;read to info address (max length, current length, buffer) 
  C5E1    3A C70C        C      	lda	column		;save start for ctl-x, ctl-h 
  C5E4    32 C70B        C      	sta	strtcol  
  C5E7    2A C743        C      	lhld	info 
  C5EA    4E             C      	mov	c,m 
  C5EB    23             C      	inx	h 
  C5EC    E5             C      	push	h 
  C5ED    06 00          C      	mvi	b,0 
                         C      	;B = current buffer length, 
                         C      	;C = maximum buffer length, 
                         C      	;HL= next to fill - 1 
  C5EF                   C      readnx: 
                         C      	;read next character, BC, HL active 
  C5EF    C5             C      	push	b		;blen, cmax, HL saved 
  C5F0    E5             C      	push	h 
  C5F1                   C      readn0: 
  C5F1    CD C4FB        C      	call	_conin		;next char in A 
  C5F4    E6 7F          C      	ani	7fh		;mask parity bit 
  C5F6    E1             C      	pop	h		;reactivate counters 
  C5F7    C1             C      	pop	b 
  C5F8    FE 0D          C      	cpi	cr		;end of line? 
  C5FA    CA C6C1        C      	jz	readen 
  C5FD    FE 0A          C      	cpi	lf		;also end of line 
  C5FF    CA C6C1        C      	jz	readen 
  C602    FE 08          C      	cpi	ctlh		;backspace? 
  C604    C2 C616        C      	jnz	noth 
                         C      	;do we have any characters to back over? 
  C607    78             C      	mov	a,b 
  C608    B7             C      	ora	a 
  C609    CA C5EF        C      	jz	readnx 
                         C      	;characters remain in buffer, backup one 
  C60C    05             C      	dcr	b		;remove one character 
  C60D    3A C70C        C      	lda	column		;col > 0 
  C610    32 C70A        C      	sta	compcol 
                         C      	;compcol > 0 marks repeat as length compute 
  C613    C3 C670        C      	jmp	linelen		;uses same code as repeat 
  C616                   C      noth: 
                         C      	;not a backspace 
  C616    FE 7F          C      	cpi	rubout		;rubout char? 
  C618    C2 C626        C      	jnz	notrub 
                         C      	;rubout encountered, rubout if possible 
  C61B    78             C      	mov	a,b		;skip if len=0 
  C61C    B7             C      	ora	a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-38


  C61D    CA C5EF        C      	jz	readnx  
                         C      	;buffer has characters, resend last char 
  C620    7E             C      	mov	a,m		;A = last char 
  C621    05             C      	dcr	b 
  C622    2B             C      	dcx	h 
                         C      	;blen=blen-1, next to fill - 1 decremented 
  C623    C3 C6A9        C      	jmp	rdech1		;act like this is an echo 
                         C       
  C626                   C      notrub: 
                         C      	;not a rubout character, check end line 
  C626    FE 05          C      	cpi	ctle		;physical end line? 
  C628    C2 C637        C      	jnz	note 
                         C      	;yes, save active counters and force eol 
  C62B    C5             C      	push	b 
  C62C    E5             C      	push	h 
  C62D    CD C5C9        C      	call	crlf 
  C630    AF             C      	xra	a		;start position = 00 
  C631    32 C70B        C      	sta	strtcol 
  C634    C3 C5F1        C      	jmp	readn0		;for another character 
  C637                   C      note: 
                         C      	;not end of line, list toggle? 
  C637    FE 10          C      	cpi	ctlp		;skip if not ctlp 
  C639    C2 C648        C      	jnz	notp 
                         C      	;list toggle - change parity 
  C63C    E5             C      	push	h		;save next to fill - 1 
  C63D    21 C70D        C      	lxi	h,listcp	;HL=.listcp flag 
  C640    3E 01          C      	mvi	a,1		;True-listcp 
  C642    96             C      	sub	m 
  C643    77             C      	mov	m,a		;listcp = not listcp 
  C644    E1             C      	pop	h		;for another char 
  C645    C3 C5EF        C      	jmp	readnx 
  C648                   C      notp: 
                         C      	;not a ctlp, line delete? 
  C648    FE 18          C      	cpi	ctlx 
  C64A    C2 C65F        C      	jnz	notx 
  C64D    E1             C      	pop	h		;discard start position 
                         C      	;loop while column > strtcol 
  C64E                   C      backx: 
  C64E    3A C70B        C      	lda	strtcol 
  C651    21 C70C        C      	lxi	h,column 
  C654    BE             C      	cmp	m		;start again 
  C655    D2 C5E1        C      	jnc	read 
  C658    35             C      	dcr	m		;column = column - 1 
  C659    CD C5A4        C      	call	backup		;one position 
  C65C    C3 C64E        C      	jmp	backx 
  C65F                   C      notx: 
                         C      	;not a control x, control u? 
                         C      	;not control-X, control-U? 
  C65F    FE 15          C      	cpi	ctlu		;skip if not 
  C661    C2 C66B        C      	jnz	notu 
                         C      	;delete line (ctlu) 
  C664    CD C5B1        C      	call	crlfp		;physical eol 
  C667    E1             C      	pop	h		;discard starting position 
  C668    C3 C5E1        C      	jmp	read		;to start all over 
  C66B                   C      notu: 
                         C      	;not line delete, repeat line? 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-39


  C66B    FE 12          C      	cpi	ctlr 
  C66D    C2 C6A6        C      	jnz	notr 
  C670                   C      linelen: 
                         C      	;repeat line, or compute line len (ctlh) 
                         C      	;if compcol > 0 
  C670    C5             C      	push	b		;save line length 
  C671    CD C5B1        C      	call	crlfp  
  C674    C1             C      	pop	b 
  C675    E1             C      	pop	h 
  C676    E5             C      	push	h 
  C677    C5             C      	push	b 
                         C      	;bcur, cmax active, beginning buff at HL 
  C678                   C      rep0: 
  C678    78             C      	mov	a,b		;count len to 00 
  C679    B7             C      	ora	a 
  C67A    CA C68A        C      	jz	rep1  
  C67D    23             C      	inx	h		;next to print 
  C67E    4E             C      	mov	c,m 
  C67F    05             C      	dcr	b		;count length down 
  C680    C5             C      	push	b 
  C681    E5             C      	push	h 
  C682    CD C57F        C      	call	ctlout		;character echoed 
  C685    E1             C      	pop	h		;recall remaining count 
  C686    C1             C      	pop	b 
  C687    C3 C678        C      	jmp	rep0		;for the next character 
  C68A                   C      rep1: 
                         C      	;end of repeat, recall lengths 
                         C      	;original BC still remains pushed 
  C68A    E5             C      	push	h		;save next to fill 
  C68B    3A C70A        C      	lda	compcol		;>0 if computing length 
  C68E    B7             C      	ora	a 
  C68F    CA C5F1        C      	jz	readn0		;for another char if so 
                         C      	;column position computed for ctlh 
  C692    21 C70C        C      	lxi	h,column	;diff > 0 
  C695    96             C      	sub	m 
  C696    32 C70A        C      	sta	compcol		;count down below 
                         C      	;move back compcol-column spaces 
  C699                   C      backsp: 
                         C      	;move back one more space 
  C699    CD C5A4        C      	call	backup		;one space 
  C69C    21 C70A        C      	lxi	h,compcol 
  C69F    35             C      	dcr	m 
  C6A0    C2 C699        C      	jnz	backsp 
  C6A3    C3 C5F1        C      	jmp	readn0		;for next character 
  C6A6                   C      notr: 
                         C      	;not a ctlr, place into buffer 
  C6A6                   C      rdecho: 
  C6A6    23             C      	inx	h		;character filled to mem 
  C6A7    77             C      	mov	m,a 
  C6A8    04             C      	inr	b		;blen = blen + 1 
  C6A9                   C      rdech1: 
                         C      	;look for a random control character 
  C6A9    C5             C      	push	b		;active values saved 
  C6AA    E5             C      	push	h  
  C6AB    4F             C      	mov	c,a		;ready to print 
  C6AC    CD C57F        C      	call	ctlout		;may be up-arrow C 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-40


  C6AF    E1             C      	pop	h		;recall char 
  C6B0    C1             C      	pop	b 
  C6B1    7E             C      	mov	a,m 
  C6B2    FE 03          C      	cpi	ctlc		;set flags for reboot test 
  C6B4    78             C      	mov	a,b		;move length to A 
  C6B5    C2 C6BD        C      	jnz	notc		;skip if not a control c 
  C6B8    FE 01          C      	cpi	1		;control C, must be length 1 
  C6BA    CA 0000        C      	jz	reboot		;reboot if blen = 1 
                         C      	;length not one, so skip reboot 
  C6BD                   C      notc: 
                         C      	;not reboot, are we at end of buffer? 
  C6BD    B9             C      	cmp	c		;go for another if not 
  C6BE    DA C5EF        C      	jc	readnx 
  C6C1                   C      readen: 
                         C      	;end of read operation, store blen 
  C6C1    E1             C      	pop	h		;M(current len) = B 
  C6C2    70             C      	mov	m,b 
  C6C3    0E 0D          C      	mvi	c,cr		;return carriage 
  C6C5    C3 C548        C      	jmp	_conout 
                         C      	;ret 
  C6C8                   C      func1: 
                         C      	;return console character with echo 
  C6C8    CD C506        C      	call	conech 
  C6CB    C3 C701        C      	jmp	sta_ret 
                         C      ; 
  C590                   C      func2	equ	tabout 
                         C      	;write console character with tab expansion 
                         C      ; 
  C6CE                   C      func3: 
                         C      	;return reader character 
  C6CE    CD D215        C      	call	readerf 
  C6D1    C3 C701        C      	jmp	sta_ret 
                         C       
                         C      ;func4:	equated to punchf 
                         C      	;write punch character 
                         C       
                         C      ;func5:	equated to listf 
                         C      	;write list character 
                         C      	;write to list device 
                         C       
  C6D4                   C      func6: 
                         C      	;direct console i/o - read if 0ffh 
  C6D4    79             C      	mov	a,c		;0ffh => 00h, means input mode 
  C6D5    3C             C      	inr	a 
  C6D6    CA C6E0        C      	jz	dirinp 
  C6D9    3C             C      	inr	a		;0feH in C for status 
  C6DA    CA D206        C      	jz	constf 
                         C      	;direct output function 
  C6DD    C3 D20C        C      	jmp	conoutf 
  C6E0                   C      dirinp: 
  C6E0    CD D206        C      	call	constf		;status check 
  C6E3    B7             C      	ora	a		;skip, return 00 if not ready 
  C6E4    CA D191        C      	jz	retmon 
                         C      	;character is ready, get it 
  C6E7    CD D209        C      	call	coninf		;to A 
  C6EA    C3 C701        C      	jmp	sta_ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-41


                         C       
  C6ED                   C      func7: 
                         C      	;return io byte 
  C6ED    3A 0003        C      	lda	ioloc 
  C6F0    C3 C701        C      	jmp	sta_ret 
                         C       
  C6F3                   C      func8: 
                         C      	;set i/o byte 
  C6F3    21 0003        C      	lxi	h,ioloc 
  C6F6    71             C      	mov	m,c 
  C6F7    C9             C      	ret			;jmp goback 
                         C       
  C6F8                   C      func9: 
                         C      	;write line until $ encountered 
  C6F8    EB             C      	xchg			;was lhld info	 
  C6F9    4D             C      	mov	c,l		;BC=string address 
  C6FA    44             C      	mov	b,h 
  C6FB    C3 C5D3        C      	jmp	print		;out to console	 
                         C       
  C5E1                   C      func10	equ	read 
                         C      	;read a buffered console line 
                         C       
  C6FE                   C      func11: 
                         C      	;check console status 
  C6FE    CD C523        C      	call	conbrk 
                         C      	;(drop through to sta_ret) 
  C701                   C      sta_ret: 
                         C      	;store the A register to aret 
  C701    32 C745        C      	sta	aret 
  C704                   C      func_ret:						; 
  C704    C9             C      	ret			;jmp goback (pop stack for non cp/m functions) 
                         C       
  C705                   C      setlret1: 
                         C      	;set lret = 1 
  C705    3E 01          C      	mvi	a,1 
  C707    C3 C701        C      	jmp	sta_ret 
                         C       
                         C       
                         C       
                         C      ;	data areas 
                         C       
  C70A    00             C      compcol:db	0	;true if computing column position 
  C70B    00             C      strtcol:db	0	;starting column position after read 
  C70C    00             C      column:	db	0	;column position 
  C70D    00             C      listcp:	db	0	;listing toggle 
  C70E    00             C      kbchar:	db	0	;initial key char = 00 
  C70F                   C      entsp:	ds	2	;entry stack pointer 
  C711                   C      	ds	ssize*2	;stack size 
  C741                   C      lstack: 
                         C      ;	end of Basic I/O System 
                         C       
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C       
                         C      ;	common values shared between bdosi and bdos 
  C741    00             C      usrcode:db	0	;current user number 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-42


  C742    00             C      curdsk:	db	0	;current disk number 
  C743                   C      info:	ds	2	;information address 
  C745                   C      aret:	ds	2	;address value to return 
  C745                   C      lret	equ	aret	;low(aret) 
                         C       
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C      ;**                                                             ** 
                         C      ;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    ** 
                         C      ;**                                                             ** 
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C       
  0022                   C      dvers	equ	22h	;version 2.2 
                         C      ;	module addresses 
                         C       
                         C      ;	literal constants 
  00FF                   C      _true	equ	0ffh	;constant true 
  0000                   C      _false	equ	000h	;constant false 
  FFFF                   C      enddir	equ	0ffffh	;end of directory 
  0001                   C      byte	equ	1	;number of bytes for "byte" type 
  0002                   C      word	equ	2	;number of bytes for "word" type 
                         C       
                         C      ;	fixed addresses in low memory 
  005C                   C      tfcb	equ	005ch	;default fcb location 
  0080                   C      tbuff	equ	0080h	;default buffer location 
                         C       
                         C      ;	fixed addresses referenced in bios module are 
                         C      ;	pererr (0009), selerr (000c), roderr (000f) 
                         C       
                         C      ;	error message handlers 
                         C       
                         C      ;per_error:	  
                         C      	;report permanent error to user	 
                         C      ;	lxi h,pererr  jmp goerr		 
                         C       
                         C      ;rod_error: 
                         C      	;report read/only disk error 
                         C      ;	lxi h,roderr  jmp goerr 
                         C       
                         C      ;rof_error: 
                         C      	;report read/only file error 
                         C      ;	lxi h,roferr	;jmp goerr	 
                         C       
  C747                   C      sel_error: 
                         C      	;report select error 
  C747    21 C40B        C      	lxi	h,selerr 
                         C       
                         C       
  C74A                   C      goerr: 
                         C      	;HL = .errorhandler, call subroutine 
  C74A    5E             C      	mov	e,m		;address of routine in DE 
  C74B    23             C      	inx	h 
  C74C    56             C      	mov	d,m 
  C74D    EB             C      	xchg			;to subroutine 
  C74E    E9             C      	pchl 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-43


                         C       
                         C       
                         C       
                         C      ;	local subroutines for bios interface 
                         C       
  C74F                   C      move: 
                         C      	;move data length of length C from source DE to 
                         C      	;destination given by HL 
  C74F    0C             C      	inr	c		;in case it is zero 
  C750                   C      @move0: 
  C750    0D             C      	dcr	c		;more to move 
  C751    C8             C      	rz 
  C752    1A             C      	ldax	d		;one byte moved 
  C753    77             C      	mov	m,a 
  C754    13             C      	inx	d		;to next byte 
  C755    23             C      	inx	h 
  C756    C3 C750        C      	jmp	@move0 
                         C       
  C759                   C      selectdisk: 
                         C      	;select the disk drive given by curdsk, and fill 
                         C      	;the base addresses curtrka - alloca, then fill 
                         C      	;the values of the disk parameter block 
  C759    3A C742        C      	lda	curdsk		;current disk# to c 
  C75C    4F             C      	mov	c,a 
                         C      	;lsb of e = 0 if not yet logged - in 
  C75D    CD D21B        C      	call	seldskf		;HL filled by call 
                         C      	;HL = 0000 if error, otherwise disk headers 
  C760    7C             C      	mov	a,h		;return with 0000 in HL and z flag 
  C761    B5             C      	ora	l 
  C762    C8             C      	rz 
                         C      	;disk header block address in hl 
  C763    5E             C      	mov	e,m		;DE=.tran 
  C764    23             C      	inx	h 
  C765    56             C      	mov	d,m 
  C766    23             C      	inx	h 
  C767    22 D1B3        C      	shld	cdrmaxa		;.cdrmax 
  C76A    23             C      	inx	h 
  C76B    23             C      	inx	h 
  C76C    22 D1B5        C      	shld	curtrka		;HL=.currec 
  C76F    23             C      	inx	h 
  C770    23             C      	inx	h 
  C771    22 D1B7        C      	shld	curreca		;HL=.buffa 
  C774    23             C      	inx	h 
  C775    23             C      	inx	h 
                         C      	;DE still contains .tran 
  C776    EB             C      	xchg			;.tran vector 
  C777    22 D1D0        C      	shld	tranv 
  C77A    21 D1B9        C      	lxi	h,buffa		;DE= source for move, HL=dest 
  C77D    0E 08          C      	mvi	c,addlist	;addlist filled 
  C77F    CD C74F        C      	call	move 
                         C      	;now fill the disk parameter block 
  C782    2A D1BB        C      	lhld	dpbaddr		;DE is source 
  C785    EB             C      	xchg 
  C786    21 D1C1        C      	lxi	h,sectpt	;HL is destination 
  C789    0E 0F          C      	mvi	c,dpblist	;data filled 
  C78B    CD C74F        C      	call	move 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-44


                         C      	;now set single/double map mode 
  C78E    2A D1C6        C      	lhld	maxall		;largest allocation number 
  C791    7C             C      	mov	a,h		;00 indicates < 255 
  C792    21 D1DD        C      	lxi	h,single	;assume a=00 
  C795    36 FF          C      	mvi	m,_true 
  C797    B7             C      	ora	a 
  C798    CA C79D        C      	jz	retselect 
                         C      	;high order of maxall not zero, use double dm 
  C79B    36 00          C      	mvi	m,_false 
  C79D                   C      retselect: 
  C79D    3E FF          C      	mvi	a,_true		;select disk function ok 
  C79F    B7             C      	ora	a 
  C7A0    C9             C      	ret 
                         C       
  C7A1                   C      home: 
                         C      	;move to home position, then offset to start of dir 
  C7A1    CD D218        C      	call	homef		;move to track 00, sector 00 reference 
                         C      	;lxi h,offset ;mov c,m ;inx h ;mov b,m ;call settrkf 
                         C      	;first directory position selected 
  C7A4    AF             C      	xra	a		;constant zero to accumulator 
  C7A5    2A D1B5        C      	lhld	curtrka		;curtrk=0000 
  C7A8    77             C      	mov	m,a 
  C7A9    23             C      	inx	h 
  C7AA    77             C      	mov	m,a 
  C7AB    2A D1B7        C      	lhld	curreca		;currec=0000 
  C7AE    77             C      	mov	m,a 
  C7AF    23             C      	inx	h 
  C7B0    77             C      	mov	m,a 
                         C      	;curtrk, currec both set to 0000 
  C7B1    C9             C      	ret 
                         C       
  C7B2                   C      rdbuff: 
                         C      	;read buffer and check condition 
  C7B2    CD D227        C      	call	readf		;current drive, track, sector, dma 
  C7B5    C3 C7BB        C      	jmp	diocomp		;check for i/o errors 
                         C       
  C7B8                   C      wrbuff: 
                         C      	;write buffer and check condition 
                         C      	;write type (wrtype) is in register C 
                         C      	;wrtype = 0 => normal write operation 
                         C      	;wrtype = 1 => directory write operation 
                         C      	;wrtype = 2 => start of new block 
  C7B8    CD D22A        C      	call	writef		;current drive, track, sector, dma 
  C7BB                   C      diocomp:	;check for disk errors 
  C7BB    B7             C      	ora	a 
  C7BC    C8             C      	rz 
  C7BD    21 C409        C      	lxi	h,pererr 
  C7C0    C3 C74A        C      	jmp	goerr 
                         C       
  C7C3                   C      seek_dir: 
                         C      	;seek the record containing the current dir entry 
  C7C3    2A D1EA        C      	lhld	dcnt		;directory counter to HL 
  C7C6    0E 02          C      	mvi	c,dskshf	;value to HL 
  C7C8    CD C8EA        C      	call	hlrotr 
  C7CB    22 D1E5        C      	shld	arecord		;ready for seek 
  C7CE    22 D1EC        C      	shld	drec 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-45


                         C      	;  jmp seek 
                         C      	;ret 
                         C       
                         C       
  C7D1                   C      seek: 
                         C      	;seek the track given by arecord (actual record) 
                         C      	;local equates for registers 
                         C      ;arech	equ	b		;arecord = BC 
                         C      ;arecl	equ	c 
                         C      ;crech	equ	d		;currec  = DE 
                         C      ;crecl	equ	e 
                         C      ;ctrkh	equ	h		;curtrk  = HL 
                         C      ;ctrkl	equ	l 
                         C      ;tcrech	equ	h		;tcurrec = HL 
                         C      ;tcrecl	equ	l 
                         C      	;load the registers from memory 
  C7D1    21 D1E5        C      	lxi	h,arecord 
  C7D4    4E             C      	mov	c,m		; % c = arecl 
  C7D5    23             C      	inx	h 
  C7D6    46             C      	mov	b,m		; % b = arech 
  C7D7    2A D1B7        C      	lhld	curreca 
  C7DA    5E             C      	mov	e,m		; % e = crecl 
  C7DB    23             C      	inx	h 
  C7DC    56             C      	mov	d,m		; % d = crech 
  C7DD    2A D1B5        C      	lhld	curtrka 
  C7E0    7E             C      	mov	a,m 
  C7E1    23             C      	inx	h 
  C7E2    66             C      	mov	h,m		; % h = ctrkh 
  C7E3    6F             C      	mov	l,a		; % l = ctrkl 
                         C      	;loop while arecord < currec 
  C7E4                   C      seek0: 
  C7E4    79             C      	mov	a,c		; % c = arecl 
  C7E5    93             C      	sub	e		; % e = crecl 
  C7E6    78             C      	mov	a,b		; % b = arech 
  C7E7    9A             C      	sbb	d		; % d = crech 
  C7E8    D2 C7FA        C      	jnc	seek1		;skip if arecord >= currec 
                         C      	;currec = currec - sectpt 
  C7EB    E5             C      	push	h		; % h = ctrkh 
  C7EC    2A D1C1        C      	lhld	sectpt 
  C7EF    7B             C      	mov	a,e		; % e = crecl 
  C7F0    95             C      	sub	l 
  C7F1    5F             C      	mov	e,a		; % e = crecl 
  C7F2    7A             C      	mov	a,d		; % d = crech 
  C7F3    9C             C      	sbb	h 
  C7F4    57             C      	mov	d,a		; % d = crech 
  C7F5    E1             C      	pop	h		; % h = ctrkh 
                         C      	;curtrk = curtrk - 1 
  C7F6    2B             C      	dcx	h		; % h = ctrkh 
  C7F7    C3 C7E4        C      	jmp	seek0 ;for another try 
  C7FA                   C      seek1: 
                         C      	;look while arecord >= (t:=currec + sectpt) 
  C7FA    E5             C      	push	h		; % h = ctrkh 
  C7FB    2A D1C1        C      	lhld	sectpt		;HL = currec+sectpt 
  C7FE    19             C      	dad	d		; % d = crech 
  C7FF    DA C80F        C      	jc	seek2		;can be > FFFFH	 
  C802    79             C      	mov	a,c		; % c = arecl 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-46


  C803    95             C      	sub	l		; % l = tcrecl 
  C804    78             C      	mov	a,b		; % b = arech 
  C805    9C             C      	sbb	h		; % h = tcrech 
  C806    DA C80F        C      	jc	seek2		;skip if t > arecord 
                         C      	;currec = t 
  C809    EB             C      	xchg 
                         C      	;curtrk = curtrk + 1 
  C80A    E1             C      	pop	h		; % h = ctrkh 
  C80B    23             C      	inx	h		; % h = ctrkh 
  C80C    C3 C7FA        C      	jmp	seek1		;for another try 
  C80F    E1             C      seek2:	pop	h		; % h = ctrkh 
                         C      	;arrive here with updated values in each register 
  C810    C5             C      	push	b		;to stack for later ; % b = arech 
  C811    D5             C      	push	d		; % d = crech 
  C812    E5             C      	push	h		; % h = ctrkh 
                         C      	;stack contains (lowest) BC=arecord, DE=currec, HL=curtrk 
  C813    EB             C      	xchg			;HL = curtrk+offset 
  C814    2A D1CE        C      	lhld	offset 
  C817    19             C      	dad	d 
  C818    44             C      	mov	b,h		;track set up 
  C819    4D             C      	mov	c,l 
  C81A    CD D21E        C      	call	settrkf 
                         C      	;note that BC - curtrk is difference to move in bios 
  C81D    D1             C      	pop	d		;recall curtrk 
  C81E    2A D1B5        C      	lhld	curtrka		;curtrk updated 
  C821    73             C      	mov	m,e 
  C822    23             C      	inx	h 
  C823    72             C      	mov	m,d 
                         C      	;now compute sector as arecord-currec 
  C824    D1             C      	pop	d		;recall currec ; % d = crech 
  C825    2A D1B7        C      	lhld	curreca 
  C828    73             C      	mov	m,e		; % e = crecl 
  C829    23             C      	inx	h 
  C82A    72             C      	mov	m,d		; % d = crech 
  C82B    C1             C      	pop	b		;BC=arecord, DE=currec ; % b = arech 
  C82C    79             C      	mov	a,c		; % c = arecl 
  C82D    93             C      	sub	e		; % e = crecl 
  C82E    4F             C      	mov	c,a		; % c = arecl 
  C82F    78             C      	mov	a,b		; % b = arech 
  C830    9A             C      	sbb	d		; % d = crech 
  C831    47             C      	mov	b,a		; % b = arech 
  C832    2A D1D0        C      	lhld	tranv		;BC=sector#, DE=.tran 
  C835    EB             C      	xchg 
  C836    CD D230        C      	call	sectran		;HL = tran(sector) 
  C839    4D             C      	mov	c,l		;BC = tran(sector) 
  C83A    44             C      	mov	b,h 
  C83B    C3 D221        C      	jmp	setsecf		;sector selected 
                         C      	;ret 
                         C       
                         C      ;	file control block (fcb) constants 
  00E5                   C      empty	equ	0e5h	;empty directory entry 
  007F                   C      lstrec	equ	127	;last record# in extent 
  0080                   C      recsiz	equ	128	;record size 
  0020                   C      fcblen	equ	32	;file control block size 
  0004                   C      dirrec	equ	recsiz/fcblen	;directory elts / record 
  0002                   C      dskshf	equ	2	;log2(dirrec) 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-47


  0003                   C      dskmsk	equ	dirrec-1 
  0005                   C      fcbshf	equ	5	;log2(fcblen) 
                         C       
  000C                   C      extnum	equ	12	;extent number field 
  001F                   C      maxext	equ	31	;largest extent number 
  000D                   C      ubytes	equ	13	;unfilled bytes field 
  000E                   C      modnum	equ	14	;data module number 
  000F                   C      maxmod	equ	15	;largest module number 
  0080                   C      fwfmsk	equ	80h	;file write flag is high order modnum 
  000F                   C      namlen	equ	15	;name length 
  000F                   C      reccnt	equ	15	;record count field 
  0010                   C      dskmap	equ	16	;disk map field 
  001F                   C      lstfcb	equ	fcblen-1 
  0020                   C      nxtrec	equ	fcblen 
  0021                   C      ranrec	equ	nxtrec+1;random record field (2 bytes) 
                         C       
                         C      ;	reserved file indicators 
  0009                   C      rofile	equ	9	;high order of first type char 
  000A                   C      invis	equ	10	;invisible file in dir command 
                         C      ;	equ	11	;reserved 
                         C       
                         C      ;	utility functions for file access 
                         C       
  C83E                   C      dm_position: 
                         C      	;compute disk map position for vrecord to HL 
  C83E    21 D1C3        C      	lxi	h,blkshf	;shift count to C 
  C841    4E             C      	mov	c,m 
  C842    3A D1E3        C      	lda	vrecord		;current virtual record to A 
  C845                   C      dmpos0: 
  C845    B7             C      	ora	a 
  C846    1F             C      	rar 
  C847    0D             C      	dcr	c 
  C848    C2 C845        C      	jnz	dmpos0 
                         C      	;A = shr(vrecord,blkshf) = vrecord/2**(sect/block) 
  C84B    47             C      	mov	b,a		;save it for later addition 
  C84C    3E 08          C      	mvi	a,8		;8-blkshf to accumulator 
  C84E    96             C      	sub	m 
  C84F    4F             C      	mov	c,a		;extent shift count in register c 
  C850    3A D1E2        C      	lda	extval		;extent value ani extmsk 
  C853                   C      dmpos1: 
                         C      	;blkshf = 3,4,5,6,7, C=5,4,3,2,1 
                         C      	;shift is 4,3,2,1,0 
  C853    0D             C      	dcr	c 
  C854    CA C85C        C      	jz	dmpos2 
  C857    B7             C      	ora	a 
  C858    17             C      	ral 
  C859    C3 C853        C      	jmp	dmpos1 
  C85C                   C      dmpos2: 
                         C      	;arrive here with A = shl(ext and extmsk,7-blkshf) 
  C85C    80             C      	add	b		;add the previous shr(vrecord,blkshf) value 
                         C      	;A is one of the following values, depending upon alloc 
                         C      	;bks blkshf 
                         C      	;1k   3     v/8 + extval * 16 
                         C      	;2k   4     v/16+ extval * 8 
                         C      	;4k   5     v/32+ extval * 4 
                         C      	;8k   6     v/64+ extval * 2 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-48


                         C      	;16k  7     v/128+extval * 1 
  C85D    C9             C      	ret		;with dm_position in A 
                         C       
  C85E                   C      getdm: 
                         C      	;return disk map value from position given by BC 
  C85E    2A C743        C      	lhld	info		;base address of file control block 
  C861    11 0010        C      	lxi	d,dskmap	;HL =.diskmap 
  C864    19             C      	dad	d 
  C865    09             C      	dad	b		;index by a single byte value 
  C866    3A D1DD        C      	lda	single		;single byte/map entry? 
  C869    B7             C      	ora	a		;get disk map single byte 
  C86A    CA C871        C      	jz	getdmd 
  C86D    6E             C      	mov	l,m		;with HL=00bb 
  C86E    26 00          C      	mvi	h,0 
  C870    C9             C      	ret 
  C871                   C      getdmd: 
  C871    09             C      	dad	b		;HL=.fcb(dm+i*2) 
                         C      	;double precision value returned 
  C872    5E             C      	mov	e,m 
  C873    23             C      	inx	h 
  C874    56             C      	mov	d,m 
  C875    EB             C      	xchg 
  C876    C9             C      	ret 
                         C       
  C877                   C      index: 
                         C      	;compute disk block number from current fcb 
  C877    CD C83E        C      	call	dm_position	;0...15 in register A 
  C87A    4F             C      	mov	c,a		;value to HL 
  C87B    06 00          C      	mvi	b,0 
  C87D    CD C85E        C      	call	getdm 
  C880    22 D1E5        C      	shld	arecord 
  C883    C9             C      	ret 
                         C       
  C884                   C      allocated: 
                         C      	;called following index to see if block allocated 
  C884    2A D1E5        C      	lhld	arecord 
  C887    7D             C      	mov	a,l 
  C888    B4             C      	ora	h 
  C889    C9             C      	ret 
                         C       
  C88A                   C      atran: 
                         C      	;compute actual record address, assuming index called 
  C88A    3A D1C3        C      	lda	blkshf		;shift count to reg A 
  C88D    2A D1E5        C      	lhld	arecord 
  C890                   C      atran0: 
  C890    29             C      	dad	h		;shl(arecord,blkshf) 
  C891    3D             C      	dcr	a 
  C892    C2 C890        C      	jnz	atran0 
  C895    22 D1E7        C      	shld	arecord1	;save shifted block #   
  C898    3A D1C4        C      	lda	blkmsk		;mask value to C 
  C89B    4F             C      	mov	c,a 
  C89C    3A D1E3        C      	lda	vrecord		;masked value in A 
  C89F    A1             C      	ana	c 
  C8A0    B5             C      	ora	l		;to HL 
  C8A1    6F             C      	mov	l,a 
  C8A2    22 D1E5        C      	shld	arecord		;arecord=HL or (vrecord and blkmsk) 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-49


  C8A5    C9             C      	ret 
                         C       
  C8A6                   C      getexta: 
                         C      	;get current extent field address to A 
  C8A6    2A C743        C      	lhld	info		;HL=.fcb(extnum) 
  C8A9    11 000C        C      	lxi	d,extnum 
  C8AC    19             C      	dad	d 
  C8AD    C9             C      	ret 
                         C       
  C8AE                   C      getfcba: 
                         C      	;compute reccnt and nxtrec addresses for get/setfcb 
  C8AE    2A C743        C      	lhld	info		;DE=.fcb(reccnt) 
  C8B1    11 000F        C      	lxi	d,reccnt 
  C8B4    19             C      	dad	d 
  C8B5    EB             C      	xchg 
  C8B6    21 0011        C      	lxi	h,(nxtrec-reccnt)	;HL=.fcb(nxtrec) 
  C8B9    19             C      	dad	d 
  C8BA    C9             C      	ret 
                         C       
  C8BB                   C      getfcb: 
                         C      	;set variables from currently addressed fcb 
  C8BB    CD C8AE        C      	call	getfcba		;addresses in DE, HL 
  C8BE    7E             C      	mov	a,m		;vrecord=fcb(nxtrec) 
  C8BF    32 D1E3        C      	sta	vrecord 
  C8C2    EB             C      	xchg			;rcount=fcb(reccnt) 
  C8C3    7E             C      	mov	a,m 
  C8C4    32 D1E1        C      	sta	rcount 
  C8C7    CD C8A6        C      	call	getexta		;HL=.fcb(extnum) 
  C8CA    3A D1C5        C      	lda	extmsk		;extent mask to a 
  C8CD    A6             C      	ana	m		;fcb(extnum) and extmsk 
  C8CE    32 D1E2        C      	sta	extval 
  C8D1    C9             C      	ret 
                         C       
  C8D2                   C      setfcb: 
                         C      	;place values back into current fcb 
  C8D2    CD C8AE        C      	call	getfcba		;addresses to DE, HL 
  C8D5    3A D1D5        C      	lda	seqio 
  C8D8    FE 02          C      	cpi	02		;check ranfill 
  C8DA    C2 C8DE        C      	jnz	setfcb1 
  C8DD    AF             C      	xra	a 
  C8DE                   C      setfcb1: 
  C8DE    4F             C       	mov	c,a		;=1 if sequential i/o 
  C8DF    3A D1E3        C      	lda	vrecord		;fcb(nxtrec)=vrecord+seqio 
  C8E2    81             C      	add	c 
  C8E3    77             C      	mov	m,a 
  C8E4    EB             C      	xchg			;fcb(reccnt)=rcount 
  C8E5    3A D1E1        C      	lda	rcount 
  C8E8    77             C      	mov	m,a 
  C8E9    C9             C      	ret 
                         C       
  C8EA                   C      hlrotr: 
                         C      	;hl rotate right by amount C 
  C8EA    0C             C      	inr	c		;in case zero 
  C8EB                   C      hlrotr0: 
  C8EB    0D             C      	dcr	c		;return when zero 
  C8EC    C8             C      	rz 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-50


  C8ED    7C             C      	mov	a,h		;high byte 
  C8EE    B7             C      	ora	a 
  C8EF    1F             C      	rar 
  C8F0    67             C      	mov	h,a 
  C8F1    7D             C      	mov	a,l		;low byte 
  C8F2    1F             C      	rar 
  C8F3    6F             C      	mov	l,a 
  C8F4    C3 C8EB        C      	jmp	hlrotr0 
                         C       
                         C       
  C8F7                   C      compute_cs: 
                         C      	;compute checksum for current directory buffer 
  C8F7    0E 80          C      	mvi	c,recsiz	;size of directory buffer 
  C8F9    2A D1B9        C      	lhld	buffa		;current directory buffer 
  C8FC    AF             C      	xra	a		;clear checksum value 
  C8FD                   C      computecs0: 
  C8FD    86             C      	add	m		;cs=cs+buff(recsiz-C) 
  C8FE    23             C      	inx	h 
  C8FF    0D             C      	dcr	c 
  C900    C2 C8FD        C      	jnz	computecs0 
  C903    C9             C      	ret			;with checksum in A 
                         C       
  C904                   C      hlrotl: 
                         C      	;rotate the mask in HL by amount in C 
  C904    0C             C      	inr	c		;may be zero 
  C905                   C      hlrotl0: 
  C905    0D             C      	dcr	c		;return if zero 
  C906    C8             C      	rz 
  C907    29             C      	dad	h 
  C908    C3 C905        C      	jmp	hlrotl0 
                         C       
  C90B                   C      set_cdisk: 
                         C      	;set a "1" value in curdsk position of BC 
  C90B    C5             C      	push	b		;save input parameter 
  C90C    3A C742        C      	lda	curdsk		;ready parameter for shift 
  C90F    4F             C      	mov	c,a 
  C910    21 0001        C      	lxi	h,1		;number to shift 
  C913    CD C904        C      	call	hlrotl		;HL = mask to integrate 
  C916    C1             C      	pop	b		;original mask 
  C917    79             C      	mov	a,c 
  C918    B5             C      	ora	l 
  C919    6F             C      	mov	l,a 
  C91A    78             C      	mov	a,b		;HL = mask or rol(1,curdsk) 
  C91B    B4             C      	ora	h 
  C91C    67             C      	mov	h,a 
  C91D    C9             C      	ret 
                         C       
  C91E                   C      nowrite: 
                         C      	;return true if dir checksum difference occurred 
  C91E    2A D1AD        C      	lhld	rodsk 
  C921    3A C742        C      	lda	curdsk 
  C924    4F             C      	mov	c,a 
  C925    CD C8EA        C      	call	hlrotr 
  C928    7D             C      	mov	a,l		;non zero if nowrite 
  C929    E6 01          C      	ani	1b 
  C92B    C9             C      	ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-51


                         C       
  C92C                   C      set_ro: 
                         C      	;set current disk to read only 
  C92C    21 D1AD        C      	lxi	h,rodsk 
  C92F    4E             C      	mov	c,m 
  C930    23             C      	inx	h 
  C931    46             C      	mov	b,m 
  C932    CD C90B        C      	call	set_cdisk	;sets bit to 1 
  C935    22 D1AD        C      	shld	rodsk 
                         C      	;high water mark in directory goes to max 
  C938    2A D1C8        C      	lhld	dirmax		;DE = directory max 
  C93B    23             C      	inx	h 
  C93C    EB             C      	xchg 
  C93D    2A D1B3        C      	lhld	cdrmaxa		;HL = .cdrmax 
  C940    73             C      	mov	m,e		;cdrmax = dirmax 
  C941    23             C      	inx	h 
  C942    72             C      	mov	m,d 
  C943    C9             C      	ret 
                         C       
  C944                   C      check_rodir: 
                         C      	;check current directory element for read/only status 
  C944    CD C95E        C      	call	getdptra	;address of element 
                         C      						 
  C947                   C      check_rofile: 
                         C      	;check current buff(dptr) or fcb(0) for r/o status 
  C947    11 0009        C      	lxi	d,rofile	;offset to ro bit 
  C94A    19             C      	dad	d 
  C94B    7E             C      	mov	a,m		;return if not set 
  C94C    17             C      	ral 
  C94D    D0             C      	rnc 
  C94E    21 C40F        C      	lxi	h,roferr 
  C951    C3 C74A        C      	jmp	goerr 
                         C      ;	jmp rof_error ;exit to read only disk message 
                         C       
                         C       
  C954                   C      check_write: 
                         C      	;check for write protected disk 
  C954    CD C91E        C      	call	nowrite		;ok to write if not rodsk 
  C957    C8             C      	rz 
  C958    21 C40D        C      	lxi	h,roderr 
  C95B    C3 C74A        C      	jmp	goerr 
                         C      ;	jmp rod_error ;read only disk error 
                         C       
  C95E                   C      getdptra: 
                         C      	;compute the address of a directory element at 
                         C      	;positon dptr in the buffer 
  C95E    2A D1B9        C      	lhld	buffa 
  C961    3A D1E9        C      	lda	dptr 
  C964                   C      addh: 
                         C      	;HL = HL + A 
  C964    85             C      	add	l 
  C965    6F             C      	mov	l,a 
  C966    D0             C      	rnc 
                         C      	;overflow to H 
  C967    24             C      	inr	h 
  C968    C9             C      	ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-52


                         C       
                         C       
  C969                   C      getmodnum: 
                         C      	;compute the address of the module number  
                         C      	;bring module number to accumulator 
                         C      	;(high order bit is fwf (file write flag) 
  C969    2A C743        C      	lhld	info		;HL=.fcb(modnum) 
  C96C    11 000E        C      	lxi	d,modnum 
  C96F    19             C      	dad	d 
  C970    7E             C      	mov	a,m		;A=fcb(modnum) 
  C971    C9             C      	ret 
                         C       
  C972                   C      clrmodnum: 
                         C      	;clear the module number field for user open/make 
  C972    CD C969        C      	call	getmodnum	;fcb(modnum)=0 
  C975    36 00          C      	mvi	m,0 
  C977    C9             C      	ret 
                         C       
  C978                   C      setfwf: 
  C978    CD C969        C      	call	getmodnum	;HL=.fcb(modnum), A=fcb(modnum) 
                         C      	;set fwf (file write flag) to "1" 
  C97B    F6 80          C      	ori	fwfmsk		;fcb(modnum)=fcb(modnum) or 80h 
  C97D    77             C      	mov	m,a 
                         C      	;also returns non zero in accumulator 
  C97E    C9             C      	ret 
                         C       
                         C       
  C97F                   C      compcdr: 
                         C      	;return cy if cdrmax > dcnt 
  C97F    2A D1EA        C      	lhld	dcnt		;DE = directory counter 
  C982    EB             C      	xchg 
  C983    2A D1B3        C      	lhld	cdrmaxa		;HL=.cdrmax 
  C986    7B             C      	mov	a,e		;low(dcnt) - low(cdrmax) 
  C987    96             C      	sub	m 
  C988    23             C      	inx	h		;HL = .cdrmax+1 
  C989    7A             C      	mov	a,d		;hig(dcnt) - hig(cdrmax) 
  C98A    9E             C      	sbb	m 
                         C      	;condition dcnt - cdrmax  produces cy if cdrmax>dcnt 
  C98B    C9             C      	ret 
                         C       
  C98C                   C      setcdr: 
                         C      	;if not (cdrmax > dcnt) then cdrmax = dcnt+1 
  C98C    CD C97F        C      	call	compcdr 
  C98F    D8             C      	rc			;return if cdrmax > dcnt 
                         C      	;otherwise, HL = .cdrmax+1, DE = dcnt 
  C990    13             C      	inx	d 
  C991    72             C      	mov	m,d 
  C992    2B             C      	dcx	h 
  C993    73             C      	mov	m,e 
  C994    C9             C      	ret 
                         C       
  C995                   C      subdh: 
                         C      	;compute HL = DE - HL 
  C995    7B             C      	mov	a,e 
  C996    95             C      	sub	l 
  C997    6F             C      	mov	l,a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-53


  C998    7A             C      	mov	a,d 
  C999    9C             C      	sbb	h 
  C99A    67             C      	mov	h,a 
  C99B    C9             C      	ret 
                         C       
  C99C                   C      newchecksum: 
  C99C    0E FF          C      	mvi	c,_true		;drop through to compute new checksum 
  C99E                   C      checksum: 
                         C      	;compute current checksum record and update the 
                         C      	;directory element if C=true, or check for = if not 
                         C      	;drec < chksiz? 
  C99E    2A D1EC        C      	lhld	drec		;DE-HL 
  C9A1    EB             C      	xchg 
  C9A2    2A D1CC        C      	lhld	chksiz 
  C9A5    CD C995        C      	call	subdh 
  C9A8    D0             C      	rnc			;skip checksum if past checksum vector size 
                         C      	;drec < chksiz, so continue 
  C9A9    C5             C      	push	b		;save init flag 
  C9AA    CD C8F7        C      	call	compute_cs	;check sum value to A 
  C9AD    2A D1BD        C      	lhld	checka		;address of check sum vector 
  C9B0    EB             C      	xchg 
  C9B1    2A D1EC        C      	lhld	drec		;value of drec 
  C9B4    19             C      	dad	d		;HL = .check(drec) 
  C9B5    C1             C      	pop	b		;recall true=0ffh or false=00 to C 
  C9B6    0C             C      	inr	c		;0ffh produces zero flag 
  C9B7    CA C9C4        C      	jz	initial_cs 
                         C      	;not initializing, compare 
  C9BA    BE             C      	cmp	m		;compute_cs=check(drec)? 
  C9BB    C8             C      	rz			;no message if ok 
                         C      	;checksum error, are we beyond 
                         C      	;the end of the disk? 
  C9BC    CD C97F        C      	call	compcdr 
  C9BF    D0             C      	rnc			;no message if so 
  C9C0    CD C92C        C      	call	set_ro		;read/only disk set 
  C9C3    C9             C      	ret 
  C9C4                   C      initial_cs: 
                         C      	;initializing the checksum 
  C9C4    77             C      	mov	m,a 
  C9C5    C9             C      	ret 
                         C       
                         C       
  C9C6                   C      wrdir: 
                         C      	;write the current directory entry, set checksum 
  C9C6    CD C99C        C      	call	newchecksum	;initialize entry 
  C9C9    CD C9E0        C      	call	setdir		;directory dma 
  C9CC    0E 01          C      	mvi	c,1		;indicates a write directory operation 
  C9CE    CD C7B8        C      	call	wrbuff		;write the buffer 
  C9D1    C3 C9DA        C              jmp	setdata		;to data dma address 
                         C      	;ret 
                         C       
  C9D4                   C      rd_dir: 
                         C      	;read a directory entry into the directory buffer 
  C9D4    CD C9E0        C      	call	setdir		;directory dma 
  C9D7    CD C7B2        C      	call	rdbuff		;directory record loaded 
                         C              ; jmp setdata to data dma address     
                         C      	;ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-54


                         C       
  C9DA                   C      setdata: 
                         C      	;set data dma address 
  C9DA    21 D1B1        C      	lxi	h,dmaad		;to complete the call 
  C9DD    C3 C9E3        C      	jmp	_setdma 
                         C       
  C9E0                   C      setdir: 
                         C      	;set directory dma address 
  C9E0    21 D1B9        C      	lxi	h,buffa		;jmp _setdma to complete call      
                         C       
  C9E3                   C      _setdma: 
                         C      	;HL=.dma address to set (i.e., buffa or dmaad) 
  C9E3    4E             C      	mov	c,m		;parameter ready 
  C9E4    23             C      	inx	h 
  C9E5    46             C      	mov	b,m 
  C9E6    C3 D224        C      	jmp	setdmaf 
                         C       
                         C       
  C9E9                   C      dir_to_user: 
                         C      	;copy the directory entry to the user buffer 
                         C      	;after call to search or searchn by user code 
  C9E9    2A D1B9        C      	lhld	buffa		;source is directory buffer 
  C9EC    EB             C      	xchg 
  C9ED    2A D1B1        C      	lhld	dmaad		;destination is user dma address 
  C9F0    0E 80          C      	mvi	c,recsiz	;copy entire record 
  C9F2    C3 C74F        C      	jmp	move 
                         C      	;ret 
                         C       
  C9F5                   C      end_of_dir: 
                         C      	;return zero flag if at end of directory, non zero 
                         C      	;if not at end (end of dir if dcnt = 0ffffh) 
  C9F5    21 D1EA        C      	lxi	h,dcnt		;may be 0ffh 
  C9F8    7E             C      	mov	a,m 
  C9F9    23             C      	inx	h		;low(dcnt) = high(dcnt)? 
  C9FA    BE             C      	cmp	m 
  C9FB    C0             C      	rnz			;non zero returned if different 
                         C      	;high and low the same, = 0ffh? 
  C9FC    3C             C      	inr	a		;0ffh becomes 00 if so 
  C9FD    C9             C      	ret 
                         C       
  C9FE                   C      set_end_dir: 
                         C      	;set dcnt to the end of the directory 
  C9FE    21 FFFF        C      	lxi	h,enddir 
  CA01    22 D1EA        C      	shld	dcnt 
  CA04    C9             C      	ret 
                         C       
  CA05                   C      read_dir: 
                         C      	;read next directory entry, with C=true if initializing 
  CA05    2A D1C8        C      	lhld	dirmax		;in preparation for subtract 
  CA08    EB             C      	xchg 
  CA09    2A D1EA        C      	lhld	dcnt		;dcnt=dcnt+1 
  CA0C    23             C      	inx	h 
  CA0D    22 D1EA        C      	shld	dcnt 
                         C      	;continue while dirmax >= dcnt (dirmax-dcnt no cy) 
  CA10    CD C995        C      	call	subdh		;DE-HL 
  CA13    D2 CA19        C      	jnc	read_dir0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-55


                         C      	;yes, set dcnt to end of directory 
  CA16    C3 C9FE        C      	jmp	set_end_dir 
                         C      ;		ret 
  CA19                   C      read_dir0: 
                         C      	;not at end of directory, seek next element 
                         C      	;initialization flag is in C 
  CA19    3A D1EA        C      	lda	dcnt		;low(dcnt) and dskmsk 
  CA1C    E6 03          C      	ani	dskmsk 
  CA1E    06 05          C      	mvi	b,fcbshf	;to multiply by fcb size 
  CA20                   C      read_dir1: 
  CA20    87             C      	add	a 
  CA21    05             C      	dcr	b 
  CA22    C2 CA20        C      	jnz	read_dir1 
                         C      	;A = (low(dcnt) and dskmsk) shl fcbshf 
  CA25    32 D1E9        C      	sta	dptr		;ready for next dir operation 
  CA28    B7             C      	ora	a		;return if not a new record 
  CA29    C0             C      	rnz 
  CA2A    C5             C      	push	b		;save initialization flag C 
  CA2B    CD C7C3        C      	call	seek_dir	;seek proper record 
  CA2E    CD C9D4        C      	call	rd_dir		;read the directory record 
  CA31    C1             C      	pop	b		;recall initialization flag 
  CA32    C3 C99E        C      	jmp	checksum	;checksum the directory elt 
                         C      	;ret 
                         C       
                         C       
  CA35                   C      getallocbit: 
                         C      	;given allocation vector position BC, return with byte 
                         C      	;containing BC shifted so that the least significant 
                         C      	;bit is in the low order accumulator position.  HL is 
                         C      	;the address of the byte for possible replacement in 
                         C      	;memory upon return, and D contains the number of shifts 
                         C      	;required to place the returned value back into position 
  CA35    79             C      	mov	a,c 
  CA36    E6 07          C      	ani	111b 
  CA38    3C             C      	inr	a 
  CA39    5F             C      	mov	e,a 
  CA3A    57             C      	mov	d,a 
                         C      	;d and e both contain the number of bit positions to shift 
  CA3B    79             C      	mov	a,c		;C shr 3 to C 
  CA3C    0F             C      	rrc 
  CA3D    0F             C      	rrc 
  CA3E    0F             C      	rrc 
  CA3F    E6 1F          C      	ani	11111b 
  CA41    4F             C      	mov	c,a 
  CA42    78             C      	mov	a,b		;B shl 5 
  CA43    87             C      	add	a 
  CA44    87             C      	add	a 
  CA45    87             C      	add	a 
  CA46    87             C      	add	a 
  CA47    87             C      	add	a 
  CA48    B1             C      	ora	c		;bbbccccc to C 
  CA49    4F             C      	mov	c,a 
  CA4A    78             C      	mov	a,b		;BC shr 3 to BC 
  CA4B    0F             C      	rrc 
  CA4C    0F             C      	rrc 
  CA4D    0F             C      	rrc 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-56


  CA4E    E6 1F          C      	ani	11111b 
  CA50    47             C      	mov	b,a 
  CA51    2A D1BF        C      	lhld	alloca		;base address of allocation vector 
  CA54    09             C      	dad	b		;byte to A, hl = .alloc(BC shr 3) 
  CA55    7E             C      	mov	a,m 
                         C      	;now move the bit to the low order position of A 
  CA56    07             C      rotl:	rlc 
  CA57    1D             C      	dcr	e 
  CA58    C2 CA56        C      	jnz	rotl 
  CA5B    C9             C      	ret 
                         C       
                         C       
  CA5C                   C      set_alloc_bit: 
                         C      	;BC is the bit position of ALLOC to set or reset.  The 
                         C      	;value of the bit is in register E. 
  CA5C    D5             C      	push	d		;shifted val A, count in D 
  CA5D    CD CA35        C      	call	getallocbit 
  CA60    E6 FE          C      	ani	11111110b	;mask low bit to zero (may be set) 
  CA62    C1             C      	pop	b		;low bit of C is masked into A 
  CA63    B1             C      	ora	c 
                         C      ;	jmp rotr ;to rotate back into proper position	 
                         C      	;ret 
  CA64                   C      rotr: 
                         C      	;byte value from ALLOC is in register A, with shift count 
                         C      	;in register C (to place bit back into position), and 
                         C      	;target ALLOC position in registers HL, rotate and replace 
  CA64    0F             C      	rrc			;back into position 
  CA65    15             C      	dcr	d 
  CA66    C2 CA64        C      	jnz	rotr  
  CA69    77             C      	mov	m,a		;back to ALLOC 
  CA6A    C9             C      	ret 
                         C       
  CA6B                   C      scandm: 
                         C      	;scan the disk map addressed by dptr for non-zero 
                         C      	;entries, the allocation vector entry corresponding 
                         C      	;to a non-zero entry is set to the value of C (0,1) 
  CA6B    CD C95E        C      	call	getdptra	;HL = buffa + dptr 
                         C      	;HL addresses the beginning of the directory entry 
  CA6E    11 0010        C      	lxi	d,dskmap	;hl now addresses the disk map 
  CA71    19             C      	dad	d 
  CA72    C5             C      	push	b		;save the 0/1 bit to set 
  CA73    0E 11          C      	mvi	c,fcblen-dskmap+1	;size of single byte disk map + 1 
  CA75                   C      scandm0: 
                         C      	;loop once for each disk map entry 
  CA75    D1             C      	pop	d		;recall bit parity 
  CA76    0D             C      	dcr	c		;all done scanning? 
  CA77    C8             C      	rz 
                         C      	;no, get next entry for scan 
  CA78    D5             C      	push	d		;replace bit parity 
  CA79    3A D1DD        C      	lda	single 
  CA7C    B7             C      	ora	a 
  CA7D    CA CA88        C      	jz	scandm1 
                         C      	;single byte scan operation 
  CA80    C5             C      	push	b		;save counter 
  CA81    E5             C      	push	h		;save map address 
  CA82    4E             C      	mov	c,m		;BC=block# 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-57


  CA83    06 00          C      	mvi	b,0 
  CA85    C3 CA8E        C      	jmp	scandm2 
  CA88                   C      scandm1: 
                         C      	;double byte scan operation 
  CA88    0D             C      	dcr	c		;count for double byte 
  CA89    C5             C      	push	b		;save counter 
  CA8A    4E             C      	mov	c,m		;BC=block# 
  CA8B    23             C      	inx	h 
  CA8C    46             C      	mov	b,m 
  CA8D    E5             C      	push	h		;save map address 
  CA8E                   C      scandm2: 
                         C      	;arrive here with BC=block#, E=0/1 
  CA8E    79             C      	mov	a,c		;skip if = 0000 
  CA8F    B0             C      	ora	b 
  CA90    CA CA9D        C      	jz	scanm3 
  CA93    2A D1C6        C      	lhld	maxall		;check invalid index 
  CA96    7D             C      	mov	a,l		;maxall - block# 
  CA97    91             C      	sub	c 
  CA98    7C             C      	mov	a,h 
  CA99    98             C      	sbb	b 
  CA9A    D4 CA5C        C      	cnc	set_alloc_bit 
                         C      	;bit set to 0/1 
  CA9D                   C      scanm3: 
  CA9D    E1             C      	pop	h		;to next bit position 
  CA9E    23             C      	inx	h 
  CA9F    C1             C      	pop	b		;recall counter 
  CAA0    C3 CA75        C      	jmp	scandm0		;for another item 
                         C       
  CAA3                   C      initialize: 
                         C      	;initialize the current disk 
                         C      	;lret = false ;set to true if $ file exists 
                         C      	;compute the length of the allocation vector - 2 
  CAA3    2A D1C6        C      	lhld	maxall		;perform maxall/8 
  CAA6    0E 03          C      	mvi	c,3 
                         C      	;number of bytes in alloc vector is (maxall/8)+1 
  CAA8    CD C8EA        C      	call	hlrotr		;HL = maxall/8+1 
  CAAB    23             C      	inx	h 
  CAAC    44             C      	mov	b,h		;count down BC til zero 
  CAAD    4D             C      	mov	c,l 
  CAAE    2A D1BF        C      	lhld	alloca		;base of allocation vector 
                         C      	;fill the allocation vector with zeros 
  CAB1                   C      initial0: 
  CAB1    36 00          C      	mvi	m,0		;alloc(i)=0 
  CAB3    23             C      	inx	h 
  CAB4    0B             C      	dcx	b		;count length down 
  CAB5    78             C      	mov	a,b 
  CAB6    B1             C      	ora	c 
  CAB7    C2 CAB1        C      	jnz	initial0 
                         C      	;set the reserved space for the directory 
  CABA    2A D1CA        C      	lhld	dirblk 
  CABD    EB             C      	xchg 
  CABE    2A D1BF        C      	lhld	alloca		;HL=.alloc() 
  CAC1    73             C      	mov	m,e		;sets reserved directory blks 
  CAC2    23             C      	inx	h 
  CAC3    72             C      	mov	m,d 
                         C      	;allocation vector initialized, home disk 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-58


  CAC4    CD C7A1        C      	call	home 
                         C              ;cdrmax = 3 (scans at least one directory record) 
  CAC7    2A D1B3        C      	lhld	cdrmaxa 
  CACA    36 03          C      	mvi	m,3 
  CACC    23             C      	inx	h 
  CACD    36 00          C      	mvi	m,0 
                         C      	;cdrmax = 0000 
  CACF    CD C9FE        C      	call	set_end_dir	;dcnt = enddir 
                         C      	;read directory entries and check for allocated storage 
  CAD2                   C      initial2: 
  CAD2    0E FF          C      	mvi	c,_true 
  CAD4    CD CA05        C      	call	read_dir 
  CAD7    CD C9F5        C      	call	end_of_dir	;return if end of directory 
  CADA    C8             C      	rz 
                         C      	;not end of directory, valid entry? 
  CADB    CD C95E        C      	call	getdptra	;HL = buffa + dptr 
  CADE    3E E5          C      	mvi	a,empty 
  CAE0    BE             C      	cmp	m 
  CAE1    CA CAD2        C      	jz	initial2	;go get another item 
                         C      	;not empty, user code the same? 
  CAE4    3A C741        C      	lda	usrcode 
  CAE7    BE             C      	cmp	m 
  CAE8    C2 CAF6        C      	jnz	pdollar 
                         C      	;same user code, check for '$' submit 
  CAEB    23             C      	inx	h		;first character 
  CAEC    7E             C      	mov	a,m 
  CAED    D6 24          C      	sui	'$'		;dollar file? 
  CAEF    C2 CAF6        C      	jnz	pdollar 
                         C      	;dollar file found, mark in lret 
  CAF2    3D             C      	dcr	a		;lret = 255 
  CAF3    32 C745        C      	sta	lret 
  CAF6                   C      pdollar: 
                         C      	;now scan the disk map for allocated blocks 
  CAF6    0E 01          C      	mvi	c,1		;set to allocated 
  CAF8    CD CA6B        C      	call	scandm 
  CAFB    CD C98C        C      	call	setcdr		;set cdrmax to dcnt 
  CAFE    C3 CAD2        C      	jmp	initial2	;for another entry 
                         C       
  CB01                   C      copy_dirloc: 
                         C      	;copy directory location to lret following 
                         C      	;delete, rename, ... ops 
  CB01    3A D1D4        C      	lda	dirloc 
  CB04    C3 C701        C      	jmp	sta_ret 
                         C      ;	ret 
                         C       
  CB07                   C      compext: 
                         C      	;compare extent# in A with that in C, return nonzero 
                         C      	;if they do not match 
  CB07    C5             C      	push	b		;save C's original value 
  CB08    F5             C      	push	psw 
  CB09    3A D1C5        C      	lda	extmsk 
  CB0C    2F             C      	cma 
  CB0D    47             C      	mov	b,a 
                         C      	;B has negated form of extent mask 
  CB0E    79             C      	mov	a,c		;low bits removed from C 
  CB0F    A0             C      	ana	b 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-59


  CB10    4F             C      	mov	c,a 
  CB11    F1             C      	pop	psw		;low bits removed from A 
  CB12    A0             C      	ana	b 
  CB13    91             C      	sub	c		;set flags 
  CB14    E6 1F          C      	ani	maxext 
  CB16    C1             C      	pop	b		;restore original values 
  CB17    C9             C      	ret 
                         C       
  CB18                   C      search: 
                         C      	;search for directory element of length C at info 
  CB18    3E FF          C      	mvi	a,0ffh		;changed if actually found 
  CB1A    32 D1D4        C      	sta	dirloc 
  CB1D    21 D1D8        C      	lxi	h,searchl	;searchl = C 
  CB20    71             C      	mov	m,c 
  CB21    2A C743        C      	lhld	info		;searcha = info 
  CB24    22 D1D9        C      	shld	searcha 
  CB27    CD C9FE        C      	call	set_end_dir	;dcnt = enddir 
  CB2A    CD C7A1        C      	call	home		;to start at the beginning 
                         C      	;(drop through to searchn) 
                         C       
  CB2D                   C      searchn: 
                         C      	;search for the next directory element, assuming 
                         C      	;a previous call on search which sets searcha and 
                         C      	;searchl 
  CB2D    0E 00          C      	mvi	c,_false	;read next dir element 
  CB2F    CD CA05        C      	call	read_dir 
  CB32    CD C9F5        C      	call	end_of_dir	;skip to end if so 
  CB35    CA CB94        C      	jz	search_fin 
                         C      	;not end of directory, scan for match 
  CB38    2A D1D9        C      	lhld	searcha		;DE=beginning of user fcb 
  CB3B    EB             C      	xchg 
  CB3C    1A             C      	ldax	d		;first character 
  CB3D    FE E5          C      	cpi	empty		;keep scanning if empty 
  CB3F    CA CB4A        C      	jz	searchnext 
                         C      	;not empty, may be end of logical directory 
  CB42    D5             C      	push	d		;save search address 
  CB43    CD C97F        C      	call	compcdr		;past logical end? 
  CB46    D1             C      	pop	d		;recall address 
  CB47    D2 CB94        C      	jnc	search_fin	;artificial stop 
  CB4A                   C      searchnext: 
  CB4A    CD C95E        C      	call	getdptra	;HL = buffa+dptr 
  CB4D    3A D1D8        C      	lda	searchl		;length of search to c 
  CB50    4F             C      	mov	c,a 
  CB51    06 00          C      	mvi	b,0		;b counts up, c counts down 
  CB53                   C      searchloop: 
  CB53    79             C      	mov	a,c 
  CB54    B7             C      	ora	a 
  CB55    CA CB83        C      	jz	endsearch 
  CB58    1A             C      	ldax	d		;? matches all 
  CB59    FE 3F          C      	cpi	'?' 
  CB5B    CA CB7C        C      	jz	searchok 
                         C      	;scan next character if not ubytes 
  CB5E    78             C      	mov	a,b 
  CB5F    FE 0D          C      	cpi	ubytes 
  CB61    CA CB7C        C      	jz	searchok 
                         C      	;not the ubytes field, extent field? 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-60


  CB64    FE 0C          C      	cpi	extnum		;may be extent field 
  CB66    1A             C      	ldax	d		;fcb character 
  CB67    CA CB73        C      	jz	searchext	;skip to search extent 
  CB6A    96             C      	sub	m		;mask-out flags/extent modulus 
  CB6B    E6 7F          C      	ani	7fh 
  CB6D    C2 CB2D        C      	jnz	searchn		;skip if not matched 
  CB70    C3 CB7C        C      	jmp	searchok	;matched character 
  CB73                   C      searchext: 
                         C      	;A has fcb character 
                         C      	;attempt an extent # match 
  CB73    C5             C      	push	b		;save counters 
  CB74    4E             C      	mov	c,m		;directory character to c 
  CB75    CD CB07        C      	call	compext		;compare user/dir char 
  CB78    C1             C      	pop	b		;recall counters 
  CB79    C2 CB2D        C      	jnz	searchn		;skip if no match 
  CB7C                   C      searchok: 
                         C      	;current character matches 
  CB7C    13             C      	inx	d 
  CB7D    23             C      	inx	h 
  CB7E    04             C      	inr	b 
  CB7F    0D             C      	dcr	c 
  CB80    C3 CB53        C      	jmp	searchloop 
  CB83                   C      endsearch: 
                         C      	;entire name matches, return dir position 
  CB83    3A D1EA        C      	lda	dcnt 
  CB86    E6 03          C      	ani	dskmsk 
  CB88    32 C745        C      	sta	lret 
                         C      	;lret = low(dcnt) and 11b 
  CB8B    21 D1D4        C      	lxi	h,dirloc	;dirloc=0ffh? 
  CB8E    7E             C      	mov	a,m 
  CB8F    17             C      	ral 
  CB90    D0             C      	rnc 
                         C      	;yes, change it to 0 to mark as found 
  CB91    AF             C      	xra	a		;dirloc=0 
  CB92    77             C      	mov	m,a 
  CB93    C9             C      	ret 
  CB94                   C      search_fin: 
                         C      	;end of directory, or empty name 
  CB94    CD C9FE        C      	call	set_end_dir	;may be artifical end 
  CB97    3E FF          C      	mvi	a,255 
  CB99    C3 C701        C      	jmp	sta_ret 
                         C       
                         C       
  CB9C                   C      delete: 
                         C      	;delete the currently addressed file 
  CB9C    CD C954        C      	call	check_write	;write protected? 
  CB9F    0E 0C          C      	mvi	c,extnum	;search through file type 
  CBA1    CD CB18        C      	call	search 
  CBA4                   C      delete0: 
                         C      	;loop while directory matches 
  CBA4    CD C9F5        C      	call	end_of_dir	;stop if end 
  CBA7    C8             C      	rz 
                         C      	;set each non zero disk map entry to 0 
                         C      	;in the allocation vector 
                         C      	;may be r/o file 
  CBA8    CD C944        C      	call	check_rodir	;ro disk error if found 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-61


  CBAB    CD C95E        C      	call	getdptra	;HL=.buff(dptr) 
  CBAE    36 E5          C      	mvi	m,empty 
  CBB0    0E 00          C      	mvi	c,0		;alloc elts set to 0 
  CBB2    CD CA6B        C      	call	scandm 
  CBB5    CD C9C6        C      	call	wrdir		;write the directory 
  CBB8    CD CB2D        C      	call	searchn		;to next element 
  CBBB    C3 CBA4        C      	jmp	delete0		;for another record 
                         C       
  CBBE                   C      get_block: 
                         C      	;given allocation vector position BC, find the zero bit 
                         C      	;closest to this position by searching left and right. 
                         C      	;if found, set the bit to one and return the bit position 
                         C      	;in hl.  if not found (i.e., we pass 0 on the left, or 
                         C      	;maxall on the right), return 0000 in hl 
  CBBE    50             C      	mov	d,b		;copy of starting position to de 
  CBBF    59             C      	mov	e,c 
  CBC0                   C      lefttst: 
  CBC0    79             C      	mov	a,c		;skip if left=0000 
  CBC1    B0             C      	ora	b 
  CBC2    CA CBD1        C      	jz	righttst 
                         C      	;left not at position zero, bit zero? 
  CBC5    0B             C      	dcx	b		;left,right pushed 
  CBC6    D5             C      	push	d 
  CBC7    C5             C      	push	b 
  CBC8    CD CA35        C      	call	getallocbit 
  CBCB    1F             C      	rar			;return block number if zero 
  CBCC    D2 CBEC        C      	jnc	retblock 
                         C      	;bit is one, so try the right 
  CBCF    C1             C      	pop	b		;left, right restored 
  CBD0    D1             C      	pop	d 
  CBD1                   C      righttst: 
  CBD1    2A D1C6        C      	lhld	maxall		;value of maximum allocation# 
  CBD4    7B             C      	mov	a,e		;right=maxall? 
  CBD5    95             C      	sub	l 
  CBD6    7A             C      	mov	a,d 
  CBD7    9C             C      	sbb	h 
  CBD8    D2 CBF4        C      	jnc	retblock0	;return block 0000 if so 
  CBDB    13             C      	inx	d		;left, right pushed 
  CBDC    C5             C      	push	b 
  CBDD    D5             C      	push	d 
  CBDE    42             C      	mov	b,d		;ready right for call 
  CBDF    4B             C      	mov	c,e 
  CBE0    CD CA35        C      	call	getallocbit 
  CBE3    1F             C      	rar			;return block number if zero 
  CBE4    D2 CBEC        C      	jnc	retblock 
  CBE7    D1             C      	pop	d		;restore left and right pointers 
  CBE8    C1             C      	pop	b 
  CBE9    C3 CBC0        C      	jmp	lefttst ;for another attempt 
  CBEC                   C      retblock: 
  CBEC    17             C      	ral			;bit back into position and set to 1 
  CBED    3C             C      	inr	a 
                         C      	;d contains the number of shifts required to reposition 
  CBEE    CD CA64        C      	call	rotr		;move bit back to position and store 
  CBF1    E1             C      	pop	h		;HL returned value, DE discarded 
  CBF2    D1             C      	pop	d 
  CBF3    C9             C      	ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-62


  CBF4                   C      retblock0: 
                         C      	;cannot find an available bit, return 0000 
  CBF4    79             C      	mov	a,c		; 
  CBF5    B0             C      	ora	b		;also at beginning 
  CBF6    C2 CBC0        C      	jnz	lefttst 
  CBF9    21 0000        C      	lxi	h,0000h 
  CBFC    C9             C      	ret 
                         C       
  CBFD                   C      copy_fcb: 
                         C      	;copy the entire file control block 
  CBFD    0E 00          C      	mvi	c,0		;start at 0, to fcblen-1 
  CBFF    1E 20          C      	mvi	e,fcblen 
                         C      	;	jmp copy_dir 
                         C       
  CC01                   C      copy_dir: 
                         C      	;copy fcb information starting at C for E bytes 
                         C      	;into the currently addressed directory entry 
  CC01    D5             C      	push	d		;save length for later 
  CC02    06 00          C      	mvi	b,0		;double index to BC 
  CC04    2A C743        C      	lhld	info		;HL = source for data 
  CC07    09             C      	dad	b		;DE=.fcb(C), source for copy 
  CC08    EB             C      	xchg 
  CC09    CD C95E        C      	call	getdptra	;HL=.buff(dptr), destination 
  CC0C    C1             C      	pop	b		;DE=source, HL=dest, C=length 
  CC0D    CD C74F        C      	call	move		;data moved 
  CC10                   C      seek_copy: 
                         C      	;enter from close to seek and copy current element 
  CC10    CD C7C3        C      	call	seek_dir	;to the directory element 
  CC13    C3 C9C6        C      	jmp	wrdir		;write the directory element 
                         C      	;ret 
                         C       
                         C       
  CC16                   C      rename: 
                         C      	;rename the file described by the first half of 
                         C      	;the currently addressed file control block. the 
                         C      	;new name is contained in the last half of the 
                         C      	;currently addressed file conrol block.  the file 
                         C      	;name and type are changed, but the reel number 
                         C      	;is ignored.  the user number is identical 
  CC16    CD C954        C      	call	check_write	;may be write protected 
                         C      	;search up to the extent field 
  CC19    0E 0C          C      	mvi	c,extnum 
  CC1B    CD CB18        C      	call	search 
                         C      	;copy position 0 
  CC1E    2A C743        C      	lhld	info		;HL=.fcb(0), A=fcb(0) 
  CC21    7E             C      	mov	a,m 
  CC22    11 0010        C      	lxi	d,dskmap	;HL=.fcb(dskmap) 
  CC25    19             C      	dad	d 
  CC26    77             C      	mov	m,a		;fcb(dskmap)=fcb(0) 
                         C      	;assume the same disk drive for new named file 
  CC27                   C      rename0: 
  CC27    CD C9F5        C      	call	end_of_dir	;stop at end of dir 
  CC2A    C8             C      	rz 
                         C      	;not end of directory, rename next element 
  CC2B    CD C944        C      	call	check_rodir	;may be read-only file 
  CC2E    0E 10          C      	mvi	c,dskmap 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-63


  CC30    1E 0C          C      	mvi	e,extnum 
  CC32    CD CC01        C      	call	copy_dir 
                         C      	;element renamed, move to next 
  CC35    CD CB2D        C      	call	searchn 
  CC38    C3 CC27        C      	jmp	rename0 
                         C       
  CC3B                   C      indicators: 
                         C      	;set file indicators for current fcb 
  CC3B    0E 0C          C      	mvi	c,extnum	;through file type 
  CC3D    CD CB18        C      	call	search 
  CC40                   C      indic0: 
  CC40    CD C9F5        C      	call	end_of_dir	;stop at end of dir 
  CC43    C8             C      	rz 
                         C      	;not end of directory, continue to change 
  CC44    0E 00          C      	mvi	c,0		;copy name 
  CC46    1E 0C          C      	mvi	e,extnum 
  CC48    CD CC01        C      	call	copy_dir 
  CC4B    CD CB2D        C      	call	searchn 
  CC4E    C3 CC40        C      	jmp	indic0 
                         C       
  CC51                   C      open: 
                         C      	;search for the directory entry, copy to fcb 
  CC51    0E 0F          C      	mvi	c,namlen 
  CC53    CD CB18        C      	call	search 
  CC56    CD C9F5        C      	call	end_of_dir	;return with lret=255 if end 
  CC59    C8             C      	rz 
                         C      	;not end of directory, copy fcb information 
  CC5A                   C      open_copy: 
                         C      	;(referenced below to copy fcb info) 
  CC5A    CD C8A6        C      	call	getexta		;save extent# 
  CC5D    7E             C      	mov	a,m 
  CC5E    F5             C      	push	psw 
  CC5F    E5             C      	push	h 
  CC60    CD C95E        C      	call	getdptra	;DE = .buff(dptr) 
  CC63    EB             C      	xchg 
  CC64    2A C743        C      	lhld	info		;HL=.fcb(0) 
  CC67    0E 20          C      	mvi	c,nxtrec	;length of move operation 
  CC69    D5             C      	push	d		;save .buff(dptr) 
  CC6A    CD C74F        C      	call	move		;from .buff(dptr) to .fcb(0) 
                         C      	;note that entire fcb is copied, including indicators 
  CC6D    CD C978        C      	call	setfwf		;sets file write flag 
  CC70    D1             C      	pop	d		;HL=.buff(dptr+extnum) 
  CC71    21 000C        C      	lxi	h,extnum 
  CC74    19             C      	dad	d 
  CC75    4E             C      	mov	c,m		;C = directory extent number 
  CC76    21 000F        C      	lxi	h,reccnt	;HL=.buff(dptr+reccnt) 
  CC79    19             C      	dad	d 
  CC7A    46             C      	mov	b,m		;B holds directory record count 
  CC7B    E1             C      	pop	h		;restore extent number 
  CC7C    F1             C      	pop	psw 
  CC7D    77             C      	mov	m,a 
                         C      	;HL = .user extent#, B = dir rec cnt, C = dir extent# 
                         C      	;if user ext < dir ext then user := 128 records 
                         C      	;if user ext = dir ext then user := dir records 
                         C      	;if user ext > dir ext then user := 0 records 
  CC7E    79             C      	mov	a,c		;ready dir reccnt 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-64


  CC7F    BE             C      	cmp	m 
  CC80    78             C      	mov	a,b 
  CC81    CA CC8B        C      	jz	open_rcnt	;if same, user gets dir reccnt 
  CC84    3E 00          C      	mvi	a,0		;user is larger 
  CC86    DA CC8B        C      	jc	open_rcnt 
  CC89    3E 80          C      	mvi	a,128		;directory is larger 
  CC8B                   C      open_rcnt: ;A has record count to fill 
  CC8B    2A C743        C      	lhld	info 
  CC8E    11 000F        C      	lxi	d,reccnt 
  CC91    19             C      	dad	d 
  CC92    77             C      	mov	m,a 
  CC93    C9             C      	ret 
                         C       
  CC94                   C      mergezero: 
                         C      	;HL = .fcb1(i), DE = .fcb2(i), 
                         C      	;if fcb1(i) = 0 then fcb1(i) := fcb2(i) 
  CC94    7E             C      	mov	a,m		;return if = 0000 
  CC95    23             C      	inx	h 
  CC96    B6             C      	ora	m 
  CC97    2B             C      	dcx	h 
  CC98    C0             C      	rnz 
  CC99    1A             C      	ldax	d		;low byte copied 
  CC9A    77             C      	mov	m,a 
  CC9B    13             C      	inx	d 
  CC9C    23             C      	inx	h 
  CC9D    1A             C      	ldax	d		;back to input form 
  CC9E    77             C      	mov	m,a 
  CC9F    1B             C      	dcx	d 
  CCA0    2B             C      	dcx	h 
  CCA1    C9             C      	ret 
                         C       
  CCA2                   C      close: 
                         C      	;locate the directory element and re-write it 
  CCA2    AF             C      	xra	a 
  CCA3    32 C745        C      	sta	lret 
  CCA6    32 D1EA        C      	sta	dcnt 
  CCA9    32 D1EB        C      	sta	dcnt+1 
  CCAC    CD C91E        C      	call	nowrite		;skip close if r/o disk 
  CCAF    C0             C      	rnz 
                         C      	;check file write flag - 0 indicates written 
  CCB0    CD C969        C      	call	getmodnum	;fcb(modnum) in A 
  CCB3    E6 80          C      	ani	fwfmsk		;return if bit remains set 
  CCB5    C0             C      	rnz 
  CCB6    0E 0F          C      	mvi	c,namlen	;locate file 
  CCB8    CD CB18        C      	call	search 
  CCBB    CD C9F5        C      	call	end_of_dir	;return if not found 
  CCBE    C8             C      	rz 
                         C      	;merge the disk map at info with that at buff(dptr) 
  CCBF    01 0010        C      	lxi	b,dskmap 
  CCC2    CD C95E        C      	call	getdptra 
  CCC5    09             C      	dad	b		;DE is .buff(dptr+16) 
  CCC6    EB             C      	xchg 
  CCC7    2A C743        C      	lhld	info		;DE=.buff(dptr+16), HL=.fcb(16) 
  CCCA    09             C      	dad	b 
  CCCB    0E 10          C      	mvi	c,(fcblen-dskmap)	;length of single byte dm 
  CCCD                   C      merge0: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-65


  CCCD    3A D1DD        C      	lda	single		;skip to double 
  CCD0    B7             C      	ora	a 
  CCD1    CA CCE8        C      	jz	merged 
                         C      	;this is a single byte map 
                         C      	;if fcb(i) = 0 then fcb(i) = buff(i) 
                         C      	;if buff(i) = 0 then buff(i) = fcb(i) 
                         C      	;if fcb(i) <> buff(i) then error 
  CCD4    7E             C      	mov	a,m 
  CCD5    B7             C      	ora	a 
  CCD6    1A             C      	ldax	d 
  CCD7    C2 CCDB        C      	jnz	fcbnzero 
                         C      	;fcb(i) = 0 
  CCDA    77             C      	mov	m,a		;fcb(i) = buff(i) 
  CCDB                   C      fcbnzero: 
  CCDB    B7             C      	ora	a 
  CCDC    C2 CCE1        C      	jnz	buffnzero 
                         C      	;buff(i) = 0 
  CCDF    7E             C      	mov	a,m		;buff(i)=fcb(i) 
  CCE0    12             C      	stax	d 
  CCE1                   C      buffnzero: 
  CCE1    BE             C      	cmp	m		;fcb(i) = buff(i)? 
  CCE2    C2 CD1F        C      	jnz	mergerr 
  CCE5    C3 CCFD        C      	jmp	dmset		;if merge ok 
  CCE8                   C      merged: 
                         C      	;this is a double byte merge operation 
  CCE8    CD CC94        C      	call	mergezero	;buff = fcb if buff 0000 
  CCEB    EB             C      	xchg			;fcb = buff if fcb 0000 
  CCEC    CD CC94        C      	call	mergezero 
  CCEF    EB             C      	xchg 
                         C      	;they should be identical at this point 
  CCF0    1A             C      	ldax	d		;low same? 
  CCF1    BE             C      	cmp	m 
  CCF2    C2 CD1F        C      	jnz	mergerr 
  CCF5    13             C      	inx	d		;to high byte 
  CCF6    23             C      	inx	h 
  CCF7    1A             C      	ldax	d		;high same? 
  CCF8    BE             C      	cmp	m 
  CCF9    C2 CD1F        C      	jnz	mergerr 
                         C      	;merge operation ok for this pair 
  CCFC    0D             C      	dcr	c		;extra count for double byte 
  CCFD                   C      dmset: 
  CCFD    13             C      	inx	d		;to next byte position 
  CCFE    23             C      	inx	h 
  CCFF    0D             C      	dcr	c		;for more 
  CD00    C2 CCCD        C      	jnz	merge0 
                         C      	;end of disk map merge, check record count 
                         C      	;DE = .buff(dptr)+32, HL = .fcb(32) 
  CD03    01 FFEC        C      	lxi	b,-(fcblen-extnum) 
  CD06    09             C      	dad	b 
  CD07    EB             C      	xchg 
  CD08    09             C      	dad	b 
                         C      	;DE = .fcb(extnum), HL = .buff(dptr+extnum) 
  CD09    1A             C      	ldax	d		;current user extent number 
                         C      	;if fcb(ext) >= buff(fcb) then 
                         C      	;buff(ext) := fcb(ext), buff(rec) := fcb(rec) 
  CD0A    BE             C      	cmp	m 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-66


  CD0B    DA CD17        C      	jc	endmerge 
                         C      	;fcb extent number >= dir extent number 
  CD0E    77             C      	mov	m,a		;buff(ext) = fcb(ext) 
                         C      	;update directory record count field 
  CD0F    01 0003        C      	lxi	b,(reccnt-extnum) 
  CD12    09             C      	dad	b 
  CD13    EB             C      	xchg 
  CD14    09             C      	dad	b 
                         C      	;DE=.buff(reccnt), HL=.fcb(reccnt) 
  CD15    7E             C      	mov	a,m		;buff(reccnt)=fcb(reccnt) 
  CD16    12             C      	stax	d 
  CD17                   C      endmerge: 
  CD17    3E FF          C      	mvi	a,_true		;mark as copied 
  CD19    32 D1D2        C      	sta	fcb_copied 
  CD1C    C3 CC10        C      	jmp	seek_copy	;ok to "wrdir" here - 1.4 compat 
                         C      	;		ret 
  CD1F                   C      mergerr: 
                         C      	;elements did not merge correctly 
  CD1F    21 C745        C      	lxi	h,lret		;=255 non zero flag set 
  CD22    35             C      	dcr	m 
  CD23    C9             C      	ret 
                         C       
  CD24                   C      make: 
                         C      	;create a new file by creating a directory entry 
                         C      	;then opening the file 
  CD24    CD C954        C      	call	check_write	;may be write protected 
  CD27    2A C743        C      	lhld	info		;save fcb address, look for e5 
  CD2A    E5             C      	push	h 
  CD2B    21 D1AC        C      	lxi	h,efcb		;info = .empty 
  CD2E    22 C743        C      	shld	info 
  CD31    0E 01          C      	mvi	c,1		;length 1 match on empty entry 
  CD33    CD CB18        C      	call	search 
  CD36    CD C9F5        C      	call	end_of_dir	;zero flag set if no space 
  CD39    E1             C      	pop	h		;recall info address 
  CD3A    22 C743        C      	shld	info		;in case we return here 
  CD3D    C8             C      	rz			;return with error condition 255 if not found 
  CD3E    EB             C      	xchg			;DE = info address 
                         C      	;clear the remainder of the fcb 
  CD3F    21 000F        C      	lxi	h,namlen	;HL=.fcb(namlen) 
  CD42    19             C      	dad	d 
  CD43    0E 11          C      	mvi	c,fcblen-namlen	;number of bytes to fill 
  CD45    AF             C      	xra	a		;clear accumulator to 00 for fill 
  CD46                   C      make0: 
  CD46    77             C      	mov	m,a 
  CD47    23             C      	inx	h 
  CD48    0D             C      	dcr	c 
  CD49    C2 CD46        C      	jnz	make0 
  CD4C    21 000D        C      	lxi	h,ubytes	;HL = .fcb(ubytes) 
  CD4F    19             C      	dad	d 
  CD50    77             C      	mov	m,a		;fcb(ubytes) = 0 
  CD51    CD C98C        C      	call	setcdr		;may have extended the directory 
                         C      	;now copy entry to the directory 
  CD54    CD CBFD        C      	call	copy_fcb 
                         C      	;and set the file write flag to "1" 
  CD57    C3 C978        C      	jmp	setfwf 
                         C      	;ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-67


                         C       
  CD5A                   C      open_reel: 
                         C      	;close the current extent, and open the next one 
                         C      	;if possible.  RMF is true if in read mode 
  CD5A    AF             C      	xra	a		;set true if actually copied 
  CD5B    32 D1D2        C      	sta	fcb_copied 
  CD5E    CD CCA2        C      	call	close		;close current extent 
                         C      	;lret remains at enddir if we cannot open the next ext 
  CD61    CD C9F5        C      	call	end_of_dir	;return if end 
  CD64    C8             C      	rz 
                         C      	;increment extent number 
  CD65    2A C743        C      	lhld	info		;HL=.fcb(extnum) 
  CD68    01 000C        C      	lxi	b,extnum 
  CD6B    09             C      	dad	b 
  CD6C    7E             C      	mov	a,m		;fcb(extnum)=++1 
  CD6D    3C             C      	inr	a 
  CD6E    E6 1F          C      	ani	maxext 
  CD70    77             C      	mov	m,a 
  CD71    CA CD83        C      	jz	open_mod	;move to next module if zero 
                         C      	;may be in the same extent group 
  CD74    47             C      	mov	b,a 
  CD75    3A D1C5        C      	lda	extmsk 
  CD78    A0             C      	ana	b 
                         C      	;if result is zero, then not in the same group 
  CD79    21 D1D2        C      	lxi	h,fcb_copied	;true if the fcb was copied to directory 
  CD7C    A6             C      	ana	m		;produces a 00 in accumulator if not written 
  CD7D    CA CD8E        C      	jz	open_reel0	;go to next physical extent 
                         C      	;result is non zero, so we must be in same logical ext 
  CD80    C3 CDAC        C      	jmp	open_reel1	;to copy fcb information 
  CD83                   C      open_mod: 
                         C      	;extent number overflow, go to next module 
  CD83    01 0002        C      	lxi	b,(modnum-extnum)	;HL=.fcb(modnum) 
  CD86    09             C      	dad	b 
  CD87    34             C      	inr	m		;fcb(modnum)=++1 
                         C      	;module number incremented, check for overflow 
  CD88    7E             C      	mov	a,m		;mask high order bits 
  CD89    E6 0F          C      	ani	maxmod 
  CD8B    CA CDB6        C      	jz	open_r_err	;cannot overflow to zero 
                         C      	;otherwise, ok to continue with new module 
  CD8E                   C      open_reel0: 
  CD8E    0E 0F          C      	mvi	c,namlen	;next extent found? 
  CD90    CD CB18        C      	call	search 
  CD93    CD C9F5        C      	call	end_of_dir 
  CD96    C2 CDAC        C      	jnz	open_reel1 
                         C      	;end of file encountered 
  CD99    3A D1D3        C      	lda	rmf		;0ffh becomes 00 if read 
  CD9C    3C             C      	inr	a 
  CD9D    CA CDB6        C      	jz	open_r_err	;sets lret = 1 
                         C      	;try to extend the current file 
  CDA0    CD CD24        C      	call	make 
                         C      	;cannot be end of directory 
  CDA3    CD C9F5        C      	call	end_of_dir 
  CDA6    CA CDB6        C      	jz	open_r_err	;with lret = 1 
  CDA9    C3 CDAF        C      	jmp	open_reel2 
  CDAC                   C      open_reel1: 
                         C      	;not end of file, open 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-68


  CDAC    CD CC5A        C      	call	open_copy 
  CDAF                   C      open_reel2: 
  CDAF    CD C8BB        C      	call	getfcb		;set parameters 
  CDB2    AF             C      	xra	a		;lret = 0 
  CDB3    C3 C701        C      	jmp	sta_ret 
                         C      ;	ret ;with lret = 0 
  CDB6                   C      open_r_err: 
                         C      	;cannot move to next extent of this file 
  CDB6    CD C705        C      	call	setlret1	;lret = 1 
  CDB9    C3 C978        C      	jmp	setfwf		;ensure that it will not be closed 
                         C      	;ret 
                         C       
  CDBC                   C      seqdiskread: 
                         C      	;sequential disk read operation 
  CDBC    3E 01          C      	mvi	a,1 
  CDBE    32 D1D5        C      	sta	seqio 
                         C      	;drop through to diskread 
                         C       
  CDC1                   C      diskread:	;(may enter from seqdiskread) 
  CDC1    3E FF          C      	mvi	a,_true		;read mode flag = true (open_reel) 
  CDC3    32 D1D3        C      	sta	rmf 
                         C      	;read the next record from the current fcb 
  CDC6    CD C8BB        C      	call	getfcb		;sets parameters for the read 
  CDC9    3A D1E3        C      	lda	vrecord		;vrecord-rcount 
  CDCC    21 D1E1        C      	lxi	h,rcount 
  CDCF    BE             C      	cmp	m 
                         C      	;skip if rcount > vrecord 
  CDD0    DA CDE6        C      	jc	recordok 
                         C      	;not enough records in the extent 
                         C      	;record count must be 128 to continue 
  CDD3    FE 80          C      	cpi	128		;vrecord = 128? 
  CDD5    C2 CDFB        C      	jnz	diskeof		;skip if vrecord<>128 
  CDD8    CD CD5A        C      	call	open_reel	;go to next extent if so 
  CDDB    AF             C      	xra	a		;vrecord=00 
  CDDC    32 D1E3        C      	sta	vrecord 
                         C      	;now check for open ok 
  CDDF    3A C745        C      	lda	lret		;stop at eof 
  CDE2    B7             C      	ora	a 
  CDE3    C2 CDFB        C      	jnz	diskeof 
  CDE6                   C      recordok: 
                         C      	;arrive with fcb addressing a record to read 
  CDE6    CD C877        C      	call	index 
                         C      	;error 2 if reading unwritten data 
                         C      	;(returns 1 to be compatible with 1.4) 
  CDE9    CD C884        C      	call	allocated	;arecord=0000? 
  CDEC    CA CDFB        C      	jz	diskeof 
                         C      	;record has been allocated, read it 
  CDEF    CD C88A        C      	call	atran		;arecord now a disk address 
  CDF2    CD C7D1        C      	call	seek		;to proper track,sector 
  CDF5    CD C7B2        C      	call	rdbuff		;to dma address 
  CDF8    C3 C8D2        C      	jmp	setfcb		;replace parameter	 
                         C      ;		ret 
  CDFB                   C      diskeof: 
  CDFB    C3 C705        C      	jmp	setlret1	;lret = 1 
                         C      	;ret 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-69


  CDFE                   C      seqdiskwrite: 
                         C      	;sequential disk write 
  CDFE    3E 01          C      	mvi	a,1 
  CE00    32 D1D5        C      	sta	seqio 
                         C      	;drop through to diskwrite 
                         C       
  CE03                   C      diskwrite:	;(may enter here from seqdiskwrite above) 
  CE03    3E 00          C      	mvi	a,_false	;read mode flag 
  CE05    32 D1D3        C      	sta	rmf 
                         C      	;write record to currently selected file 
  CE08    CD C954        C      	call	check_write	;in case write protected 
  CE0B    2A C743        C      	lhld	info		;HL = .fcb(0) 
  CE0E    CD C947        C      	call	check_rofile	;may be a read-only file 
  CE11    CD C8BB        C      	call	getfcb		;to set local parameters 
  CE14    3A D1E3        C      	lda	vrecord		;vrecord-128 
  CE17    FE 80          C      	cpi	lstrec+1 
                         C      	;skip if vrecord > lstrec 
                         C      	;vrecord = 128, cannot open next extent 
  CE19    D2 C705        C      	jnc	setlret1	;lret=1 
  CE1C                   C      diskwr0: 
                         C      	;can write the next record, so continue 
  CE1C    CD C877        C      	call	index 
  CE1F    CD C884        C      	call	allocated 
  CE22    0E 00          C      	mvi	c,0		;marked as normal write operation for wrbuff 
  CE24    C2 CE6E        C      	jnz	diskwr1 
                         C      	;not allocated 
                         C      	;the argument to getblock is the starting 
                         C      	;position for the disk search, and should be 
                         C      	;the last allocated block for this file, or 
                         C      	;the value 0 if no space has been allocated 
  CE27    CD C83E        C      	call	dm_position 
  CE2A    32 D1D7        C      	sta	dminx		;save for later 
  CE2D    01 0000        C      	lxi	b,0000h		;may use block zero 
  CE30    B7             C      	ora	a		;skip if no previous block 
  CE31    CA CE3B        C      	jz	nopblock 
                         C      	;previous block exists at A 
  CE34    4F             C      	mov	c,a		;previous block # in BC 
  CE35    0B             C      	dcx	b 
  CE36    CD C85E        C      	call	getdm		;previous block # to HL 
  CE39    44             C      	mov	b,h		;BC=prev block# 
  CE3A    4D             C      	mov	c,l 
  CE3B                   C      nopblock: 
                         C      	;BC = 0000, or previous block # 
  CE3B    CD CBBE        C      	call	get_block	;block # to HL 
                         C      	;arrive here with block# or zero 
  CE3E    7D             C      	mov	a,l 
  CE3F    B4             C      	ora	h 
  CE40    C2 CE48        C      	jnz	blockok 
                         C      	;cannot find a block to allocate 
  CE43    3E 02          C      	mvi	a,2	 	;lret=2 
  CE45    C3 C701        C      	jmp	sta_ret 
  CE48                   C      blockok: 
                         C      	;allocated block number is in HL 
  CE48    22 D1E5        C      	shld	arecord 
  CE4B    EB             C      	xchg			;block number to DE 
  CE4C    2A C743        C      	lhld	info		;HL=.fcb(dskmap) 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-70


  CE4F    01 0010        C      	lxi	b,dskmap 
  CE52    09             C      	dad	b 
  CE53    3A D1DD        C      	lda	single		;set flags for single byte dm 
  CE56    B7             C      	ora	a 
  CE57    3A D1D7        C      	lda	dminx		;recall dm index 
  CE5A    CA CE64        C      	jz	allocwd		;skip if allocating word 
                         C      	;allocating a byte value 
  CE5D    CD C964        C      	call	addh		;single byte alloc 
  CE60    73             C      	mov	m,e 
  CE61    C3 CE6C        C      	jmp	diskwru		;to continue 
  CE64                   C      allocwd: 
                         C      	;allocate a word value 
  CE64    4F             C      	mov	c,a		;double(dminx) 
  CE65    06 00          C      	mvi	b,0 
  CE67    09             C      	dad	b		;HL=.fcb(dminx*2) 
  CE68    09             C      	dad	b 
  CE69    73             C      	mov	m,e		;double wd 
  CE6A    23             C      	inx	h 
  CE6B    72             C      	mov	m,d 
  CE6C                   C      diskwru: 
                         C      	;disk write to previously unallocated block 
  CE6C    0E 02          C      	mvi	c,2		;marked as unallocated write 
  CE6E                   C      diskwr1: 
                         C      	;continue the write operation of no allocation error 
                         C      	;C = 0 if normal write, 2 if to prev unalloc block 
  CE6E    3A C745        C      	lda	lret		;stop if non zero returned value 
  CE71    B7             C      	ora	a 
  CE72    C0             C      	rnz 
  CE73    C5             C      	push	b		;save write flag 
  CE74    CD C88A        C      	call	atran		;arecord set 
  CE77    3A D1D5        C      	lda	seqio 
  CE7A    3D             C      	dcr	a 
  CE7B    3D             C      	dcr	a 
  CE7C    C2 CEBB        C      	jnz	diskwr11 
  CE7F    C1             C      	pop	b 
  CE80    C5             C      	push	b 
  CE81    79             C      	mov	a,c 
  CE82    3D             C      	dcr	a 
  CE83    3D             C      	dcr	a 
  CE84    C2 CEBB        C      	jnz	diskwr11	;old allocation   
  CE87    E5             C      	push	h		;arecord in hl ret from atran 
  CE88    2A D1B9        C      	lhld	buffa		;zero buffa & fill 
  CE8B    57             C      	mov	d,a 
  CE8C    77             C      fill0:  mov	m,a 
  CE8D    23             C      	inx	h 
  CE8E    14             C      	inr	d 
  CE8F    F2 CE8C        C      	jp	fill0 
  CE92    CD C9E0        C      	call	setdir 
  CE95    2A D1E7        C      	lhld	arecord1 
  CE98    0E 02          C      	mvi	c,2 
  CE9A    22 D1E5        C      fill1:  shld	arecord 
  CE9D    C5             C      	push	b 
  CE9E    CD C7D1        C      	call	seek 
  CEA1    C1             C      	pop	b 
  CEA2    CD C7B8        C      	call	wrbuff		;write fill record 
  CEA5    2A D1E5        C      	lhld	arecord		;restore last record      
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-71


  CEA8    0E 00          C      	mvi	c,0		;change  allocate flag    
  CEAA    3A D1C4        C      	lda	blkmsk 
  CEAD    47             C      	mov	b,a 
  CEAE    A5             C      	ana	l 
  CEAF    B8             C      	cmp	b 
  CEB0    23             C      	inx	h 
  CEB1    C2 CE9A        C      	jnz	fill1		;cont until cluster is zeroed 
  CEB4    E1             C      	pop	h 
  CEB5    22 D1E5        C      	shld	arecord 
  CEB8    CD C9DA        C      	call	setdata 
  CEBB                   C      diskwr11: 
  CEBB    CD C7D1        C      	call seek ;to proper file position 
  CEBE    C1             C      	pop	b		;restore/save write flag (C=2 if new block) 
  CEBF    C5             C      	push	b 
  CEC0    CD C7B8        C      	call	wrbuff		;written to disk 
  CEC3    C1             C      	pop	b		;C = 2 if a new block was allocated, 0 if not 
                         C      	;increment record count if rcount<=vrecord 
  CEC4    3A D1E3        C      	lda	vrecord		;vrecord-rcount 
  CEC7    21 D1E1        C      	lxi	h,rcount 
  CECA    BE             C      	cmp	m 
  CECB    DA CED2        C      	jc	diskwr2 
                         C      	;rcount <= vrecord 
  CECE    77             C      	mov	m,a		;rcount = vrecord+1 
  CECF    34             C      	inr	m 
  CED0    0E 02          C      	mvi	c,2		;mark as record count incremented 
  CED2                   C      diskwr2: 
                         C      	if	patch1 
                         C      	; CP/M V2.2 patch 1 for use of optional blocking/deblocking 
  CED2    00             C      	nop 
  CED3    00             C      	nop 
  CED4    21 0000        C      	lxi	h,0 
                         C      	else 
                         C      	; original code 
                         C      	;A has vrecord, C=2 if new block or new record# 
                         C      	dcr	c 
                         C      	dcr	c 
                         C      	jnz	noupdate 
                         C      	endif 
  CED7    F5             C      	push	psw		;save vrecord value 
  CED8    CD C969        C      	call	getmodnum	;HL=.fcb(modnum), A=fcb(modnum) 
                         C      	;reset the file write flag to mark as written fcb 
  CEDB    E6 7F          C      	ani	(NOT fwfmsk) AND 0ffh	;bit reset 
  CEDD    77             C      	mov	m,a		;fcb(modnum) = fcb(modnum) and 7fh 
  CEDE    F1             C      	pop	psw		;restore vrecord 
  CEDF                   C      noupdate: 
                         C      	;check for end of extent, if found attempt to open 
                         C      	;next extent in preparation for next write 
  CEDF    FE 7F          C      	cpi	lstrec		;vrecord=lstrec? 
  CEE1    C2 CF00        C      	jnz	diskwr3		;skip if not 
                         C      	;may be random access write, if so we are done 
                         C      	;change next      
  CEE4    3A D1D5        C      	lda	seqio		;skip next extent open op 
  CEE7    FE 01          C      	cpi	1 
  CEE9    C2 CF00        C      	jnz	diskwr3 
                         C      	;update current fcb before going to next extent 
  CEEC    CD C8D2        C      	call	setfcb 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-72


  CEEF    CD CD5A        C      	call	open_reel	;rmf=false 
                         C      	;vrecord remains at lstrec causing eof if 
                         C      	;no more directory space is available 
  CEF2    21 C745        C      	lxi	h,lret 
  CEF5    7E             C      	mov	a,m 
  CEF6    B7             C      	ora	a 
  CEF7    C2 CEFE        C      	jnz	nospace 
                         C      	;space available, set vrecord=255 
  CEFA    3D             C      	dcr	a		;goes to 00 next time 
  CEFB    32 D1E3        C      	sta	vrecord 
  CEFE                   C      nospace: 
  CEFE    36 00          C      	mvi	m,0		;lret = 00 for returned value 
  CF00                   C      diskwr3: 
  CF00    C3 C8D2        C      	jmp	setfcb ;replace parameters 
                         C      	;ret 
                         C       
  CF03                   C      rseek: 
                         C      	;random access seek operation, C=0ffh if read mode 
                         C      	;fcb is assumed to address an active file control block 
                         C      	;(modnum has been set to 1100_0000b if previous bad seek) 
  CF03    AF             C      	xra	a		;marked as random access operation 
  CF04    32 D1D5        C      	sta	seqio 
  CF07                   C      rseek1: 
  CF07    C5             C      	push	b		;save r/w flag 
  CF08    2A C743        C      	lhld	info		;DE will hold base of fcb 
  CF0B    EB             C      	xchg 
  CF0C    21 0021        C      	lxi	h,ranrec	;HL=.fcb(ranrec) 
  CF0F    19             C      	dad	d 
  CF10    7E             C      	mov	a,m		;record number 
  CF11    E6 7F          C      	ani	7fh 
  CF13    F5             C      	push	psw 
  CF14    7E             C      	mov	a,m		;cy=lsb of extent# 
  CF15    17             C      	ral 
  CF16    23             C      	inx	h		;A=ext# 
  CF17    7E             C      	mov	a,m 
  CF18    17             C      	ral 
  CF19    E6 1F          C      	ani	11111b 
  CF1B    4F             C      	mov	c,a		;C holds extent number, record stacked 
  CF1C    7E             C      	mov	a,m		;mod# 
  CF1D    1F             C      	rar 
  CF1E    1F             C      	rar 
  CF1F    1F             C      	rar 
  CF20    1F             C      	rar 
  CF21    E6 0F          C      	ani	1111b 
  CF23    47             C      	mov	b,a		;B holds module#, C holds ext# 
  CF24    F1             C      	pop	psw		;recall sought record # 
                         C      	;check to insure that high byte of ran rec = 00 
  CF25    23             C      	inx	h		;l=high byte (must be 00) 
  CF26    6E             C      	mov	l,m 
  CF27    2C             C      	inr	l		;zero flag, l=6 
  CF28    2D             C      	dcr	l 
  CF29    2E 06          C      	mvi	l,6 
                         C      	;produce error 6, seek past physical eod 
  CF2B    C2 CF8B        C      	jnz	seekerr 
                         C      	;otherwise, high byte = 0, A = sought record 
  CF2E    21 0020        C      	lxi	h,nxtrec	;HL = .fcb(nxtrec) 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-73


  CF31    19             C      	dad	d 
  CF32    77             C      	mov	m,a		;sought rec# stored away 
                         C      	;arrive here with B=mod#, C=ext#, DE=.fcb, rec stored 
                         C      	;the r/w flag is still stacked.  compare fcb values 
  CF33    21 000C        C      	lxi	h,extnum	;A=seek ext# 
  CF36    19             C      	dad	d 
  CF37    79             C      	mov	a,c 
  CF38    96             C      	sub	m		;tests for = extents 
  CF39    C2 CF47        C      	jnz	ranclose 
                         C      	;extents match, check mod# 
  CF3C    21 000E        C      	lxi	h,modnum	;B=seek mod# 
  CF3F    19             C      	dad	d 
  CF40    78             C      	mov	a,b 
                         C      	;could be overflow at eof, producing module# 
                         C      	;of 90H or 10H, so compare all but fwf 
  CF41    96             C      	sub	m		;same? 
  CF42    E6 7F          C      	ani	7fh 
  CF44    CA CF7F        C      	jz	seekok 
  CF47                   C      ranclose: 
  CF47    C5             C      	push	b		;save seek mod#,ext#, .fcb 
  CF48    D5             C      	push	d 
  CF49    CD CCA2        C      	call	close		;current extent closed 
  CF4C    D1             C      	pop	d		;recall parameters and fill 
  CF4D    C1             C      	pop	b 
  CF4E    2E 03          C      	mvi	l,3		;cannot close error #3 
  CF50    3A C745        C      	lda	lret 
  CF53    3C             C      	inr	a 
  CF54    CA CF84        C      	jz	badseek 
  CF57    21 000C        C      	lxi	h,extnum	;fcb(extnum)=ext# 
  CF5A    19             C      	dad	d 
  CF5B    71             C      	mov	m,c 
  CF5C    21 000E        C      	lxi	h,modnum	;fcb(modnum)=mod# 
  CF5F    19             C      	dad	d 
  CF60    70             C      	mov	m,b 
  CF61    CD CC51        C      	call	open		;is the file present? 
  CF64    3A C745        C      	lda	lret		;open successful? 
  CF67    3C             C      	inr	a 
  CF68    C2 CF7F        C      	jnz	seekok 
                         C      	;cannot open the file, read mode? 
  CF6B    C1             C      	pop	b		;r/w flag to c (=0ffh if read) 
  CF6C    C5             C      	push	b		;everyone expects this item stacked 
  CF6D    2E 04          C      	mvi	l,4		;seek to unwritten extent #4 
  CF6F    0C             C      	inr	c		;becomes 00 if read operation 
  CF70    CA CF84        C      	jz	badseek		;skip to error if read operation 
                         C      	;write operation, make new extent 
  CF73    CD CD24        C      	call	make 
  CF76    2E 05          C      	mvi	l,5		 ;cannot create new extent #5 
  CF78    3A C745        C      	lda	lret		;no dir space 
  CF7B    3C             C      	inr	a 
  CF7C    CA CF84        C      	jz	badseek 
                         C      	;file make operation successful 
  CF7F                   C      seekok: 
  CF7F    C1             C      	pop	b		;discard r/w flag 
  CF80    AF             C      	xra	a		;with zero set 
  CF81    C3 C701        C      	jmp	sta_ret 
  CF84                   C      badseek: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-74


                         C      	;fcb no longer contains a valid fcb, mark 
                         C      	;with 1100_000b in modnum field so that it 
                         C      	;appears as overflow with file write flag set 
  CF84    E5             C      	push	h		;save error flag 
  CF85    CD C969        C      	call	getmodnum	;HL = .modnum 
  CF88    36 C0          C      	mvi	m,11000000b 
  CF8A    E1             C      	pop	h		;and drop through 
  CF8B                   C      seekerr: 
  CF8B    C1             C      	pop	b		;discard r/w flag 
  CF8C    7D             C      	mov	a,l		;lret=#, nonzero 
  CF8D    32 C745        C      	sta	lret 
                         C      	;setfwf returns non-zero accumulator for err 
  CF90    C3 C978        C      	jmp	setfwf		;flag set, so subsequent close ok 
                         C      	;ret 
                         C       
  CF93                   C      randiskread: 
                         C      	;random disk read operation 
  CF93    0E FF          C      	mvi	c,_true		;marked as read operation 
  CF95    CD CF03        C      	call	rseek 
  CF98    CC CDC1        C      	cz	diskread	;if seek successful 
  CF9B    C9             C      	ret 
                         C       
  CF9C                   C      randiskwrite: 
                         C      	;random disk write operation 
  CF9C    0E 00          C      	mvi	c,_false	;marked as write operation 
  CF9E    CD CF03        C      	call	rseek 
  CFA1    CC CE03        C      	cz	diskwrite	;if seek successful 
  CFA4    C9             C      	ret 
                         C       
  CFA5                   C      compute_rr: 
                         C      	;compute random record position for getfilesize/setrandom 
  CFA5    EB             C      	xchg 
  CFA6    19             C      	dad	d 
                         C      	;DE=.buf(dptr) or .fcb(0), HL = .f(nxtrec/reccnt) 
  CFA7    4E             C      	mov	c,m		;BC = 0000 0000 ?rrr rrrr 
  CFA8    06 00          C      	mvi	b,0 
  CFAA    21 000C        C      	lxi	h,extnum	;A=e000 0000 
  CFAD    19             C      	dad	d 
  CFAE    7E             C      	mov	a,m 
  CFAF    0F             C      	rrc 
  CFB0    E6 80          C      	ani	80h 
  CFB2    81             C      	add	c 
  CFB3    4F             C      	mov	c,a 
  CFB4    3E 00          C      	mvi	a,0 
  CFB6    88             C      	adc	b 
  CFB7    47             C      	mov	b,a 
                         C      	;BC = 0000 000? errrr rrrr 
  CFB8    7E             C      	mov	a,m 
  CFB9    0F             C      	rrc 
  CFBA    E6 0F          C      	ani	0fh 
  CFBC    80             C      	add	b 
  CFBD    47             C      	mov	b,a 
                         C      	;BC = 000? eeee errrr rrrr 
  CFBE    21 000E        C      	lxi	h,modnum	;A=XXX? mmmm 
  CFC1    19             C      	dad	d 
  CFC2    7E             C      	mov	a,m 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-75


  CFC3    87             C      	add	a		;cy=? A=mmmm 0000 
  CFC4    87             C      	add	a 
  CFC5    87             C      	add	a 
  CFC6    87             C      	add	a 
  CFC7    F5             C      	push	psw 
  CFC8    80             C      	add	b 
  CFC9    47             C      	mov	b,a 
                         C      	;cy=?, BC = mmmm eeee errr rrrr 
  CFCA    F5             C      	push	psw		;possible second carry 
  CFCB    E1             C      	pop	h		;cy = lsb of L 
  CFCC    7D             C      	mov	a,l		;cy = lsb of A 
  CFCD    E1             C      	pop	h		;cy = lsb of L 
  CFCE    B5             C      	ora	l		;cy/cy = lsb of A 
  CFCF    E6 01          C      	ani	1		;A = 0000 000? possible carry-out 
  CFD1    C9             C      	ret 
                         C       
  CFD2                   C      getfilesize: 
                         C      	;compute logical file size for current fcb 
  CFD2    0E 0C          C      	mvi	c,extnum 
  CFD4    CD CB18        C      	call	search 
                         C      	;zero the receiving ranrec field 
  CFD7    2A C743        C      	lhld	info		;save position 
  CFDA    11 0021        C      	lxi	d,ranrec 
  CFDD    19             C      	dad	d 
  CFDE    E5             C      	push	h 
  CFDF    72             C      	mov	m,d		;=00 00 00 
  CFE0    23             C      	inx	h 
  CFE1    72             C      	mov	m,d 
  CFE2    23             C      	inx	h 
  CFE3    72             C      	mov	m,d 
  CFE4                   C      getsize: 
  CFE4    CD C9F5        C      	call	end_of_dir 
  CFE7    CA D00C        C      	jz	setsize 
                         C      	;current fcb addressed by dptr 
  CFEA    CD C95E        C      	call	getdptra	;ready for compute size 
  CFED    11 000F        C      	lxi	d,reccnt 
  CFF0    CD CFA5        C      	call	compute_rr 
                         C      	;A=0000 000? BC = mmmm eeee errr rrrr 
                         C      	;compare with memory, larger? 
  CFF3    E1             C      	pop	h		;recall, replace .fcb(ranrec) 
  CFF4    E5             C      	push	h 
  CFF5    5F             C      	mov	e,a		;save cy 
  CFF6    79             C      	mov	a,c		;ls byte 
  CFF7    96             C      	sub	m 
  CFF8    23             C      	inx	h 
  CFF9    78             C      	mov	a,b		;middle byte 
  CFFA    9E             C      	sbb	m 
  CFFB    23             C      	inx	h 
  CFFC    7B             C      	mov	a,e		;carry if .fcb(ranrec) > directory 
  CFFD    9E             C      	sbb	m 
  CFFE    DA D006        C      	jc	getnextsize	;for another try 
                         C      	;fcb is less or equal, fill from directory 
  D001    73             C      	mov	m,e 
  D002    2B             C      	dcx	h 
  D003    70             C      	mov	m,b 
  D004    2B             C      	dcx	h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-76


  D005    71             C      	mov	m,c 
  D006                   C      getnextsize: 
  D006    CD CB2D        C      	call	searchn 
  D009    C3 CFE4        C      	jmp	getsize 
  D00C                   C      setsize: 
  D00C    E1             C      	pop	h		;discard .fcb(ranrec) 
  D00D    C9             C      	ret 
                         C       
  D00E                   C      setrandom: 
                         C      	;set random record from the current file control block 
  D00E    2A C743        C      	lhld	info		;ready params for computesize 
  D011    11 0020        C      	lxi	d,nxtrec 
  D014    CD CFA5        C      	call	compute_rr	;DE=info, A=cy, BC=mmmm eeee errr rrrr 
  D017    21 0021        C      	lxi	h,ranrec	;HL = .fcb(ranrec) 
  D01A    19             C      	dad	d 
  D01B    71             C      	mov	m,c		;to ranrec 
  D01C    23             C      	inx	h 
  D01D    70             C      	mov	m,b 
  D01E    23             C      	inx	h 
  D01F    77             C      	mov	m,a 
  D020    C9             C      	ret 
                         C       
  D021                   C      select: 
                         C      	;select disk info for subsequent input or output ops 
  D021    2A D1AF        C      	lhld	dlog 
  D024    3A C742        C      	lda	curdsk 
  D027    4F             C      	mov	c,a 
  D028    CD C8EA        C      	call	hlrotr 
  D02B    E5             C      	push	h		;save it for test below, send to seldsk 
  D02C    EB             C      	xchg 
  D02D    CD C759        C      	call	selectdisk	;recall dlog vector 
  D030    E1             C      	pop	h 
  D031    CC C747        C      	cz	sel_error	;returns true if select ok 
                         C      	;is the disk logged in? 
  D034    7D             C      	mov	a,l		;return if bit is set 
  D035    1F             C      	rar 
  D036    D8             C      	rc 
                         C      	;disk not logged in, set bit and initialize 
  D037    2A D1AF        C      	lhld	dlog		;call ready 
  D03A    4D             C      	mov	c,l 
  D03B    44             C      	mov	b,h 
  D03C    CD C90B        C      	call	set_cdisk	;dlog=set_cdisk(dlog) 
  D03F    22 D1AF        C      	shld	dlog 
  D042    C3 CAA3        C      	jmp	initialize 
                         C      	;ret 
                         C       
  D045                   C      curselect: 
  D045    3A D1D6        C      	lda	linfo		;skip if linfo=curdsk 
  D048    21 C742        C      	lxi	h,curdsk 
  D04B    BE             C      	cmp	m 
  D04C    C8             C      	rz 
  D04D    77             C      	mov	m,a		;curdsk=info 
  D04E    C3 D021        C      	jmp	select 
                         C      	;ret 
                         C       
  D051                   C      reselect: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-77


                         C      	;check current fcb to see if reselection necessary 
  D051    3E FF          C      	mvi	a,_true		;mark possible reselect 
  D053    32 D1DE        C      	sta	resel 
  D056    2A C743        C      	lhld	info		;drive select code 
  D059    7E             C      	mov	a,m 
  D05A    E6 1F          C      	ani	11111b		;non zero is auto drive select 
  D05C    3D             C      	dcr	a		;drive code normalized to 0..30, or 255 
  D05D    32 D1D6        C      	sta	linfo		;save drive code 
  D060    FE 1E          C      	cpi	30 
  D062    D2 D075        C      	jnc	noselect 
                         C      	;auto select function, save curdsk 
  D065    3A C742        C      	lda	curdsk		;_olddsk=curdsk 
  D068    32 D1DF        C      	sta	_olddsk 
  D06B    7E             C      	mov	a,m		;save drive code 
  D06C    32 D1E0        C      	sta	fcbdsk 
  D06F    E6 E0          C      	ani	11100000b	;preserve hi bits 
  D071    77             C      	mov	m,a 
  D072    CD D045        C      	call	curselect 
  D075                   C      noselect: 
                         C      	;set user code 
  D075    3A C741        C      	lda	usrcode		;0...31 
  D078    2A C743        C      	lhld	info 
  D07B    B6             C      	ora	m 
  D07C    77             C      	mov	m,a 
  D07D    C9             C      	ret 
                         C       
                         C      ;	individual function handlers 
  D07E                   C      func12: 
                         C      	;return version number 
  D07E    3E 22          C      	mvi	a,dvers		;lret = dvers (high = 00) 
  D080    C3 C701        C      	jmp	sta_ret 
                         C      ;	ret ;jmp goback 
                         C       
  D083                   C      func13: 
                         C      	;reset disk system - initialize to disk 0 
  D083    21 0000        C      	lxi	h,0 
  D086    22 D1AD        C      	shld	rodsk 
  D089    22 D1AF        C      	shld	dlog 
  D08C    AF             C      	xra	a		;note that usrcode remains unchanged 
  D08D    32 C742        C      	sta	curdsk 
  D090    21 0080        C      	lxi	h,tbuff		;dmaad = tbuff 
  D093    22 D1B1        C      	shld	dmaad 
  D096    CD C9DA        C              call	setdata		;to data dma address 
  D099    C3 D021        C      	jmp	select 
                         C      	;ret ;jmp goback 
                         C       
  D045                   C      func14	equ	curselect 
                         C      	;select disk info 
                         C      	;ret ;jmp goback 
                         C       
  D09C                   C      func15: 
                         C      	;open file 
  D09C    CD C972        C      	call	clrmodnum	;clear the module number 
  D09F    CD D051        C      	call	reselect 
  D0A2    C3 CC51        C      	jmp	open 
                         C      	;ret ;jmp goback 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-78


                         C       
  D0A5                   C      func16: 
                         C      	;close file 
  D0A5    CD D051        C      	call	reselect 
  D0A8    C3 CCA2        C      	jmp	close 
                         C      	;ret ;jmp goback 
                         C       
  D0AB                   C      func17: 
                         C      	;search for first occurrence of a file 
  D0AB    0E 00          C      	mvi	c,0		;length assuming '?' true 
  D0AD    EB             C      	xchg			;was lhld info		 
  D0AE    7E             C      	mov	a,m		;no reselect if ? 
  D0AF    FE 3F          C      	cpi	'?' 
  D0B1    CA D0C2        C      	jz	qselect		;skip reselect if so 
                         C      	;normal search 
  D0B4    CD C8A6        C      	call	getexta 
  D0B7    7E             C      	mov	a,m 
  D0B8    FE 3F          C      	cpi	'?' 
  D0BA    C4 C972        C      	cnz	clrmodnum	;module number zeroed 
  D0BD    CD D051        C      	call	reselect 
  D0C0    0E 0F          C      	mvi	c,namlen 
  D0C2                   C      qselect: 
  D0C2    CD CB18        C      	call	search 
  D0C5    C3 C9E9        C      	jmp	dir_to_user	;copy directory entry to user 
                         C      	;ret ;jmp goback 
                         C       
  D0C8                   C      func18: 
                         C      	;search for next occurrence of a file name 
  D0C8    2A D1D9        C      	lhld	searcha 
  D0CB    22 C743        C      	shld	info 
  D0CE    CD D051        C      	call	reselect 
  D0D1    CD CB2D        C      	call	searchn 
  D0D4    C3 C9E9        C      	jmp	dir_to_user	;copy directory entry to user 
                         C      	;ret ;jmp goback 
                         C       
  D0D7                   C      func19: 
                         C      	;delete a file 
  D0D7    CD D051        C      	call	reselect 
  D0DA    CD CB9C        C      	call	delete 
  D0DD    C3 CB01        C      	jmp	copy_dirloc 
                         C      	;ret ;jmp goback 
                         C       
  D0E0                   C      func20: 
                         C      	;read a file 
  D0E0    CD D051        C      	call	reselect 
  D0E3    C3 CDBC        C      	jmp	seqdiskread				; 
                         C      	 ;jmp goback 
                         C       
  D0E6                   C      func21: 
                         C      	;write a file 
  D0E6    CD D051        C      	call	reselect 
  D0E9    C3 CDFE        C      	jmp	seqdiskwrite			; 
                         C      	 ;jmp goback 
                         C       
  D0EC                   C      func22: 
                         C      	;make a file 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-79


  D0EC    CD C972        C      	call	clrmodnum 
  D0EF    CD D051        C      	call	reselect 
  D0F2    C3 CD24        C      	jmp	make 
                         C      	;ret ;jmp goback 
                         C       
  D0F5                   C      func23: 
                         C      	;rename a file 
  D0F5    CD D051        C      	call	reselect 
  D0F8    CD CC16        C      	call	rename 
  D0FB    C3 CB01        C      	jmp	copy_dirloc 
                         C      	;ret ;jmp goback 
                         C       
  D0FE                   C      func24: 
                         C      	;return the login vector 
  D0FE    2A D1AF        C      	lhld	dlog 
  D101    C3 D129        C      	jmp	sthl_ret			; 
                         C      ;	ret ;jmp goback 
                         C       
  D104                   C      func25: 
                         C      	;return selected disk number 
  D104    3A C742        C      	lda	curdsk 
  D107    C3 C701        C      	jmp	sta_ret 
                         C      ;	ret ;jmp goback 
                         C       
  D10A                   C      func26: 
                         C      	;set the subsequent dma address to info 
  D10A    EB             C      	xchg			;was lhld info	 
  D10B    22 D1B1        C      	shld	dmaad		;dmaad = info 
  D10E    C3 C9DA        C              jmp	setdata		;to data dma address 
                         C      	;ret ;jmp goback 
                         C       
  D111                   C      func27: 
                         C      	;return the login vector address 
  D111    2A D1BF        C      	lhld	alloca 
  D114    C3 D129        C      	jmp	sthl_ret 
                         C      ;	ret ;jmp goback 
                         C       
  C92C                   C      func28	equ	set_ro 
                         C      	;write protect current disk 
                         C      	;ret ;jmp goback 
                         C       
  D117                   C      func29: 
                         C      	;return r/o bit vector 
  D117    2A D1AD        C      	lhld	rodsk 
  D11A    C3 D129        C      	jmp	sthl_ret 
                         C      ;	ret ;jmp goback 
                         C       
  D11D                   C      func30: 
                         C      	;set file indicators 
  D11D    CD D051        C      	call	reselect 
  D120    CD CC3B        C      	call	indicators 
  D123    C3 CB01        C      	jmp	copy_dirloc		;lret=dirloc 
                         C      	;ret ;jmp goback 
                         C       
  D126                   C      func31: 
                         C      	;return address of disk parameter block 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-80


  D126    2A D1BB        C      	lhld	dpbaddr 
  D129                   C      sthl_ret: 
  D129    22 C745        C       	shld	aret 
  D12C    C9             C      	ret			;jmp goback 
  D12D                   C      func32: 
                         C      	;set user code 
  D12D    3A D1D6        C              lda	linfo 
  D130    FE FF          C      	cpi	0ffh 
  D132    C2 D13B        C      	jnz	setusrcode 
                         C      	;interrogate user code instead 
  D135    3A C741        C      	lda	usrcode		;lret=usrcode 
  D138    C3 C701        C      	jmp	sta_ret 
                         C      ;		ret ;jmp goback 
  D13B                   C      setusrcode: 
  D13B    E6 1F          C      	ani	1fh 
  D13D    32 C741        C      	sta	usrcode 
  D140    C9             C      	ret			;jmp goback 
                         C      ; 
  D141                   C      func33: 
                         C      	;random disk read operation 
  D141    CD D051        C      	call	reselect 
  D144    C3 CF93        C      	jmp	randiskread	;to perform the disk read 
                         C      	;ret ;jmp goback 
                         C      ; 
  D147                   C      func34: 
                         C      	;random disk write operation 
  D147    CD D051        C      	call	 reselect 
  D14A    C3 CF9C        C      	jmp	randiskwrite	;to perform the disk write 
                         C      	;ret ;jmp goback 
                         C      ; 
  D14D                   C      func35: 
                         C      	;return file size (0-65536) 
  D14D    CD D051        C      	call	reselect 
  D150    C3 CFD2        C      	jmp	getfilesize 
                         C      	;ret ;jmp goback 
                         C      ; 
  D00E                   C      func36	equ	setrandom			; 
                         C      	;set random record 
                         C      	;ret ;jmp goback 
  D153                   C      func37: 
                         C      ; 
  D153    2A C743        C      	lhld	info 
  D156    7D             C      	mov	a,l 
  D157    2F             C      	cma 
  D158    5F             C      	mov	e,a 
  D159    7C             C      	mov	a,h 
  D15A    2F             C      	cma 
  D15B    2A D1AF        C      	lhld	dlog 
  D15E    A4             C      	ana	h 
  D15F    57             C      	mov	d,a 
  D160    7D             C      	mov	a,l 
  D161    A3             C      	ana	e 
  D162    5F             C      	mov	e,a 
  D163    2A D1AD        C      	lhld	rodsk 
  D166    EB             C      	xchg 
  D167    22 D1AF        C      	shld	dlog 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-81


  D16A    7D             C      	mov	a,l 
  D16B    A3             C      	ana	e 
  D16C    6F             C      	mov	l,a 
  D16D    7C             C      	mov	a,h 
  D16E    A2             C      	ana	d 
  D16F    67             C      	mov	h,a 
  D170    22 D1AD        C      	shld	rodsk 
  D173    C9             C      	ret 
                         C      ; 
                         C      ; 
  D174                   C      goback: 
                         C      	;arrive here at end of processing to return to user 
  D174    3A D1DE        C      	lda	resel 
  D177    B7             C      	ora	a 
  D178    CA D191        C      	jz	retmon 
                         C      	;reselection may have taken place 
  D17B    2A C743        C      	lhld	info		;fcb(0)=0 
  D17E    36 00          C      	mvi	m,0 
  D180    3A D1E0        C      	lda	fcbdsk 
  D183    B7             C      	ora	a 
  D184    CA D191        C      	jz	retmon 
                         C      	;restore disk number 
  D187    77             C      	mov	m,a		;fcb(0)=fcbdsk 
  D188    3A D1DF        C      	lda	_olddsk 
  D18B    32 D1D6        C      	sta	linfo 
  D18E    CD D045        C      	call	curselect 
                         C      ; 
                         C      ;	return from the disk monitor 
  D191                   C      retmon: 
  D191    2A C70F        C      	lhld	entsp		;user stack restored 
  D194    F9             C      	sphl 
  D195    2A C745        C      	lhld	aret		;BA = HL = aret 
  D198    7D             C      	mov	a,l 
  D199    44             C      	mov	b,h 
  D19A    C9             C      	ret 
                         C       
  C704                   C      func38	equ	func_ret 
  C704                   C      func39	equ	func_ret 
                         C       
  D19B                   C      func40: 
                         C      	;random disk write with zero fill of unallocated block 
  D19B    CD D051        C      	call	reselect 
  D19E    3E 02          C      	mvi	a,2 
  D1A0    32 D1D5        C      	sta	seqio 
  D1A3    0E 00          C      	mvi	c,_false 
  D1A5    CD CF07        C      	call	rseek1 
  D1A8    CC CE03        C      	cz	diskwrite	;if seek successful 
  D1AB    C9             C      	ret 
                         C       
                         C       
                         C      ;	data areas 
                         C       
                         C      ;	initialized data 
  D1AC    E5             C      efcb:	db	empty	;0e5=available dir entry 
  D1AD    0000           C      rodsk:	dw	0	;read only disk vector 
  D1AF    0000           C      dlog:	dw	0	;logged-in disks 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-82


  D1B1    0080           C      dmaad:	dw	tbuff	;initial dma address 
                         C       
                         C      ;	curtrka - alloca are set upon disk select 
                         C      ;	(data must be adjacent, do not insert variables) 
                         C      ;	(address of translate vector, not used) 
  D1B3                   C      cdrmaxa:ds	word	;pointer to cur dir max value 
  D1B5                   C      curtrka:ds	word	;current track address 
  D1B7                   C      curreca:ds	word	;current record address 
  D1B9                   C      buffa:	ds	word	;pointer to directory dma address 
  D1BB                   C      dpbaddr:ds	word	;current disk parameter block address 
  D1BD                   C      checka:	ds	word	;current checksum vector address 
  D1BF                   C      alloca:	ds	word	;current allocation vector address 
  0008                   C      addlist	equ	$-buffa	;address list size 
                         C       
                         C      ;	sectpt - offset obtained from disk parm block at dpbaddr 
                         C      ;	(data must be adjacent, do not insert variables) 
  D1C1                   C      sectpt:	ds	word	;sectors per track 
  D1C3                   C      blkshf:	ds	byte	;block shift factor 
  D1C4                   C      blkmsk:	ds	byte	;block mask 
  D1C5                   C      extmsk:	ds	byte	;extent mask 
  D1C6                   C      maxall:	ds	word	;maximum allocation number 
  D1C8                   C      dirmax:	ds	word	;largest directory number 
  D1CA                   C      dirblk:	ds	word	;reserved allocation bits for directory 
  D1CC                   C      chksiz:	ds	word	;size of checksum vector 
  D1CE                   C      offset:	ds	word	;offset tracks at beginning 
  000F                   C      dpblist	equ	$-sectpt	;size of area 
                         C       
                         C      ;	local variables 
  D1D0                   C      tranv:	ds	word	;address of translate vector 
  D1D2                   C      fcb_copied: 
  D1D2                   C      	ds	byte	;set true if copy_fcb called 
  D1D3                   C      rmf:	ds	byte	;read mode flag for open_reel 
  D1D4                   C      dirloc:	ds	byte	;directory flag in rename, etc. 
  D1D5                   C      seqio:	ds	byte	;1 if sequential i/o 
  D1D6                   C      linfo:	ds	byte	;low(info) 
  D1D7                   C      dminx:	ds	byte	;local for diskwrite 
  D1D8                   C      searchl:ds	byte	;search length 
  D1D9                   C      searcha:ds	word	;search address 
  D1DB                   C      tinfo:	ds	word	;temp for info in "make" 
  D1DD                   C      single:	ds	byte	;set true if single byte allocation map 
  D1DE                   C      resel:	ds	byte	;reselection flag 
  D1DF                   C      _olddsk:	ds	byte	;disk on entry to bdos 
  D1E0                   C      fcbdsk:	ds	byte	;disk named in fcb 
  D1E1                   C      rcount:	ds	byte	;record count in current fcb 
  D1E2                   C      extval:	ds	byte	;extent number and extmsk 
  D1E3                   C      vrecord:ds	word	;current virtual record 
  D1E5                   C      arecord:ds	word	;current actual record 
  D1E7                   C      arecord1:	ds	word	;current actual block# * blkmsk 
                         C       
                         C      ;	local variables for directory access 
  D1E9                   C      dptr:	ds	byte	;directory pointer 0,1,2,3 
  D1EA                   C      dcnt:	ds	word	;directory counter 0,1,...,dirmax 
  D1EC                   C      drec:	ds	word	;directory record 0,1,...,dirmax/4 
                         C       
  D200                   C      bios	equ	($ AND 0ff00h)+100h	;next module 
                         C      ;	end 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-83


  0DEE                   C      D_SIZE	EQU	$-D_BASE 
                                 
                         C      include B1MAIN.ASM 
                         C      ;******** CP/M BIOS V2.3 FOR R86-RK ******** 
                         C      ;*     (C) TCHV 
                         C      ;******************************************* 
                         C       
                         C      ;	B0MAIN.ASM - CP/M bios main module 
                         C       
                         C      ;	30-MAY-1991 - FIRST VERSION 
                         C      ;	XX-XXX-1991 - 80-SYMBOL SCREEN MODE ADDED 
                         C      ;	03-JAN-1992 - ADDED 2-DRIVE SUPPORT 
                         C      ;	06-JAN-1992 - SECTOR INTERLEAVING FOR DRIVE B: 
                         C      ;	22-Mar-1992 - Add PROFI disk format 
                         C      ;	24-Mar-1992 - Break into modules 
                         C      ;	02-Nov-1992 - Add version information 
                         C       
                         C      ;	INCLUDE         B0CONIO.H 
                         C      ;	INCLUDE         B0DISK.H 
                         C      ;	INCLUDE         B0LSTAUX.H 
                         C       
                         C      ;EXTRN	PUTS	; FROM B0CONIO.ASM 
                         C       
  0000                   C      SYSPG	EQU	0	; THE PAGE OF SYSTEM RAM 
  0005                   C      BDOSTRP EQU	5	; 
                         C       
  0004                   C      DEF_DSK	EQU	4 
  0003                   C      IO_BYTE	EQU	3 
                         C       
  D1EE                   C      	ds	bios-$ 
  D200                   C      B_BASE:: 
                         C      ;---------------------------------------------------- 
                         C      ;	BIOS FUNCTION TABLE 
  D200    C3 D241        C      	JMP	BOOT	; Cold boot of the system 
  D203                   C      WBOOT_ADR: 
  D203    C3 D2CB        C      	JMP	WBOOT	; Warm boot of the system 
                         C       
  D206    C3 D707        C      	JMP	CON_ST;##;~~\ 
  D209    C3 D70A        C      	JMP	 CONIN;##;---)- Console I/O 
  D20C    C3 D78B        C      	JMP	CONOUT;##;__/		(see B0CONIO.ASM) 
                         C       
  D20F    C3 DA52        C      	JMP	LSTOUT;##;______  LST and AUX functions 
  D212    C3 DA4E        C      	JMP	 PUNCH;##;  !		(see B0LSTAUX.asm) 
  D215    C3 DA4F        C      	JMP	READER;##;_/! 
                         C      ;			   ! 
  D218    C3 D5D8        C      	JMP	 HOME@;##;__!_________ Disk functions 
  D21B    C3 D5DF        C      	JMP	SELDSK;##;  !	 /	(see B2DISK.asm) 
  D21E    C3 D5DA        C      	JMP	SETTRK;##;  !	! 
  D221    C3 D678        C      	JMP	SETREC;##;  !	! 
  D224    C3 D6A7        C      	JMP	SETDMA;##;  !	! 
  D227    C3 D6AD        C      	JMP	RD_REC;##;__!___/! 
  D22A    C3 D6BD        C      	JMP	WR_REC;##;  !	! 
  D22D    C3 DA55        C      	JMP	LST_ST;##;_/	! 
  D230    C3 D67D        C      	JMP	SECTRN;##;______/ 
                         C       
  D233    21 C3CD        C      	LXI	H,C_BASE+7CDH	; SPECIAL SUBROUTINE FOR CCP 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-84


  D236    7E             C      	MOV	A,M 
  D237    FE 02          C      	CPI	2		; MODIFICATION 
  D239    CA C36B        C      	JZ	C_BASE+76BH 
  D23C    36 02          C      	MVI	M,2 
  D23E    C3 C2D8        C      	JMP	C_BASE+6D8H 
                         C       
                         C       
                         C      ;------ FIRST TIME INITIALIZATION -------- 
                         C       
  D241    31 0100        C      BOOT:	LXI	SP,100H 
  D244    CD D5C8        C      	CALL	DskInit;## 
                         C      	;CALL	SETSCR 
  D247    CD DB20        C      	CALL	SAV_SYS;## 
  D24A    CD D9C3        C      	CALL	SETSCR 
  D24D    CD D77B        C      	CALL	PRNT;## 
  D250    1B 45 43 50    C      	DB	27,45H,	'CP/M-80 vers. 2.2' 
  D254    2F 4D 2D 38    C      
  D258    30 20 76 65    C      
  D25C    72 73 2E 20    C      
  D260    32 2E 32       C      
  D263    0D 0A 43 6F    C      	DB	0DH,0AH,'Copyright (C) 1980, Digital Research' 
  D267    70 79 72 69    C      
  D26B    67 68 74 20    C      
  D26F    28 43 29 20    C      
  D273    31 39 38 30    C      
  D277    2C 20 44 69    C      
  D27B    67 69 74 61    C      
  D27F    6C 20 52 65    C      
  D283    73 65 61 72    C      
  D287    63 68          C      
  D289    0D 0A 42 49    C      	DB	0DH,0AH,'BIOS vers. 3.0      (c) TCHV,1991-92' 
  D28D    4F 53 20 76    C      
  D291    65 72 73 2E    C      
  D295    20 33 2E 30    C      
  D299    20 20 20 20    C      
  D29D    20 20 28 63    C      
  D2A1    29 20 54 43    C      
  D2A5    48 56 2C 31    C      
  D2A9    39 39 31 2D    C      
  D2AD    39 32          C      
  D2AF    0D 0A 00       C      	DB	0DH,0AH,0 
                         C       
                         C      	;JMP	$ 
                         C       
  D2B2    21 D31E        C      	lxi	h,DSKVER;## 
  D2B5    CD D780        C      	call	PUTS 
  D2B8    21 D6E0        C      	lxi	h,CONVER;## 
  D2BB    CD D780        C      	call	PUTS 
  D2BE    21 DA27        C      	lxi	h,LSTVER;## 
  D2C1    CD D780        C      	call	PUTS 
  D2C4    AF             C      	XRA	A 
  D2C5    32 0004        C      	STA	DEF_DSK 
  D2C8    32 0003        C      	STA	IO_BYTE 
                         C       
  D2CB                   C      WBOOT:	; WARM START OF CP/M BIOS - LOADING SYSTEM 
  D2CB    31 0100        C      	LXI	SP,100H 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-85


  D2CE    0E 00          C      	MVI	C,0 
  D2D0    CD D5DF        C      	CALL	SELDSK 
  D2D3    CD D5D8        C      	CALL	HOME@ 
  D2D6    CD D9C3        C      WBT:	CALL	SETSCR;## 
                         C       
  D2D9    CD DB21        C      	CALL	LD_SYS;## 
                         C       
  D2DC    2A BC00        C      	LHLD	C_BASE 
  D2DF    7D             C      	MOV	A,L	; CHECK CP/M DISK PRESENCE 
  D2E0    FE C3          C      	CPI	0C3H 
  D2E2    C2 D306        C      	JNZ	ASKDOS 
                         C       
  D2E5    01 0080        C      	LXI	B,80H 
  D2E8    CD D6A7        C      	CALL	SETDMA;## 
  D2EB    3E C3          C      	MVI	A,0C3H 
  D2ED    32 0000        C      	STA	SYSPG 
  D2F0    32 0005        C      	STA	BDOSTRP 
  D2F3    21 D203        C      	LXI	H,WBOOT_ADR 
  D2F6    22 0001        C      	SHLD	SYSPG+1 
  D2F9    21 C400        C      	LXI	H,D_BASE;## 
  D2FC    22 0006        C      	SHLD	BDOSTRP+1 
  D2FF    3A 0004        C      	LDA	DEF_DSK 
  D302    4F             C      	MOV	C,A 
  D303    C3 BC00        C      	JMP	C_BASE;## 
                         C       
  D306    CD D77B        C      ASKDOS:	CALL	PRNT;## 
  D309    0A 0D 49 6E    C      	DB	10,13,'Ins DOS disk',0 
  D30D    73 20 44 4F    C      
  D311    53 20 64 69    C      
  D315    73 6B 00       C      
  D318    CD D70A        C      	CALL	CONIN 
  D31B    C3 D2D6        C      	JMP	WBT 
                         C       
                         C       
                         C       
                         C      ;	END 
                         C       
                         C       
                         C      include B2DISK.ASM 
                         C      ;********************************************** 
                         C      ;*   B2DISK.ASM - CP/M BIOS disk functions    * 
                         C      ;* 	  (c) TCHV	1991-1993     	      * 
                         C      ;********************************************** 
                         C       
                         C      ; This module defines the following procedures : 
                         C      PUBLIC	DSKINIT 	; Disk initialisation 
                         C      ; CP/M BIOS functions 
                         C      PUBLIC	HOME@,SELDSK,SETDMA,SECTRN,SETTRK,SETREC,RD_REC,WR_REC 
                         C       
  D31E    0A 0D 44 69    C      DSKVER::	DB	10,13,'Disk BIOS V3.1      7-sep-1993',0 
  D322    73 6B 20 42    C      
  D326    49 4F 53 20    C      
  D32A    56 33 2E 31    C      
  D32E    20 20 20 20    C      
  D332    20 20 37 2D    C      
  D336    73 65 70 2D    C      
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-86


  D33A    31 39 39 33    C      
  D33E    00             C      
                         C       
                         C      ; History 
                         C       
                         C      ;	25-jun-1993 - delete controller dependent features & add fdcntr 
                         C      ;		      module 
                         C      ;	 7-sep-1993 - add some comments & transfer disk features into 
                         C      ;		      separate modules 
                         C       
                         C      ;EXTRN ChgDrive,WT_END_CMD 
                         C       
                         C      ;EXTRN RamD_R,RamD_W,RamD_I,RAM_TO_EXT,EXT_TO_RAM 
                         C       
                         C      ;EXTRN FlpD_R,FlpD_W,FlpD_I,FLSH_WB,LAST_OPER,FLP_TBL 
                         C       
                         C      ;INCLUDE B0DISK.MAC 
                         C       
  0001                   C      PROFI_DISKS	EQU	1 
  0042                   C      MaxDiskCode		EQU	'B';'E'   ; Maximum disk code 
                         C       
                         C       
                         C      ; DISK ALLOCATION 
  0001                   C      FLOP40		EQU	1	; DISK B: 
  0000                   C      SD		EQU	0 
  0000                   C      FLOP80		EQU	0	; A: 
  0002                   C      RAMDISK		EQU	2	; C: 
                         C       
                         C       
  0000                   C      FRST_T	EQU	0	; FIRST TRACK OF CP/M AREA 
                         C       
                         C       
                         C      ;*************** Disk buffers allocation ***************** 
  D33F                   C      DIRBF:	ds 80H;		EQU	0E6D0h-80h 
                         C       
                         C       
                         C      ;ALL00	EQU	DIRBF-31 
                         C      ;CHK00	EQU	ALL00-10h 
                         C       
  D3BF                   C      ALL01:	DS	64 
  D3FF                   C      CHK01:	DS	32 
                         C       
  D41F                   C      ALL02:	DS	64 
  D45F                   C      CHK02:	DS	32 
                         C       
  D47F                   C      ALL03:	DS	250 
  D579                   C      CHK03:	DS	1 
                         C       
                         C      ;ALL02:	DS	16 
                         C      ;CHK02:	DS	1 
                         C       
                         C      ;ALL03	EQU	0EFE0H 
                         C      ;CHK03:	DS	16 
                         C       
                         C      ;ALL04:	DS	64 
                         C      ;CHK04:	DS	32 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-87


                         C       
                         C       
                         C       
                         C      ; Disk parameter header table 
  D57A                   C      DPBASE: 
                         C      	;DW	0,0,0,0,DIRBF,DPBLK1,CHK00,ALL00	; Disk A 
  D57A    0001 0000      C      	DW	1,0,0,0,DIRBF,DPBLK2,CHK01,ALL01	; Disk A 
  D57E    0000 0000      C      
  D582    D33F D5AA      C      
  D586    D3FF D3BF      C      
  D58A    0001 0000      C      	DW	1,0,0,0,DIRBF,DPBLK2,CHK02,ALL02	; Disk B 
  D58E    0000 0000      C      
  D592    D33F D5AA      C      
  D596    D45F D41F      C      
  D59A    0000 0000      C      	DW	0,0,0,0,DIRBF,DPBLK3,CHK03,ALL03	; Disk C 
  D59E    0000 0000      C      
  D5A2    D33F D5B9      C      
  D5A6    D579 D47F      C      
                         C      	;DW	0,0,0,0,DIRBF,DPBLK1,CHK03,ALL03	; Disk D 
                         C      	;DW	0,0,0,0,DIRBF,DPBLK4,CHK04,ALL04	; Disk E 
                         C       
                         C       
                         C      ; ** Sector translation tables - not needed 
  D5AA                   C      TRANS1:;DB	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 
                         C      ;	DB	19,20,21,22,23,24,25,26,27,28,29,30,31,32,33 
                         C      ;	DB	34,35,36,37,38,39,40,41,42,43,44,45,46,47,48 
                         C      ;	DB	49,50,51,52,53,54,55,56,57,58,59,60,61,62,63 
                         C      ;	DB	64,65,66,67,68,69,70,71,72 
                         C       
  D5AA                   C      TRANS2:;DB	1,2,3,4,5,6,7,8 
                         C      ; ** 
                         C       
                         C      ; FLOPPY 40-TRK DISK (A:,D:) PARAMETER BLOCK 
                         C      ;DPBLK1:	DW	72	;SEC ON TRK 
                         C      ;	DB	04H	;BLK SHF 
                         C      ;	DB	0FH	;BLK MASK 
                         C      ;	DB	00H	;0-MASK 
                         C      ;	DW	179	;DISK SIZE 
                         C      ;	DW	63	;DIR LEN 
                         C      ;	DB	1000000b;Directory allocation - each bit for one group 
                         C      ;	DB	0000000b; -"- 
                         C      ;	DW	16	;Disk bitmap size 
                         C      ;	DW	FRST_T+1 
                         C       
                         C       
                         C      ; FLOPPY 80-TRK DISK (B:) PARAMETER BLOCK 
  D5AA    0050           C      DPBLK2:	DW	80	;SEC ON TRK 
  D5AC    04             C      	DB	04H	;BLK SHF 
  D5AD    0F             C      	DB	0FH	;BLK MASK 
  D5AE    00             C      	DB	00H	;0-MASK 
  D5AF    0185           C      	DW	780/2-1	;DISK SIZE 
  D5B1    007F           C      	DW	128-1	;DIR LEN 
  D5B3    C0             C      	DB	11000000B	; DIRECTORY BIT MAP 
  D5B4    00             C      	DB	00000000B 
  D5B5    0020           C      	DW	32 
  D5B7    0002           C      	DW	2 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-88


                         C       
                         C      ; gide-cfa  DISK (Q:) PARAMETER BLOCK 
  D5B9                   C      DPBLK3: 
  D5B9    0080           C      	DW	128	;SEC ON TRK 
  D5BB    05             C      	DB	5	;BLK SHF 
  D5BC    1F             C      	DB	31	;BLK MASK 
  D5BD    01             C      	DB	01H	;0-MASK 
  D5BE    07CF           C      	DW	2000-1	;DISK SIZE = 1000*512*16/4096 -1 
  D5C0    03FF           C      	DW	1024-1	;DIR LEN 
  D5C2    FF             C      	DB	0FFh	; DIRECTORY BIT MAP 
  D5C3    00             C      	DB	0 
  D5C4    0000           C      	DW	0 
  D5C6    0001           C      	DW	1 
                         C       
                         C      ; ********** RAMDISK (C:) PARAMETER BLOCK *********** 
                         C      ; Last operation codes 
                         C       
                         C       
                         C      ;DPBLK3:	DW	C_SEC_ON_TRK	;SEC ON TRK 
                         C      ;	DB	3	;BLK SHF 
                         C      ;	DB	7	;BLK MASK 
                         C      ;	DB	00H	;0-MASK 
                         C      ;	DW	64-8-1	;DISK SIZE 
                         C      ;	DW	C_DIR_ENTRS-1	;DIR LEN 
                         C      ;	DB	10000000b 
                         C      ;	DB	00000000b 
                         C      ;	DW	0 
                         C      ;	DW	C_OFFSET 
                         C       
                         C      ;; FLOPPY 80-TRK DISK (E:) PARAMETER BLOCK 
                         C      ;DPBLK4:	DW	72	;SEC ON TRK 
                         C      ;	DB	04H	;BLK SHF 
                         C      ;	DB	0FH	;BLK MASK 
                         C      ;	DB	00H	;0-MASK 
                         C      ;	DW	(720-9)/2-1	;DISK SIZE 
                         C      ;	DW	128-1	;DIR LEN 
                         C      ;	DB	1100000b 
                         C      ;	DB	0000000b 
                         C      ;	DW	32 
                         C      ;	DW	1 
                         C      ;************** End disk buffer allocation & parameters ********* 
                         C       
                         C      ;-------- DISK INITIALIZATION ---------- 
  D5C8                   C      DskInit: 
  D5C8    AF             C      	XRA	A 
  D5C9    32 D6CD        C      	STA	OLDDSK 
  D5CC    32 D6DF        C      	STA	OLDF40 
  D5CF    CD DAA5        C              call	RamD_I 
  D5D2    CD DBAB        C      	call	SD_I 
  D5D5    C3 DA8E        C              jmp	FlpD_I 
                         C       
                         C      ;------ SOME CP/M BIOS FUNCTIONS ------- 
                         C       
  D5D8    0E 00          C      HOME@:	MVI	C,0 
  D5DA    21 D6D8        C      SETTRK:	LXI	H,CPM_TRACK 
  D5DD    71             C      	MOV	M,C 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-89


  D5DE    C9             C      	RET 
                         C       
                         C       
  D5DF    21 0000        C      SELDSK:	LXI	H,0 
  D5E2    79             C      	MOV	A,C 
  D5E3    32 D6DA        C      	STA	CPM_DISK 
                         C      	;CALL	CHECK_D 
  D5E6    3A D6DA        C      	LDA	CPM_DISK 
  D5E9    FE 03          C      	CPI	3;MaxDiskCode-'A'+1 
                         C      	;ORA	A 
  D5EB    D0             C      	RNC 
  D5EC    3A D6DA        C      	LDA	CPM_DISK 
  D5EF    6F             C      	MOV	L,A 
  D5F0    26 00          C      	MVI	H,0 
  D5F2    29             C      	DAD	H 
  D5F3    29             C      	DAD	H 
  D5F4    29             C      	DAD	H 
  D5F5    29             C      	DAD	H 
  D5F6    11 D57A        C      	LXI	D,DPBASE 
  D5F9    19             C      	DAD	D 
  D5FA    C9             C      	RET 
                         C       
  D5FB                   C      CHECK_D:: 
  D5FB    3A D6CD        C      	LDA	OLDDSK 
  D5FE    47             C      	MOV	B,A 
  D5FF    3A D6DA        C      	LDA	CPM_DISK 
  D602    B8             C      	CMP	B 
  D603    C8             C      	RZ 
  D604    32 D6CD        C      	STA	OLDDSK 
  D607    C9             C      	RET 
  D608    FE 02          C      	CPI	RAMDISK 
  D60A    C8             C      	RZ 
  D60B    FE 00          C      	CPI	SD 
  D60D    C8             C      	RZ 
  D60E    F5             C      	PUSH	PSW	; CHANGE FLOPPY DRIVE 
  D60F    CD DA93        C      	CALL	FLSH_WB 
  D612    CD DA93        C      	CALL	WT_END_CMD 
  D615    3E 02          C      	MVI	A,WRITING 
  D617    32 DA98        C      	STA	LAST_OPER 
  D61A    F1             C      	POP	PSW 
  D61B    FE 00          C      	CPI	FLOP80 
  D61D    47             C      	MOV	B,A 
  D61E    3E 02          C      	MVI	A,2 
  D620    32 D6D7        C      	STA	DRIVE 
  D623    CA DA93        C      	JZ	ChgDrive 
  D626    3A D6CD        C      	LDA	OLDDSK 
  D629    FE 04          C      	CPI	'E'-'A' 
  D62B    3A D6D7        C      	LDA	DRIVE 
  D62E    CA DA93        C      	JZ	ChgDrive 
                         C       
  D631    3E 01          C      	MVI	A,1 
  D633    32 D6D7        C      	STA	DRIVE 
  D636    3A D6DF        C      	LDA	OLDF40 
  D639    B8             C      	CMP	B 
  D63A    3A D6D7        C      	LDA	DRIVE 
  D63D    CA DA93        C              JZ	ChgDrive 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-90


  D640    78             C      	MOV	A,B 
  D641    32 D6DF        C      	STA	OLDF40 
  D644    F5             C      	PUSH	PSW 
  D645    3A D6D7        C      	LDA	DRIVE 
  D648    CD DA93        C      	CALL	ChgDrive 
  D64B    CD D77B        C      	CALL	PRNT;## 
  D64E    0A 0D 49 6E    C      	DB	10,13,'Ins disk ',0 
  D652    73 20 64 69    C      
  D656    73 6B 20 00    C      
  D65A    F1             C      	POP	PSW 
  D65B    C6 41          C      	ADI	'A' 
  D65D    4F             C      	MOV	C,A 
  D65E    CD D78B        C      	CALL	CONOUT;## 
  D661    CD D77B        C      	CALL	PRNT;## 
  D664    3A 20 26 20    C      	DB	': & type a key',10,13,0 
  D668    74 79 70 65    C      
  D66C    20 61 20 6B    C      
  D670    65 79 0A 0D    C      
  D674    00             C      
  D675    C3 D70A        C      	JMP	CONIN 
                         C       
                         C       
  D678    21 D6D9        C      SETREC:	LXI	H,CPM_RECORD 
  D67B    71             C      	MOV	M,C 
  D67C    C9             C      	RET 
                         C       
                         C      ;----------------------------------------- 
                         C       
  D67D                   C      SECTRN: 
                         C      ifdef	PROFI_DISKS 
  D67D    79             C      	mov	a,c 
  D67E    3C             C      	inr	a 
  D67F    32 D6D9        C      	STA	CPM_RECORD 
  D682    6F             C      	mov	l,a 
  D683    C9             C      	ret 
                         C      else 
                         C      	LDA	CPM_DISK 
                         C      	CPI	FLOP80 
                         C      	PUSH	B 
                         C      	MOV	A,C 
                         C      	JNZ	NO_TRAN	; NO INTERLEAVE TRANSLATION 
                         C       
                         C      ; PERFORM INTERLEAVE (1:2) TRANSLATION 
                         C      	ANI	3	; SAVE 2 LOWEST BITS OF SECT NUMBER 
                         C      	MOV	B,A 
                         C       
                         C      	MOV	A,C 
                         C      	XRA	B	; RESET THESE 2 BITS 
                         C      	CPI	36 
                         C      	JC	FIRST_HALF 
                         C      	SUI	36 
                         C      	ADD	A 
                         C      	ADI	4 
                         C      	JMP	$+4 
                         C      FIRST_HALF: 
                         C      	ADD	A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-91


                         C      	ORA	B	; RESTORE SAVED BITS 
                         C       
                         C      NO_TRAN:INR	A 
                         C      	STA	CPM_RECORD 
                         C      	MOV	L,A 
                         C      	POP	B 
                         C      	RET 
                         C      endif 
                         C      ;--------------------------------- 
  D684                   C      SET_PARAMS:: 
  D684    21 DA94        C      	lxi	h,FLP_TBL ; Floppy disk physical parameter table 
  D687    3A D6DA        C      	lda	CPM_DISK 
  D68A    FE 00          C      	cpi	FLOP80 
  D68C    C2 D69B        C      	jnz	noFLOP80 
  D68F    36 08          C      	mvi	m,8 
  D691    23             C      	inx	h 
  D692    36 05          C      	mvi	m,5 
  D694    23             C      	inx	h 
  D695    36 FF          C      	mvi	m,0ffh 
  D697    23             C      	inx	h 
  D698    36 03          C      	mvi	m,3 
  D69A    C9             C      	ret 
                         C       
  D69B                   C      noFLOP80: 
  D69B    36 04          C      	mvi	m,4 
  D69D    23             C      	inx	h 
  D69E    36 09          C      	mvi	m,9 
  D6A0    23             C      	inx	h 
  D6A1    36 0F          C      	mvi	m,1111B 
  D6A3    23             C      	inx	H 
  D6A4    36 02          C      	mvi	m,2 
  D6A6    C9             C      	ret 
                         C       
                         C      ;------------------------- 
  D6A7    69             C      SETDMA:	MOV	L,C 
  D6A8    60             C      	MOV	H,B 
  D6A9    22 D6DB        C      	SHLD	DMA_ADDR 
  D6AC    C9             C      	RET 
                         C       
                         C      ;============ FLOPPY DISK OPERATIONS ============ 
                         C       
                         C       
                         C      ;***************************************** 
                         C      ; READ CURRENT RECORD (128 BYTES) 
                         C      ;  TRACK & SECTOR DEFINES RECORD 
                         C      ;	POSITION 
                         C      ;\ 
  D6AD                   C      RD_REC: 
  D6AD    3A D6DA        C      	LDA	CPM_DISK 
  D6B0    FE 00          C      	CPI	SD 
  D6B2    C3 DB80        C      	JMP	SD_R 
                         C      	;JZ	SD_R 
  D6B5    FE 02          C      	CPI	RAMDISK 
  D6B7    CA DA99        C      	JZ	RamD_R 
  D6BA    C3 DA93        C      	jmp	FlpD_R 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-92


                         C      ;********************************************** 
                         C      ; WRITE CURRENT RECORD TO DISK 
                         C      ;  (TRACK) & (SECTOR) DEFINES RECORD 
                         C      ;		POSITION 
  D6BD                   C      WR_REC:: 
  D6BD    3A D6DA        C      	LDA	CPM_DISK 
  D6C0    FE 00          C      	CPI	SD 
  D6C2    C3 DB96        C      	JMP	SD_W 
                         C      	;JZ	SD_W 
  D6C5    FE 02          C      	CPI	RAMDISK 
  D6C7    CA DA9F        C      	JZ	RamD_W	; Check for ramdisk call. 
  D6CA    C3 DA93        C      	jmp	FlpD_W 
                         C       
                         C       
  D6CD    00             C      OLDDSK::	DB	0	; LAST CP/M DISK 
                         C       
                         C       
                         C       
  D6CE    3E FF          C      BAD::	MVI	A,0FFH 
  D6D0    32 D6D4        C      	STA	_IO_RESULT 
  D6D3    C9             C      	RET 
                         C       
                         C      ;	CALL	PRNT## 
                         C      ;	DB	10,13,'Bad sector ',0 
                         C      ;	JMP	0 
                         C       
                         C      ; -------------------------------------------------------- 
                         C      ;		CP/M DISK BIOS VARIABLES 
                         C       
  D6D4                   C      _IO_RESULT:DS	1 
  D6D5                   C      SECT::	ds	1 
  D6D6                   C      SIDE::	ds	1 
  D6D7                   C      DRIVE:	ds	1 
                         C       
  D6D8    00             C      CPM_TRACK::	DB	0 
  D6D9    00             C      CPM_RECORD::	DB	0 
  D6DA    00             C      CPM_DISK::	DB	0 
                         C       
  D6DB    0000           C      DMA_ADDR::	DW	0 
  D6DD    0000           C      _DPTR:		DW	0 
                         C       
                         C      ;STK_SAVE:	DS	2 
  D6DF                   C      OLDF40::		ds	1 
                         C      ;		END 
                                		;include FDCNTR.ASM 
                         C      include B1CONIO.ASM 
                         C      ;************************************************** 
                         C      ;*  B1CONIO.ASM - RK CP/M BIOS console I/O module * 
                         C      ;*	(c) TCHV,		1990-92		  * 
                         C      ;************************************************** 
                         C       
                         C      ; NOTE: This module is designed for use with 8275 display controller 
                         C      ; and 8257 DMA chip 
                         C       
  D6E0                   C      CONVER:: 
  D6E0    0A 0D 43 6F    C      	DB	10,13,'Console I/O        V3.0 Healh/Zenith',0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-93


  D6E4    6E 73 6F 6C    C      
  D6E8    65 20 49 2F    C      
  D6EC    4F 20 20 20    C      
  D6F0    20 20 20 20    C      
  D6F4    20 56 33 2E    C      
  D6F8    30 20 48 65    C      
  D6FC    61 6C 68 2F    C      
  D700    5A 65 6E 69    C      
  D704    74 68 00       C      
                         C       
                         C      ; This module defines following procedures : 
                         C      PUBLIC		CON_ST,CONIN,CONOUT 
                         C      PUBLIC		PRNT,PUTS 
                         C       
                         C      ;INCLUDE RK86.MAC 
                         C      ;INCLUDE 82XX.MAC 
                         C      ;INCLUDE SCREEN.MAC 
                         C       
                         C      ;------------------ Console Input ------------------------ 
                         C       
  D707                   C      CON_ST: 
                         C      IFNDEF OWN_GETC 
                         C      	JMP	0F812H 
                         C      ELSE 
  D707    C3 DDB2        C      	JMP	GETST 
                         C      ENDIF 
                         C       
  D70A                   C      CONIN:: 
                         C      IFDEF OWN_GETC 
  D70A    CD DDA8        C      	CALL	GETCHR 
                         C      ELSE 
                         C      	CALL 0F803H 
                         C      ENDIF 
  D70D    B7             C      	ora	a 
  D70E    CA D71C        C      	jz	ChangeViewMode 
  D711    FE 20          C      	cpi	20h 
  D713    DA D73A        C      	jc	CorrCntrl 
  D716    FE 7F          C      	cpi	7fh 
  D718    CA D73A        C      	jz	CorrCntrl 
  D71B    C9             C      	ret 
                         C       
  D71C                   C      ChangeViewMode: 
  D71C    E5             C      	push	h 
  D71D    2A D734        C      	lhld	ViewPtr 
  D720    23             C      	inx	h 
  D721    7E             C      	mov	a,m 
  D722    B7             C      	ora	a 
  D723    C2 D729        C      	jnz	$+6 
  D726    21 D736        C      	lxi	h,ViewTbl 
  D729    7E             C      	mov	a,m 
  D72A    22 D734        C      	shld	ViewPtr 
  D72D    E1             C      	pop	h 
  D72E    32 D739        C      	sta	ViewMode 
                         C      	;sta	SCR_BUFF 
                         C      IFNDEF	RK60K 
                         C      	@out	PALM_CNTRL 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-94


                         C      ENDIF 
  D731    C3 D70A        C      	jmp	CONIN 
                         C       
  D734    D736           C      ViewPtr: dw	ViewTbl 
  D736    C0 80 00       C      ViewTbl: db	0c0h,80h,0 ; 84h,85h,80h,0 ; ,81h,0 - Not necesarry 
  D739    C0             C      ViewMode:db	0C0h;84H 
                         C       
                         C      ; Perform key translation Acc->Acc 
  D73A                   C      CorrCntrl: 
  D73A    E5             C      	push	h 
  D73B    C5             C      	push	b 
  D73C    47             C      	mov	b,a 
                         C      	@in	PPI+2 
  D73D    3A F782        C+     	lda	PPI+2 
  D740    4F             C      	MOV	C,A 
  D741    3E 20          C      	mvi	a,?SHIFT 
  D743    A1             C      	ana	c 
  D744    CA D762        C      	jz	@exit 
  D747    79             C      	mov	a,c 
  D748    E6 40          C      	ani	?CTRL 
  D74A    C2 D751        C      	jnz	@001 
  D74D    3E 80          C      	mvi	a,80h 
  D74F    B0             C      	ora	b 
  D750    47             C      	mov	b,a 
  D751                   C      @001: 
  D751    21 D768        C      	lxi	h,CorrTbl 
  D754    7E             C      @loop:	mov	a,m 
  D755    23             C      	inx	h 
  D756    23             C              inx	h 
  D757    3C             C      	inr	a 
  D758    CA D762        C      	jz	@exit 
  D75B    3D             C      	dcr	a 
  D75C    B8             C      	cmp	b 
  D75D    C2 D754        C      	jnz	@loop 
  D760    2B             C      	dcx	h 
  D761    46             C      	mov	b,m 
  D762    78             C      @exit:	mov	a,b 
  D763    E6 7F          C      	ani	7fh 
  D765    C1             C      	pop	b 
  D766    E1             C      	pop	h 
  D767    C9             C      	ret 
                         C       
                         C      ; Key translation table 
  D768                   C      CorrTbl: 
                         C      ;****  Arrow keys **** 
  D768    19 05          C      	db	19h,	'E'-40h	; Up 
  D76A    1A 18          C      	db	1Ah,	'X'-40h ; Down 
  D76C    08 08          C      	db	8,	'H'-40h	; Left 
  D76E    18 04          C      	db	18h,	'D'-40h	; Right 
                         C      ;*** Cntrl+Arrow keys *** 
  D770    99 12          C      	db	19h+80h,'R'-40h	; ^Up 
  D772    9A 03          C      	db	1Ah+80h,'C'-40h ; ^Down 
  D774    88 01          C      	db	8+80h,	'A'-40h	; ^Left 
  D776    98 06          C      	db	18h+80h,'F'-40h	; ^Right 
                         C      ;*** Other keys *** 
  D778    7F 08          C      	db	7fh,	8 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-95


                         C       
  D77A    FF             C      	db	0ffh 
                         C       
                         C      ;------------------- Console output ----------------------------- 
                         C       
  D77B    E1             C      PRNT::	POP	H 
  D77C    CD D780        C      	CALL	PUTS 
  D77F    E9             C      	pchl 
                         C       
  D780                   C      PUTS: 
  D780    7E             C      PRNT1:	MOV	A,M 
  D781    23             C      	INX	H 
  D782    4F             C      	MOV	C,A 
  D783    B7             C      	ORA	A 
  D784    C8             C      	RZ 
  D785    CD D78B        C      	CALL	CONOUT 
  D788    C3 D780        C      	JMP	PRNT1 
                         C       
                         C       
  D78B    E5             C      CONOUT:	PUSH	H 
  D78C    C5             C      	PUSH	B 
  D78D    D5             C      	PUSH	D 
  D78E    F5             C      	PUSH	PSW 
  D78F    3A D739        C      	LDA	ViewMode 
                         C      	;STA	SCR_BUFF 
                         C      IFNDEF	RK60K 
                         C      	@out	PALM_CNTRL 
                         C      ENDIF 
  D792    79             C      	MOV	A,C 
  D793    E6 7F          C      	ANI	7FH 
  D795    2A DA18        C      	LHLD	CHPNT 
  D798    CD D7A9        C      	CALL	OUTC 
  D79B    22 DA18        C      	SHLD	CHPNT 
                         C       
  D79E    2A DA1B        C      	lhld	CURX 
  D7A1    CD D9AB        C      	call	GOTOXY 
  D7A4    F1             C      	POP	PSW 
  D7A5    D1             C      	POP	D 
  D7A6    C1             C      	POP	B 
  D7A7    E1             C      	POP	H 
  D7A8    C9             C      	RET 
                         C       
  D7A9    47             C      OUTC:	MOV	B,A 
  D7AA    3A DA1A        C      	LDA	?ESC 
  D7AD    B7             C      	ORA	A 
  D7AE    CA D832        C      	JZ	@@@ 
  D7B1    3D             C      	DCR	A 
  D7B2    32 DA1A        C      	STA	?ESC 
  D7B5    CA D897        C      	JZ	_ESC2 
  D7B8    3D             C      	DCR	A 
  D7B9    CA D87B        C      	JZ	_ESC1 
  D7BC    78             C      	MOV	A,B 
  D7BD    FE 59          C      	CPI	'Y' 
  D7BF    C8             C      	RZ 
  D7C0    F5             C      	PUSH	PSW 
  D7C1    AF             C      	XRA	A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-96


  D7C2    32 DA1A        C      	STA	?ESC 
  D7C5    F1             C      	POP	PSW 
  D7C6    FE 41          C      	cpi	'A' 
  D7C8    CA D913        C      	jz	Up 
  D7CB    FE 42          C      	cpi	'B' 
  D7CD    CA D930        C      	jz	Down 
  D7D0    FE 43          C      	cpi	'C' 
  D7D2    CA D8F9        C      	jz	LEFT 
  D7D5    FE 44          C      	cpi	'D' 
  D7D7    CA D909        C      	jz	Right 
  D7DA    FE 45          C      	CPI	45H 
  D7DC    CA D974        C      	JZ	CLS 
  D7DF    D6 4B          C      	SUI	4BH 
  D7E1    CA D828        C      	JZ	DELEOL 
  D7E4    3D             C      	DCR	A 
  D7E5    CA D805        C      	JZ	INSLIN 
  D7E8    3D             C      	DCR	A 
  D7E9    C0             C      	RNZ 
                         C      ; Delete line contains the cursor 
  D7EA    E5             C      DELLIN:	PUSH	H 
  D7EB    2A DA1D        C      	LHLD	STRADR 
  D7EE    54             C      	MOV	D,H 
  D7EF    5D             C      	MOV	E,L 
  D7F0    CD D9A4        C      	CALL	NXT_S 
  D7F3    7E             C      DL0:	MOV	A,M 
  D7F4    12             C      	STAX	D 
  D7F5    23             C      	INX	H 
  D7F6    13             C      	INX	D 
  D7F7    7A             C      	MOV	A,D 
  D7F8    FE BF          C      	CPI	high(ENDSCR) 
  D7FA    C2 D7F3        C      	JNZ	DL0 
  D7FD    7B             C      	MOV	A,E 
  D7FE    FE 58          C      	CPI	low(ENDSCR) 
  D800    C2 D7F3        C      	JNZ	DL0 
  D803    E1             C      	POP	H 
  D804    C9             C      	RET 
                         C       
                         C      ; INSERT LINE UNDER CURSOR 
  D805    E5             C      INSLIN:	PUSH	H 
  D806    2A DA1D        C      	LHLD	STRADR 
  D809    11 BF58        C      	LXI	D,ENDSCR 
  D80C    01 BF0A        C      	LXI	B,ENDSCR-PHYS_W 
  D80F    0B             C      CPY:	DCX	B 
  D810    1B             C      	DCX	D 
  D811    0A             C      	LDAX	B 
  D812    12             C      	STAX	D 
  D813    78             C      	MOV	A,B 
  D814    BC             C      	CMP	H 
  D815    C2 D80F        C      	JNZ	CPY 
  D818    79             C      	MOV	A,C 
  D819    BD             C      	CMP	L 
  D81A    C2 D80F        C      	JNZ	CPY 
                         C       
  D81D    3E 4E          C      	MVI	A,SCR_W 
  D81F    36 00          C      FILL:	MVI	M,0 
  D821    23             C      	INX	H 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-97


  D822    3D             C      	DCR	A 
  D823    C2 D81F        C      	JNZ	FILL 
  D826    E1             C      	POP	H 
  D827    C9             C              RET 
                         C       
                         C       
                         C      ; DELETE TO END OF LINE 
  D828    E5             C      DELEOL:	PUSH	H 
  D829    2A DA18        C      	LHLD	CHPNT 
  D82C    3A DA1B        C      	LDA	CURX 
  D82F    C3 D81F        C      	JMP	FILL 
                         C       
                         C       
  D832    78             C      @@@:	MOV	A,B 
  D833    FE 1B          C      	CPI	@ESC 
  D835    CA D875        C      	JZ	_ESC 
  D838    FE 0D          C      	CPI	0DH 
  D83A    CA D949        C      	JZ	@CR 
  D83D    FE 0A          C      	CPI	0AH 
  D83F    CA D953        C      	JZ	@LF 
  D842    FE 08          C      	CPI	8 
  D844    CA D8F9        C      	JZ	LEFT 
  D847    FE 07          C      	CPI	7 
  D849    CA D8A8        C      	JZ	BELL 
  D84C    FE 1F          C      	CPI	1FH 
  D84E    CA D974        C      	JZ	CLS 
  D851    77             C      	MOV	M,A 
  D852    23             C      	INX	H 
  D853    3A DA1B        C      	LDA	CURX 
  D856    3D             C      	DCR	A 
  D857    32 DA1B        C      	STA	CURX 
  D85A    C0             C      	RNZ 
  D85B    3A DA16        C      	LDA	XSIZE 
  D85E    32 DA1B        C      	STA	CURX 
  D861    2A DA1D        C      	LHLD	STRADR 
  D864    CD D9A4        C      	CALL	NXT_S 
  D867    3A DA1C        C      	LDA	CURY 
  D86A    3D             C      	DCR	A 
  D86B    CA D8AE        C      	JZ	SCRUP 
  D86E    32 DA1C        C      	STA	CURY 
  D871    22 DA1D        C      	SHLD	STRADR 
  D874    C9             C      	RET 
                         C       
  D875    3E 03          C      _ESC:	MVI	A,3 
  D877    32 DA1A        C      	STA	?ESC 
  D87A    C9             C      	RET 
                         C       
  D87B    3A DA17        C      _ESC1:	LDA	YSIZE 
  D87E    F5             C      	PUSH	PSW 
  D87F    C6 20          C      	ADI	20H 
  D881    90             C      	SUB	B 
  D882    32 DA1C        C      	STA	CURY 
  D885    47             C      	MOV	B,A 
  D886    F1             C      	POP	PSW 
  D887    90             C      	SUB	B 
  D888    2A DA14        C      	LHLD	BEGSCR 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-98


  D88B    3C             C      	INR	A 
  D88C    22 DA1D        C      _@ESC:	SHLD	STRADR 
  D88F    3D             C      	DCR	A 
  D890    C8             C      	RZ 
  D891    CD D9A4        C      	CALL	NXT_S 
  D894    C3 D88C        C      	JMP	_@ESC 
                         C       
  D897    3A DA16        C      _ESC2:	LDA	XSIZE 
  D89A    C6 20          C      	ADI	20H 
  D89C    90             C      	SUB	B 
  D89D    32 DA1B        C      	STA	CURX 
  D8A0    78             C      	MOV	A,B 
  D8A1    D6 20          C      	SUI	20H 
  D8A3    4F             C      	MOV	C,A 
  D8A4    06 00          C      	MVI	B,0 
  D8A6    09             C      	DAD	B 
  D8A7    C9             C      	RET 
                         C       
  D8A8    E5             C      BELL:	PUSH	H 
  D8A9    CD FD24        C      	CALL	0FD24H 
  D8AC    E1             C      	POP	H 
  D8AD    C9             C      	RET 
                         C       
  D8AE    2A DA1D        C      SCRUP:	LHLD	STRADR 
                         C       
  D8B1    E5             C      SCROLL:	PUSH	H 
  D8B2    2A DA14        C      	LHLD	BEGSCR 
  D8B5    54             C      	MOV	D,H 
  D8B6    5D             C      	MOV	E,L 
  D8B7    CD D9A4        C              CALL	NXT_S 
  D8BA    3A DA17        C      	LDA	YSIZE 
  D8BD    3D             C      	DCR	A 
  D8BE    4F             C      	MOV	C,A 
  D8BF    3A DA16        C      SCRU0:	LDA	XSIZE 
  D8C2    47             C      	MOV	B,A 
  D8C3    7E             C      SCRU1:	MOV	A,M 
  D8C4    12             C      	STAX	D 
  D8C5    23             C      	INX	H 
  D8C6    13             C      	INX	D 
  D8C7    05             C      	DCR	B 
  D8C8    C2 D8C3        C      	JNZ	SCRU1 
  D8CB    CD D8E6        C      	CALL	NEXTST 
  D8CE    EB             C      	XCHG 
  D8CF    CD D8E6        C      	CALL	NEXTST 
  D8D2    EB             C      	XCHG 
  D8D3    0D             C      	DCR	C 
  D8D4    C2 D8BF        C      	JNZ	SCRU0 
  D8D7    2A DA1D        C      	LHLD	STRADR 
  D8DA    3A DA16        C      	LDA	XSIZE 
  D8DD    36 00          C      SCRU2:	MVI	M,0 
  D8DF    23             C      	INX	H 
  D8E0    3D             C      	DCR	A 
  D8E1    C2 D8DD        C       	JNZ	SCRU2 
  D8E4    E1             C      	POP	H 
  D8E5    C9             C      	RET 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-99


  D8E6    3A DA16        C      NEXTST:	LDA	XSIZE 
  D8E9    2F             C      	CMA 
  D8EA    3C             C      	INR	A 
  D8EB    C6 4E          C      	ADI	PHYS_W 
  D8ED    85             C      	ADD	L 
  D8EE    6F             C      	MOV	L,A 
  D8EF    D0             C      	RNC 
  D8F0    24             C      	INR	H 
  D8F1    C9             C      	RET 
                         C       
  D8F2    C5             C      PrevST:	push	b 
  D8F3    01 FFB2        C      		lxi	b,-Phys_W 
  D8F6    09             C      		dad	b 
  D8F7    C1             C      	pop	b 
  D8F8    C9             C      	RET 
                         C       
                         C       
  D8F9    3A DA1B        C      LEFT:	LDA	CURX 
  D8FC    3C             C      	INR	A 
  D8FD    47             C      	MOV	B,A 
  D8FE    3A DA16        C      	LDA	XSIZE 
  D901    B8             C      	CMP	B 
  D902    D8             C      	RC 
  D903    78             C      	MOV	A,B 
  D904    32 DA1B        C      	STA	CURX 
  D907    2B             C      	DCX	H 
  D908    C9             C      	RET 
                         C       
                         C       
  D909    3A DA1B        C      RIGHT:	LDA	CURX 
  D90C    3D             C      	DCR	A 
  D90D    C8             C      	RZ 
  D90E    32 DA1B        C      	STA	CURX 
  D911    23             C      	INX	H 
  D912    C9             C      	RET 
                         C       
                         C       
  D913    3A DA1C        C      UP:	LDA	CURY 
  D916    3C             C      	INR	A 
  D917    47             C      	MOV	B,A 
  D918    3A DA17        C      	LDA	YSIZE 
  D91B    B8             C      	CMP	B 
  D91C    D8             C      	rc	; JC	LFT0 
  D91D    78             C      	MOV	A,B 
  D91E    32 DA1C        C      	STA	CURY 
  D921    CD D8F2        C      	call	PrevSt 
  D924    E5             C      	push	h 
  D925    2A DA1D        C              LHLD	STRADR 
  D928    CD D8F2        C      	call	PrevSt 
  D92B    22 DA1D        C      	shld	STRADR 
  D92E    E1             C      	pop	h 
  D92F    C9             C      	RET 
                         C       
                         C       
                         C       
  D930    3A DA1C        C      DOWN:	LDA	CURY 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-100


  D933    3D             C      	DCR	A 
  D934    CA D948        C      	JZ	DWN0 
  D937    32 DA1C        C      	STA	CURY 
                         C       
  D93A    E5             C      	push	h 
  D93B    2A DA1D        C      	LHLD	STRADR 
  D93E    CD D9A4        C      	CALL	Nxt_S 
  D941    22 DA1D        C      	SHLD	STRADR 
  D944    E1             C      	pop	h 
  D945    C3 D9A4        C      	jmp	Nxt_S 
                         C       
  D948    C9             C      DWN0:	RET 
                         C       
                         C       
  D949    3A DA16        C      @CR:	LDA	XSIZE 
  D94C    32 DA1B        C      	STA	CURX 
  D94F    2A DA1D        C      	LHLD	STRADR 
  D952    C9             C      	RET 
                         C       
  D953    EB             C      @LF:	XCHG 
  D954    2A DA1D        C      	LHLD	STRADR 
  D957    CD D9A4        C      	CALL	NXT_S 
  D95A    EB             C      	XCHG 
  D95B    CD D9A4        C      	CALL	NXT_S 
  D95E    3A DA1C        C      	LDA	CURY 
  D961    3D             C      	DCR	A 
  D962    CA D96E        C      	JZ	SCRLL 
  D965    32 DA1C        C      	STA	CURY 
  D968    EB             C      	XCHG 
  D969    22 DA1D        C      	SHLD	STRADR 
  D96C    EB             C      	XCHG 
  D96D    C9             C      	RET 
                         C       
  D96E    2A DA18        C      SCRLL:	LHLD	CHPNT 
  D971    C3 D8B1        C      	JMP	SCROLL 
                         C       
  D974    CD D991        C      CLS:	CALL	@HOME 
                         C      IF 1 
  D977    E5             C      	PUSH	H 
  D978    D5             C      	PUSH	D 
  D979    01 0249        C      	LXI	B,SCR_SIZE/4 
  D97C    21 0000        C      	LXI	H,0 
  D97F    54             C      	MOV	D,H 
  D980    5C             C      	MOV	E,H 
  D981    39             C      	DAD	SP 
  D982    31 BFF4        C      	LXI	SP,SCR_BUFF+SCR_SIZE 
  D985                   C      CLS0: 
  D985    D5             C      	PUSH	D 
  D986    D5             C      	PUSH	D 
  D987    0B             C      	DCX	B 
  D988    78             C      	MOV	A,B 
  D989    B1             C      	ORA	C 
  D98A    C2 D985        C      	JNZ	CLS0 
  D98D    F9             C      	SPHL 
  D98E    D1             C      	POP	D 
  D98F    E1             C      	POP	H 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-101


  D990    C9             C      	RET 
                         C      ELSE 
                         C      	LDA	YSIZE 
                         C      	MOV	B,A 
                         C      	PUSH	H 
                         C      CLS0:	LDA	XSIZE 
                         C      	MOV	C,A 
                         C      	PUSH	H 
                         C      CLS1:	MVI	M,0 
                         C      	INX	H 
                         C      	DCR	C 
                         C      	JNZ	CLS1 
                         C      	POP	H 
                         C      	CALL	NXT_S 
                         C      	DCR	B 
                         C      	JNZ	CLS0 
                         C      	POP	H 
                         C      	RET 
                         C      ENDIF 
                         C       
  D991    2A DA14        C      @HOME:	LHLD	BEGSCR 
  D994    22 DA1D        C      	SHLD	STRADR 
  D997    3A DA16        C      	LDA	XSIZE 
  D99A    32 DA1B        C      	STA	CURX 
  D99D    3A DA17        C      	LDA	YSIZE 
  D9A0    32 DA1C        C      	STA	CURY 
  D9A3    C9             C      	RET 
                         C       
                         C       
  D9A4    C5             C      NXT_S:	PUSH	B 
  D9A5    01 004E        C      	LXI	B,PHYS_W 
  D9A8    09             C      	DAD	B 
  D9A9    C1             C      	POP	B 
  D9AA    C9             C      	RET 
                         C       
                         C      ;*********** 8275 chip dependent features **************** 
                         C       
                         C      ; Set CURSOR to position  HL : (Y,X) 
  D9AB    3E 80          C      GOTOXY:	MVI	A,80H	; Cursor move command 
                         C      	@OUT	DISP+1 
  D9AD    32 F7C1        C+     	sta	DISP+1 
                         C       
  D9B0    45             C      	MOV	B,L 
  D9B1    3A DA16        C      	LDA	XSIZE 
  D9B4    90             C      	SUB	B 
                         C      	@out	DISP 
  D9B5    32 F7C0        C+     	sta	DISP 
                         C       
  D9B8    44             C      	MOV	B,H 
  D9B9    3A DA17        C      	LDA	YSIZE 
  D9BC    90             C      	SUB	B 
  D9BD    C6 02          C      	ADI	FirstStr 
                         C      	@OUT	DISP 
  D9BF    32 F7C0        C+     	sta	DISP 
  D9C2    C9             C      	RET 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-102


                         C      ;EXTRN	Disp_PB 
                         C       
                         C      ; Set a screen mode according to Disp_PB 
  D9C3                   C      SETSCR:: 
  D9C3    E5             C      	PUSH	H 
  D9C4    C5             C      	PUSH	B 
                         C       
                         C      ; *** Load 8275 controller **** 
                         C       
  D9C5    AF             C      	XRA	A 
                         C      	@OUT	DISP+1	; Stop displaying 
  D9C6    32 F7C1        C+     	sta	DISP+1 
                         C       
  D9C9    0E 04          C      	MVI	C,4 
  D9CB    21 DA1F        C      	lxi	h,Disp_PB	; Display parameter block 
                         C      	rept	4 
                         C      		mov	a,m 
                         C      		inx	h 
                         C      		@out	DISP 
                         C      	endm 
  D9CE    7E             C+     		mov	a,m 
  D9CF    23             C+     		inx	h 
  D9D0    32 F7C0        C+     	sta	DISP 
  D9D3    7E             C+     		mov	a,m 
  D9D4    23             C+     		inx	h 
  D9D5    32 F7C0        C+     	sta	DISP 
  D9D8    7E             C+     		mov	a,m 
  D9D9    23             C+     		inx	h 
  D9DA    32 F7C0        C+     	sta	DISP 
  D9DD    7E             C+     		mov	a,m 
  D9DE    23             C+     		inx	h 
  D9DF    32 F7C0        C+     	sta	DISP 
                         C       
  D9E2    3E 27          C      	mvi	a,27H 
                         C      	@out	DISP+1 
  D9E4    32 F7C1        C+     	sta	DISP+1 
                         C      	@in	DISP+1	; Clear RVV flag 
  D9E7    3A F7C1        C+     	lda	DISP+1 
  D9EA                   C      @wait_RVV: 
                         C      	@in	DISP+1	; Wait RVV signal 
  D9EA    3A F7C1        C+     	lda	DISP+1 
  D9ED    E6 20          C      	ANI	DISP_INTR_Flag 
  D9EF    CA D9EA        C      	JZ	@wait_RVV 
                         C       
                         C      ;*** Load 8257 controller *** 
                         C       
  D9F2    3E 80          C      	mvi	a,80h 
                         C      	@out	DMA+8	; Control register 
  D9F4    32 F7E8        C+     	sta	DMA+8 
                         C       
                         C      	rept	2 
                         C      		mov	a,m 
                         C      		@out	DMA+4	; Load channel 3 
                         C      		inx	h 
                         C      	endm 
  D9F7    7E             C+     		mov	a,m 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-103


  D9F8    32 F7E4        C+     	sta	DMA+4 
  D9FB    23             C+     		inx	h 
  D9FC    7E             C+     		mov	a,m 
  D9FD    32 F7E4        C+     	sta	DMA+4 
  DA00    23             C+     		inx	h 
                         C       
  DA01    7E             C      	mov	a,m 
                         C      	@out	DMA+5 
  DA02    32 F7E5        C+     	sta	DMA+5 
  DA05    23             C      	inx	h 
  DA06    7E             C      	mov	a,m 
  DA07    F6 40          C      	ori	40h 
                         C      	@out	DMA+5 
  DA09    32 F7E5        C+     	sta	DMA+5 
  DA0C    3E A4          C      	mvi	a,0a4h 
                         C      	@out	DMA+8 
  DA0E    32 F7E8        C+     	sta	DMA+8 
  DA11    C1             C      	POP	B 
  DA12    E1             C      	POP	H 
  DA13    C9             C      	RET 
                         C       
                         C      ; User defined window coordinates 
  DA14    B76C           C      BEGSCR:	DW	VRAM 
  DA16    4E             C      XSIZE:	DB	SCR_W 
  DA17    1A             C      YSIZE:	DB	SCR_H 
                         C      ;*************************************** 
                         C       
                         C      ; Internal variables 
  DA18    B76C           C      CHPNT:	DW	VRAM	; Current position in screen buffer 
  DA1A    00             C      ?ESC:	DB	0	; ESC sequence flag 
                         C       
  DA1B    4E             C      CURX:	DB	SCR_W	; Current cursor location ( from DOWN-RIGHT corner) 
  DA1C    1A             C      CURY:	DB	SCR_H 
  DA1D    B76C           C      STRADR:	DW	VRAM	; Start of current line 
                         C      ;	end 
                         C       
                         C      include B1DISPB.ASM 
                         C      ; *****	B1DISPB.ASM - Display parameter block ********* 
                         C       
                         C      ;INCLUDE A:SCREEN.MAC 
                         C       
  0000                   C      S	equ	0b	; All/Odd lines to display    (0/1) 
  0001                   C      VV	equ	01b	; Frame reverse time:   00 - 1 T_Row 
                         C      ;						01 - 2 T_Row 
                         C      ;						02 - 3 T_Row 
                         C      ;						03 - 4 T_Row 
  000F                   C      UUUU	equ	16-1	; Cursor scan line number     (1..16) 
  000F                   C      LLLL	equ	16-1	; Number of scan lines/symbol (1..16) 
  0000                   C      @M	equ	0	; Count lines 0 -  from 0  ; 1 - from 1 
  0001                   C      @F	equ	1	; Display ctrl symbols : 0 - as space 
  0001                   C      CC	equ	01	; Cursor style 		      (0..3) 
                         C      ;						 1 - no display 
  0008                   C      ZZZZ	equ	08h	; Horizontal RVV time 
                         C       
  DA1F    4D             C      Disp_PB::	db	S*128+PHYS_W-1 
  DA20    5D             C      		db	VV*64+PHYS_H-1	; Display parameters 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-104


  DA21    FF             C      		db	UUUU*16+LLLL 
  DA22    58             C      		db	@M*128+@F*64+CC*16+ZZZZ 
  DA23    B6D0 0923      C      		dw	SCR_BUFF,PHYS_W*PHYS_H-1; DMA parameters 
                         C      ;		END 
                         C       
                         C      		include B1LSTAUX.ASM 
                         C      ;	B0LSTAUX.ASM - LST AND AUX FUNCTIONS 
  DA27    0A 0D 4C 53    C      LSTVER::	DB	10,13,'LST/AUX DRIVER V3.02     31-May-1993',0 
  DA2B    54 2F 41 55    C      
  DA2F    58 20 44 52    C      
  DA33    49 56 45 52    C      
  DA37    20 56 33 2E    C      
  DA3B    30 32 20 20    C      
  DA3F    20 20 20 33    C      
  DA43    31 2D 4D 61    C      
  DA47    79 2D 31 39    C      
  DA4B    39 33 00       C      
                         C       
                         C      ;INCLUDE RK86.MAC 
                         C       
                         C      ;--------- AUX DRIVER       (C) TCHV ------------ 
                         C       
  DA4E    C9             C      PUNCH::		RET 
                         C       
  DA4F    3E 1A          C      READER::	MVI	A,1AH 
  DA51    C9             C      		RET 
                         C       
                         C      ;--------- LST DRIVER       (C) TCHV --------------- 
  DA52    C3 DA58        C      LSTOUT::	JMP	LPUTC 
  DA55    3E FF          C      LST_ST::	MVI	A,0FFH 
  DA57    C9             C      		RET 
                         C       
  0001                   C      MC6312	EQU	1 
                         C       
                         C      if 	MC6312	; MC6312 printer with centronix interface 
  0000                   C      TextTransl	equ	0 
  0000                   C      TabReplace	equ	0 
  0000                   C      NoPrint		equ	0 
  0001                   C      CENTRONIX	equ	1 
                         C      else 
                         C      TextTransl	equ	1 
                         C      TabReplace	equ	1 
                         C      NoPrint		equ	0 
                         C      endif 
                         C       
                         C      IF 	NoPrint 
                         C      LPUTC:		RET 
                         C      ELSE 
  0008                   C      TabSize 	equ	8 
                         C       
                         C       
                         C      IF 	TabReplace 
                         C      ExpandTab: 
                         C      	push	b 
                         C      	lda	TabLeft 
                         C      	mvi	c,20h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-105


                         C      @exp_tab_loop: 
                         C      	call	Raw_LPUTC 
                         C      	dcr	a 
                         C      	jnz	@exp_Tab_Loop 
                         C      	mvi	a,TabSize 
                         C      	sta	TabLeft 
                         C      	pop	b 
                         C      	pop	psw 
                         C      	ret 
                         C      ENDIF 
                         C       
  DA58                   C      LPUTC: 
  DA58    F5             C      	push	psw 
                         C      IF	TabReplace 
                         C      	mov	a,c 
                         C      	cpi	9 
                         C      	jz	ExpandTab 
                         C      	cpi	0Ah 
                         C      	jz	@01 
                         C      	lda	TabLeft 
                         C      	dcr	a 
                         C      	sta	TabLeft 
                         C      	jnz	@00 
                         C      @01:	mvi	a,TabSize 
                         C      	sta	TabLeft 
                         C      @00: 
                         C      ENDIF 
                         C      IF	TextTransl 
                         C      	mov	a,c 
                         C      	cpi	60h 
                         C      	jc	@3 
                         C       
                         C      	cpi	80h 
                         C      	jnc	@1 
                         C      	adi	0c0h-60h 
                         C      	jmp	@3 
                         C       
                         C      @1:	cpi	80h+40h 
                         C      	jc	@3 
                         C       
                         C      	cpi	80h+60h 
                         C      	jnc	@2 
                         C      	adi	20h 
                         C      	jmp	@3 
                         C       
                         C      @2:	sui	80h 
                         C      @3:	mov	c,a 
                         C      ENDIF 
  DA59    F1             C      	pop	psw 
  DA5A                   C      Raw_LPUTC: 
                         C       
  F7A1                   C      PPI2_B	EQU	PPI2+1 
  F7A2                   C      PPI2_C	EQU	PPI2+2 
  F7A3                   C      PPI2_CR	EQU	PPI2+3 
                         C       
  DA5A    F5             C      	push	psw 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-106


  DA5B    3A DA8D        C      	lda	PPI_Init_flag 
  DA5E    B7             C      	ora	a 
  DA5F    C2 DA6A        C      	jnz	@skip 
  DA62    3E 91          C      	mvi	a,91H 
                         C      	@out	PPI2_CR 
  DA64    32 F7A3        C+     	sta	PPI2_CR 
  DA67    32 DA8D        C      	sta	PPI_Init_flag 
  DA6A    3E 0F          C      @skip:	MVI	A,@set 
                         C      	@out	PPI2_CR 
  DA6C    32 F7A3        C+     	sta	PPI2_CR 
  DA6F                   C      @L_wait: 
                         C      	@in	PPI2_C	; Wait for busy signal 
  DA6F    3A F7A2        C+     	lda	PPI2_C 
                         C      ifdef	CENTRONIX 
  DA72    E6 01          C      	ani	00000001b 
  000F                   C      @set	equ	0fh 
  000E                   C      @clr	equ	0eh 
                         C      else 
                         C      @set	equ	0eh 
                         C      @clr	equ	0fh 
                         C      	ani	00000011b 
                         C      endif 
                         C       
  DA74    C2 DA6F        C      	jnz	@L_wait 
  DA77    79             C      	mov	a,c 
                         C      	@out	PPI2_B 
  DA78    32 F7A1        C+     	sta	PPI2_B 
  DA7B    3E 0E          C      	mvi	a,@clr 
                         C      	@out	PPI2_CR 
  DA7D    32 F7A3        C+     	sta	PPI2_CR 
  DA80    3E 3F          C      	MVI	A,3FH 
  DA82                   C      @L_delay: 
  DA82    3D             C      	DCR	A 
  DA83    C2 DA82        C      	JNZ	@L_Delay 
  DA86    3E 0F          C      	MVI	A,@SET 
                         C      	@OUT	PPI2_CR 
  DA88    32 F7A3        C+     	sta	PPI2_CR 
  DA8B    F1             C      	pop	psw 
  DA8C    C9             C      	RET 
                         C       
  DA8D    00             C      PPI_Init_Flag:	db	0 
                         C      IF	TabReplace 
                         C      TabLeft:	db	TabSize 
                         C      ENDIF 
                         C      ENDIF	; NoPrint 
                         C      ;	END 
                         C       
                                ;include B0FLPDSK.ASM 
                         C      include B0FlpDmy.ASM 
  DA8E                   C      FlpD_I: 
  DA8E    AF             C      	XRA	A 
  DA8F    32 D6CD        C      	STA	OLDDSK 
  DA92    C9             C      	RET 
  DA93                   C      FLSH_WB: 
  DA93                   C      WT_END_CMD: 
  DA93                   C      ChgDrive: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-107


  DA93                   C      FlpD_R: 
  DA93                   C      FlpD_W: 
  DA93    C9             C      	RET 
                         C      ; Disk parameters 
  DA94                   C      FLP_TBL:: 
  DA94    04             C      RecsPerSect:	db	4 
  DA95    09             C      MaxSect:	db	9	; Maximum sector number 
  DA96    0F             C      FullMask:	db	0fh	; Full sector mask 
  DA97    02             C      SectShift:	db	2 
                         C       
  DA98    00             C      LAST_OPER:	DB	0 
                         C      include b0RAMDSK.ASM 
                         C      ; 	B0RAMDSK.ASM - RK-86 ram disk operations 
                         C       
                         C      ;	 7-sep-1993 - separate module 
                         C      	.8080 
                         C       
                         C      PUBLIC	RamD_R,RamD_W 
                         C       
                         C      ;EXTRN	CPM_RECORD,CPM_TRACK,DMA_ADDR	; From BxDISK module 
                         C       
                         C       
                         C      ;------ RAM DISK OPERATIONS ------------- 
                         C      ; READ ONE SECTOR FROM RAM DISK 
  DA99    CD DAA6        C      RamD_R:	CALL	CMP_ADR 
  DA9C    C3 DAE9        C      	JMP	EXT_TO_RAM 
                         C       
                         C      ; WRITE ONE SECTOR TO RAM DISK 
  DA9F    CD DAA6        C      RamD_W:	CALL	CMP_ADR 
  DAA2    C3 DAC2        C      	JMP	RAM_TO_EXT 
                         C       
  DAA5                   C      RamD_I:: 
  DAA5    C9             C      	RET 
                         C       
                         C      ; Compute address for ramdisk operations 
                         C      ; Out:	HL - DMA address 	(RAM) 
                         C      ;	DE - RAMDISK address 	(ERAM) 
                         C      ;	BC - record size (128) 
  DAA6    3A D6D8        C      CMP_ADR:LDA	CPM_TRACK 
  DAA9    67             C      	MOV	H,A 
  DAAA    2E 00          C      	MVI	L,0 
  DAAC    29             C      	DAD	H 
  DAAD    29             C      	DAD	H	; hl=trk*1024 
                         C       
  DAAE    01 0080        C      	LXI	B,128 
  DAB1    3A D6D9        C      	LDA	CPM_RECORD 
  DAB4    3D             C      	dcr	a 
  DAB5    CA DABD        C      	jz	@cmp1 
  DAB8    09             C      @cmp0:	DAD	B 
  DAB9    3D             C      	DCR	A 
  DABA    C2 DAB8        C      	JNZ	@cmp0 
  DABD    EB             C      @cmp1:	xchg 
  DABE    2A D6DB        C      	lhld	DMA_ADDR 
  DAC1    C9             C      	RET 
                         C       
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-108


                         C      ; Copy	from ordinary RAM to extended RAM 
                         C      ;	hl - RAM  addr (to) 
                         C      ;	de - ERAM addr (from) 
                         C      ;	bc - length 
  DAC2                   C      RAM_TO_EXT:: 
  DAC2    22 DB1C        C      	shld	@@tmp 
  DAC5    21 0000        C      	lxi	h,0 
  DAC8    39             C      	dad	sp 
  DAC9    22 DB1E        C      	shld	STK_SAVE 
                         C       
  DACC    2A DB1C        C      	lhld	@@tmp 
  DACF    09             C      	dad	b 
  DAD0    EB             C      	xchg 
  DAD1    09             C      	dad	b	; Copying from top to bottom 
                         C       
  DAD2    CD DB14        C      	call	SHR_BC	; BC/=2 
                         C       
  DAD5    F9             C      	sphl		; Set SP to source 
  DAD6    EB             C      	xchg		; HL to destination 
                         C       
  DAD7    3E FF          C      	MVI	A,0FFH 
  DAD9    D3 FF          C      	OUT	0FFH 
  DADB    2B             C      WR_LP:	DCX	H 
  DADC    56             C      	MOV	D,M 
  DADD    2B             C      	DCX	H 
  DADE    5E             C      	MOV	E,M 
  DADF    D5             C      	PUSH	D 
  DAE0    0B             C      	DCX	B 
  DAE1    78             C      	MOV	A,B 
  DAE2    B1             C      	ORA	C 
  DAE3    C2 DADB        C      	JNZ	WR_LP 
  DAE6    C3 DB0B        C      	JMP	RW_CMN 
                         C       
                         C      ; Copy	from extended RAM to ordinary RAM 
                         C      ;	hl - RAM addr  (to) 
                         C      ;	de - ERAM addr (from) 
                         C      ;	bc - length 
  DAE9                   C      EXT_TO_RAM:: 
  DAE9    22 DB1C        C      	shld	@@tmp 
  DAEC    21 0000        C      	lxi	h,0 
  DAEF    39             C      	dad	sp 
  DAF0    22 DB1E        C      	shld	STK_SAVE 
                         C       
  DAF3    2A DB1C        C      	lhld	@@tmp 
                         C       
  DAF6    CD DB14        C      	call	SHR_BC	; BC/=2 
                         C       
  DAF9    EB             C      	xchg 
  DAFA    F9             C      	sphl		; Set SP to destination, 
  DAFB    EB             C      	xchg		; HL to source 
  DAFC    3E FF          C      	MVI	A,0FFH 
  DAFE    D3 FF          C      	OUT	0FFH 
                         C       
  DB00    D1             C      RD_LP:	POP	D 
  DB01    73             C      	MOV	M,E 
  DB02    23             C      	INX	H 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-109


  DB03    72             C      	MOV	M,D 
  DB04    23             C      	INX	H 
  DB05    0B             C      	DCX	B 
  DB06    78             C      	MOV	A,B 
  DB07    B1             C      	ORA	C 
  DB08    C2 DB00        C      	JNZ	RD_LP 
  DB0B    AF             C      RW_CMN:	XRA	A 
  DB0C    D3 FF          C      	OUT	0FFH 
  DB0E    2A DB1E        C      	LHLD	STK_SAVE 
  DB11    F9             C      	SPHL 
  DB12    AF             C      	XRA	A 
  DB13    C9             C      	RET 
                         C       
                         C       
  DB14                   C      SHR_BC: 
  DB14    B7             C      	ora	a	; Clear CY 
  DB15    78             C      	mov	a,b 
  DB16    1F             C      	rar 
  DB17    47             C      	mov	b,a 
  DB18    79             C      	mov	a,c 
  DB19    1F             C      	rar 
  DB1A    4F             C      	mov	c,a 
  DB1B    C9             C      	ret 
                         C       
  DB1C                   C      @@tmp:	ds	2 
  DB1E                   C      STK_SAVE:	ds	2 
  DB20                   C      RAMDSK_END:: 
                         C      ;	END 
                         C      include B0SD.ASM 
                         C      ; 	B0SD.ASM - RK-86 SD card operations 
                         C       
                         C      ;	 7-sep-1993 - separate module 
                         C      	.8080 
                         C       
                         C      PUBLIC	SD_R,SD_W 
                         C       
                         C      ;EXTRN	CPM_RECORD,CPM_TRACK,DMA_ADDR	; From BxDISK module 
                         C       
                         C      IFNDEF	USE_PRG_DC 
  DB20                   C      SAV_SYS:: 
  DB20    C9             C      	RET 
  DB21                   C      LD_SYS:: 
  DB21    21 DB40        C      	LXI	H,CPM_BIN 
  DB24    16 00          C      	MVI	D,0 
  DB26    CD DC26        C      	CALL	CmdOpenDelete 
  DB29    11 0000        C      	LXI	D,0 
  DB2C    21 00A4        C      	LXI	H,4+(CCP_START-100h) 
  DB2F    06 00          C      	MVI	B,0 
  DB31    CD DC3D        C      	CALL	CmdSeekGetSize 
                         C       
  DB34    11 BC00        C      	LXI	D,C_BASE 
  DB37    21 1600        C      	LXI	H,B_BASE-C_BASE;C_SIZE+D_SIZE 
  DB3A    CD DC5F        C      	CALL	CmdRead 
  DB3D    C3 DBAB        C      	JMP	SD_I01 
                         C       
  DB40                   C      CPM_BIN: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-110


  DB40                   C      	DS	64 
                         C      ELSE 
                         C      SAV_SYS:: 
                         C      	LXI	H,0 
                         C      	DAD	SP 
                         C      	SHLD	STK 
                         C       
                         C      	LXI	D,C_BASE 
                         C      	LXI	H, 0 
                         C      	JMP	LD_S01 
                         C       
                         C      LD_SYS:: 
                         C      	LXI	H,0 
                         C      	DAD	SP 
                         C      	SHLD	STK 
                         C      	LXI	H,C_BASE 
                         C      	LXI	D,0 
                         C      LD_S01:	LXI	B, (B_BASE-C_BASE) / 4 
                         C       
                         C      	MVI	A,0C1H 
                         C      	@out	PALM_CNTRL 
                         C       
                         C      	XCHG 
                         C      	SPHL 
                         C      	XCHG 
                         C      	INR	B 
                         C      @02:	REPT	2 
                         C      	POP	D	; 10 
                         C      	MOV	M,E	; 7 
                         C      	INX	H	; 5 
                         C      	MOV	M,D	; 7 
                         C      	INX	H	; 5 = 34 
                         C      	ENDM 
                         C       
                         C      	DCR	C	; 5 
                         C      	JNZ	@02	; 10 = 49 / 2 bytes = 25 or (34 * 2 + 15)/4 = 21 
                         C      	DCR	B 
                         C      	JNZ	@02 
                         C      	LHLD	STK 
                         C      	SPHL 
                         C       
                         C      	MVI	A,0C0H 
                         C      	@out	PALM_CNTRL 
                         C      	RET 
                         C       
                         C       
                         C      IF	0 
                         C      ; 
                         C      ;void *memcpy(dest,source,n) 
                         C      ; void *dest,*source; size_t n; 
                         C      ; 
                         C      memcpy:: 
                         C      @01: 
                         C      	MOV	A,C	; 5 
                         C      	ORA	B	; 4 
                         C      	JZ	@00	; 10 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-111


                         C      	LDAX	D	; 7 
                         C      	INX	D	; 5 
                         C      	MOV	M,A	; 7 
                         C      	INX	H	; 5 
                         C      	DCX	B	; 5 
                         C      	JMP	@01	; 10 = 58 
                         C      @00: 
                         C      ENDIF 
                         C       
                         C      STK:	DS	2 
                         C      ENDIF 
                         C       
                         C      ;------ RAM DISK OPERATIONS ------------- 
                         C      ; READ ONE SECTOR FROM RAM DISK 
  DB80    CD DBC3        C      SD_R:	CALL	SD_SEEK 
  DB83    2A D6DB        C      	LHLD	DMA_ADDR 
  DB86    EB             C      	XCHG 
  DB87    21 0080        C      	LXI	h,128 
  DB8A    CD DC5F        C      	CALL	CmdRead 
  DB8D                   C      SD_ERR_CHECK: 
  DB8D    AF             C      	XRA	A 
  DB8E    C9             C      	RET 
  DB8F    B7             C      	ORA	A 
  DB90    3E 00          C      	MVI	A,0 
  DB92    C8             C      	RZ 
  DB93    3E 01          C      	MVI	A,1 
  DB95    C9             C      	RET 
                         C       
                         C      ; WRITE ONE SECTOR TO RAM DISK 
  DB96    E5             C      SD_W:	PUSH	H 
  DB97    D5             C      	PUSH	D 
  DB98    C5             C      	PUSH	B 
  DB99    CD DBC3        C      	CALL	SD_SEEK 
  DB9C    2A D6DB        C      	LHLD	DMA_ADDR 
  DB9F    EB             C      	XCHG 
  DBA0    21 0080        C      	LXI	h,128 
  DBA3    CD DC6F        C      	CALL	CmdWrite 
  DBA6    C1             C      	POP	B 
  DBA7    D1             C      	POP	D 
  DBA8    E1             C      	POP	H 
  DBA9    AF             C      	XRA	A 
  DBAA    C9             C      	RET 
                         C      	;JMP	SD_ERR_CHECK 
                         C       
  DBAB                   C      SD_I:: 
                         C       
  DBAB                   C      SD_I01: 
  DBAB    21 DC05        C      	LXI	H,FNAME 
  DBAE    E5             C      	PUSH	H 
  DBAF    11 0004        C      	LXI	D,4 
  DBB2    19             C      	DAD	D 
  DBB3    3A D6DA        C      	LDA	CPM_DISK 
  DBB6    32 D6CD        C      	STA	OLDDSK 
  DBB9    C6 41          C      	ADI	'A' 
  DBBB    77             C      	MOV	M,A 
  DBBC    E1             C      	POP	H 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-112


                         C       
  DBBD    16 00          C      	MVI	D,0 
  DBBF    CD DC26        C      	CALL	CmdOpenDelete 
                         C      	;LXI	D,BUF 
                         C      	;LXI	H,16 
                         C      	;CALL	CmdRead 
  DBC2    C9             C      	RET 
                         C       
  DBC3                   C      SD_SEEK: 
  DBC3    3A D6CD        C      	LDA	OLDDSK 
  DBC6    47             C      	MOV	B,A 
  DBC7    3A D6DA        C      	LDA	CPM_DISK 
  DBCA    B8             C      	CMP	B 
  DBCB    CA DBD1        C      	JZ	SD_S01 
  DBCE    CD DBAB        C      	CALL	SD_I01 
  DBD1                   C      SD_S01: 
  DBD1    3A D6D8        C      	LDA	CPM_TRACK 
  DBD4    6F             C      	MOV	L,A 
  DBD5    26 00          C      	MVI	H,0 
  DBD7    29             C      	DAD	H 
  DBD8    29             C      	DAD	H 
  DBD9    29             C      	DAD	H 
  DBDA    54             C      	MOV	D,H 
  DBDB    5D             C      	MOV	E,L 
  DBDC    29             C      	DAD	H 
  DBDD    29             C      	DAD	H 
  DBDE    3A D6DA        C      	LDA	CPM_DISK 
  DBE1    FE 02          C      	CPI	2 
  DBE3    CA DBEA        C      	JZ	SD_S02 
  DBE6    19             C      	DAD	D ; hl = trk*1024*5*2/256 
  DBE7    C3 DBEB        C      	JMP	SD_S03 
  DBEA                   C      SD_S02: 
  DBEA    29             C      	DAD	H 
  DBEB                   C      SD_S03: 
  DBEB    16 00          C      	MVI	D,0 
  DBED    5C             C      	MOV	E,H 
  DBEE    65             C      	MOV	H,L 
  DBEF    6A             C      	MOV	L,D 
                         C      	;MOV	B,D 
                         C      	;PUSH	D 
                         C      	;XCHG 
                         C      	;LHLD	DATA_ADDR 
                         C      	;DAD	D 
                         C      	;POP	D 
  DBF0    AF             C      	XRA	A 
  DBF1    3A D6D9        C      	LDA	CPM_RECORD ; A*128->BC 
  DBF4    3D             C      	DCR	A 
  DBF5    1F             C      	RAR 
  DBF6    47             C      	MOV	B,A 
  DBF7    3E 00          C      	MVI	A,0 
  DBF9    1F             C      	RAR 
  DBFA    4F             C      	MOV	C,A 
  DBFB    09             C      	DAD	B 
  DBFC    D2 DC00        C      	JNC	@cmp12 
  DBFF    13             C      	INX	D 
  DC00                   C      @cmp12: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-113


  DC00    06 00          C      	MVI	B,0 
  DC02    C3 DC3D        C      	JMP	CmdSeekGetSize 
                         C       
                         C      ;BUF:	DS	16 
                         C      ;DATA_ADDR	EQU	BUF+0Ah 
  DC05    43 50 4D 2F    C      FNAME:	DB	'CPM/A.KDI',0 
  DC09    41 2E 4B 44    C      
  DC0D    49 00          C      
                         C      ;	END 
                         C      include sdbios.asm 
                         C      ; SD BIOS for Computer "Radio 86RK" 
                         C      ; (c) 09-10-2014 vinxru (aleksey.f.morozov@gmail.com) 
                         C       
                         C           ;.org 07600h-683 ; Onqkedmhi a`ir jnd` dnkfem a{r| 075FFh 
                         C                              
                         C      ;---------------------------------------------------------------------------- 
                         C       
                         C      ;INIT_VIDEO      EQU SETSCR;0F82DH 
  F7A0                   C      USER_PORT       EQU PPI2    ; @dpeq JP580BB55 
                         C      ;INIT_STACK      EQU 0B6CFh 
  0080                   C      SEND_MODE       EQU 10000000b ; Pefhl oeped`wh (1 0 0 A QH 0 B CL) 
  0090                   C      RECV_MODE       EQU 10010000b ; Pefhl ophel` (1 0 0 A QH 0 B CL) 
                         C       
  0040                   C      ERR_START   	EQU 040h 
  0041                   C      ERR_WAIT    	EQU 041h 
  0042                   C      ERR_OK_NEXT 	EQU 042h 
  0043                   C      ERR_OK          EQU 043h 
  0044                   C      ERR_OK_READ     EQU 044h 
  0045                   C      ERR_OK_ENTRY    EQU 045h 
  0046                   C      ERR_OK_WRITE	EQU 046h 
  0047                   C      ERR_OK_ADDR  	EQU 047h 
  004F                   C      ERR_OK_BLOCK    EQU 04Fh  
                         C       
  0000                   C      VER_BUF         EQU 0 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; G`cnknbnj RK t`ik` 
                         C       
                         C           ;db ($+2)>>8, ($+2)&0FFh 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      	       
                         C      ;Entry: 
                         C      ;     ; Sqr`m`bkhb`el cp`mhvs qbnandmni o`lrh 
                         C      ;     LXI	H, SELF_NAME 
                         C      ;     CALL	0F833h 
                         C      ; 
                         C      ;     ; B{bnd m`gb`mh jnmrpnkkep` m` }jp`m 
                         C      ;     LXI	H, aHello 
                         C      ;     CALL	0F818h 
                         C      ; 
                         C      ;     ; B{bnd bepqhh jnmrpnkkep` 
                         C      ;     CALL	PrintVer 
                         C      ; 
                         C      ;     ; Oepebnd qrpnjh 
                         C      ;     lxi	h, aCrLf 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-114


                         C      ;     CALL	0F818h 
                         C      ; 
                         C      ;     ; G`osqj`el t`ik SHELL.RK aeg jnl qrpnjh 
                         C      ;     LXI	H, aShellRk 
                         C      ;     LXI	D, aEmpty 
                         C      ;     CALL	CmdExec 
                         C      ;     PUSH	PSW 
                         C      ; 
                         C      ;     ; Nxhaj` - t`ik me m`idem 
                         C      ;     CPI	04h 
                         C      ;     JNZ 	Error2 
                         C      ; 
                         C      ;     ; B{bnd qnnayemh "T@IK ME M@IDEM BOOT/SHELL.RK" 
                         C      ;     LXI	H, aErrorShellRk 
                         C      ;     CALL	0F818h 
                         C      ;     JMP	$ 
                         C      ; 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ; 
                         C      ;PrintVer: 
                         C      ;     ; Jnl`md` onkswemh bepqhh 
                         C      ;     MVI	A, 1 
                         C      ;     CALL	StartCommand	; Khxmhi r`jr b jnrnpnl opnosqrhl bepqh~ 
                         C      ;     CALL	SwitchRecv 
                         C      ;      
                         C      ;     ; Onksw`el bepqh~ m`anp` jnl`md h rejqr 
                         C      ;     LXI	B, VER_BUF 
                         C      ;     LXI	D, 18          ; 1 {i a`ir bepqh, onqkedmhi a`ir - nrosqj`el xhms 
                         C      ;     CALL	RecvBlock 
                         C      ;           
                         C      ;     ; B{bnd bepqhh fekeg` 
                         C      ;     XRA	A 
                         C      ;     STA	VER_BUF+17 
                         C      ;     LXI	H, VER_BUF+1 
                         C      ;     JMP 	0F818h 
                         C      ; 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ; 
                         C      ;aHello:         db 13,10,"SD BIOS V1.0",13,10 
                         C      ;aSdController:  db "SD CONTROLLER ",0 
                         C      ;aCrLf:          db 13,10,0 
                         C      ;aErrorShellRk:  db "fajl ne najden " 
                         C      ;aShellRk:       db "BOOT/SHELL.RK",0 
                         C      ;                db "(c) 04-05-2014 vinxru" 
                         C      ; 
                         C      ;; Jnd mhfe asder g`repr jnl qrpnjni h qnaqrbem{l hlemel 
                         C      ; 
                         C      ;SELF_NAME    EQU $-512 ; osr| (astep 256 a`ir) 
                         C      ;CMD_LINE     EQU  $-256 ; jnl`md`m` qrpnj` 256 a`ir 
                         C      ; 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ;; PEGHDEMRM@_ W@QR\ SD BIOS 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ; 
                         C      ;aError:    db "o{ibka SD " 
                         C      ;aEmpty:    db 0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-115


                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Rsr bnqqr`m`bkhb`erq rn, wrn lnfmn a{r| hqonpwemn oph qane 
                         C       
                         C      ;Error:      
                         C      ;     ; Hmhvh`khg`vh qrej` 
                         C      ;     LXI	SP, INIT_STACK 
                         C      ; 
                         C      ;     ; Qnup`mel jnd nxhajh 
                         C      ;     PUSH	PSW 
                         C      ; 
                         C      ;     ; Nwhqrj` }jp`m` 
                         C      ;     ; Qm`w`k` m`dn sd`khr| hg nak`qrh }jp`m` bqe qoev qhlbnk{, ` rn qhmup` qahb`erq 
                         C      ;     MVI	C, 1Fh 
                         C      ;     CALL	0F809h      
                         C      ;     ; @ reoep| oepeg`cpsghr| bhdenjnmrpnkkep 
                         C      ;     CALL       INIT_VIDEO 
                         C      ; 
                         C      ;Error2: 
                         C      ;     ; B{bnd rejqr` "NXHAJ@ SD " 
                         C      ;     LXI	H, aError 
                         C      ;     CALL	0F818h 
                         C      ; 
                         C      ;     ; B{bnd jnd` nxhajh 
                         C      ;     POP	PSW 
                         C      ;     CALL	0F815h 
                         C      ; 
                         C      ;     ; Bhqmel 
                         C      ;     JMP	$ 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C       
  DC0F                   C      BiosEntry: 
  DC0F    E5             C           PUSH       H 
  DC10    21 DC18        C           LXI	H, JmpTbl 
  DC13    85             C           ADD	L 
  DC14    6F             C           MOV	L, A 
  DC15    6E             C           MOV	L, M 
  DC16    E3             C           XTHL 
  DC17    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Qrp`mhv` 8D00. Bqe oepeund{ JmpTbl b opedek`u ndmni qrp`mhv{ 
                         C       
  DC18                   C      JmpTbl: 
  DC18    0000           C           dw 0;CmdExec           ; 0 HL-hl t`ik`, DE-jnl`mdm` qrpnj`  / A-jnd nxhajh 
  DC1A    0000           C           dw 0;CmdFind           ; 1 HL-hl t`ik`, DE-l`jqhlsl t`iknb dk g`cpsgjh, BC-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
  DC1C    DC26           C           dw CmdOpenDelete     ; 2 D-pefhl, HL-hl t`ik` / A-jnd nxhajh 
  DC1E    DC3D           C           dw CmdSeekGetSize    ; 3 B-pefhl, DE:HL-onghvh / A-jnd nxhajh, DE:HL-onghvh 
  DC20    DC5F           C           dw CmdRead           ; 4 HL-p`glep, DE-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
  DC22    DC6F           C           dw CmdWrite          ; 5 HL-p`glep, DE-`dpeq / A-jnd nxhajh 
  DC24    0000           C           dw 0;CmdMove           ; 6 HL-hg, DE-b / A-jnd nxhajh 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-osr|, DE-l`jqhlsl t`iknb dk g`cpsgjh, BC-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-116


                         C      ;CmdFind: 
                         C      ;     ; Jnd jnl`md{ 
                         C      ;     MVI	A, 3 
                         C      ;     CALL	StartCommand 
                         C      ; 
                         C      ;     ; Osr| 
                         C      ;     CALL	SendString 
                         C      ; 
                         C      ;     ; L`jqhlsl t`iknb 
                         C      ;     XCHG 
                         C      ;     CALL	SendWord 
                         C      ; 
                         C      ;     ; Oepejk~w`elq b pefhl ophel` 
                         C      ;     CALL	SwitchRecv 
                         C      ; 
                         C      ;     ; Qwerwhj 
                         C      ;     LXI	H, 0 
                         C      ; 
                         C      ;CmdFindLoop: 
                         C      ;     ; Fdel onj` LJ opnwhr`er 
                         C      ;     CALL	WaitForReady 
                         C      ;     CPI	ERR_OK 
                         C      ;     JZ		Ret0 
                         C      ;     CPI	ERR_OK_ENTRY 
                         C      ;     JNZ	EndCommand 
                         C      ; 
                         C      ;     ; Ophel aknj` d`mm{u 
                         C      ;     LXI	D, 20	; Dkhm` aknj` 
                         C      ;     CALL	RecvBlock 
                         C      ; 
                         C      ;     ; Sbekhwhb`el qwerwhj t`iknb 
                         C      ;     INX	H 
                         C      ; 
                         C      ;     ; Vhjk 
                         C      ;     JMP	CmdFindLoop 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; D-pefhl, HL-hl t`ik` / A-jnd nxhajh 
                         C       
  DC26                   C      CmdOpenDelete:  
                         C           ; Jnd jnl`md{ 
  DC26    3E 04          C           MVI	A, 4 
  DC28    CD DC99        C           CALL	StartCommand 
                         C       
                         C           ; Pefhl 
  DC2B    7A             C           MOV	A, D 
  DC2C    CD DD6E        C           CALL	Send 
                         C       
                         C           ; Hl t`ik` 
  DC2F    CD DD03        C           CALL	SendString 
                         C       
                         C           ; Fdel onj` LJ qnnap`ghr 
  DC32    CD DD15        C           CALL	SwitchRecvAndWait 
  DC35    FE 43          C           CPI	ERR_OK 
  DC37    CA DCEB        C           JZ		Ret0 
  DC3A    C3 DCEC        C           JMP	EndCommand 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-117


                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      ; B-pefhl, DE:HL-onghvh / A-jnd nxhajh, DE:HL-onghvh 
                         C       
  DC3D                   C      CmdSeekGetSize: 
                         C           ; Jnd jnl`md{ 
  DC3D    3E 05          C           MVI 	A, 5 
  DC3F    CD DC99        C           CALL	StartCommand 
                         C       
                         C           ; Pefhl      
  DC42    78             C           MOV	A, B 
  DC43    CD DD6E        C           CALL	Send 
                         C       
                         C           ; Onghvh      
  DC46    CD DCFB        C           CALL	SendWord 
  DC49    EB             C           XCHG 
  DC4A    CD DCFB        C           CALL	SendWord 
                         C       
                         C           ; Fdel onj` LJ qnnap`ghr. LJ dnkfem nrberhr| jndnl ERR_OK 
  DC4D    CD DD15        C           CALL	SwitchRecvAndWait 
  DC50    FE 43          C           CPI	ERR_OK 
  DC52    C2 DCEC        C           JNZ	EndCommand 
                         C       
                         C           ; Dkhm` t`ik` 
  DC55    CD DCF2        C           CALL	RecvWord 
  DC58    EB             C           XCHG 
  DC59    CD DCF2        C           CALL	RecvWord 
                         C       
                         C           ; Pegsk|r`r 
  DC5C    C3 DCEB        C           JMP	Ret0 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-p`glep, DE-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
                         C       
  DC5F                   C      CmdRead: 
                         C           ; Jnd jnl`md{ 
  DC5F    3E 06          C           MVI	A, 6 
  DC61    CD DC99        C           CALL	StartCommand 
                         C       
                         C           ; @dpeq b BC 
  DC64    42             C           MOV	B, D 
  DC65    4B             C           MOV	C, E 
                         C       
                         C           ; P`glep aknj` 
  DC66    CD DCFB        C           CALL	SendWord        ; HL-p`glep 
                         C       
                         C           ; Oepejk~w`elq b pefhl ophel` 
  DC69    CD DD0F        C           CALL	SwitchRecv 
                         C       
                         C           ; Ophel aknj`. M` bunde `dpeq BC, ophmr` dkhm` b HL 
  DC6C    C3 DD45        C           JMP	RecvBuf 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-p`glep, DE-`dpeq / A-jnd nxhajh 
                         C       
  DC6F                   C      CmdWrite: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-118


                         C           ; Jnd jnl`md{ 
  DC6F    3E 07          C           MVI	A, 7 
  DC71    CD DC99        C           CALL	StartCommand 
                         C            
                         C           ; P`glep aknj` 
  DC74    CD DCFB        C           CALL	SendWord        ; HL-p`glep 
                         C       
                         C           ; Reoep| `dpeq b HL 
  DC77    EB             C           XCHG 
                         C       
  DC78                   C      CmdWriteFile2: 
                         C           ; Pegsk|r`r b{onkmemh jnl`md{ 
  DC78    CD DD15        C           CALL	SwitchRecvAndWait 
  DC7B    FE 43          C           CPI  	ERR_OK 
  DC7D    CA DCEB        C           JZ  	Ret0 
  DC80    D6 46          C           SUI  	ERR_OK_WRITE 
  DC82    C2 DCEC        C           JNZ	EndCommand 
                         C       
                         C           ; P`glep aknj`, jnrnp{i lnfer ophmr| LJ b DE 
  DC85    CD DCF2        C           CALL	RecvWord 
                         C       
                         C           ; Oepejk~w`elq b pefhl oeped`wh     
  DC88    CD DCE2        C           CALL	SwitchSend 
                         C       
                         C           ; Oeped`w` aknj`. @dpeq HL, dkhm` DE. (Lnfmn norhlhghpnb`r| vhjk) 
  DC8B                   C      CmdWriteFile1: 
  DC8B    7E             C           MOV	A, M 
  DC8C    23             C           INX	H 
  DC8D    CD DD6E        C           CALL	Send 
  DC90    1B             C           DCX	D 
  DC91    7A             C           MOV	A, D 
  DC92    B3             C           ORA	E 
  DC93    C2 DC8B        C           JNZ 	CmdWriteFile1 
                         C       
  DC96    C3 DC78        C           JMP	CmdWriteFile2 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-hg, DE-b / A-jnd nxhajh 
                         C       
                         C      ;CmdMove:      
                         C      ;     ; Jnd jnl`md{ 
                         C      ;     MVI	A, 8 
                         C      ;     CALL	StartCommand 
                         C      ; 
                         C      ;     ; Hl t`ik` 
                         C      ;     CALL	SendString 
                         C      ; 
                         C      ;     ; Fdel onj` LJ qnnap`ghr 
                         C      ;     CALL	SwitchRecvAndWait 
                         C      ;     CPI	ERR_OK_WRITE 
                         C      ;     JNZ	EndCommand 
                         C      ; 
                         C      ;     ; Oepejk~w`elq b pefhl oeped`wh 
                         C      ;     CALL	SwitchSend 
                         C      ; 
                         C      ;     ; Hl t`ik` 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-119


                         C      ;     XCHG 
                         C      ;     CALL	SendString 
                         C       
                         C      ;WaitEnd: 
                         C      ;     ; Fdel onj` LJ qnnap`ghr 
                         C      ;     CALL	SwitchRecvAndWait 
                         C      ;     CPI	ERR_OK 
                         C      ;     JZ		Ret0 
                         C      ;     JMP	EndCommand 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-hl t`ik`, DE-jnl`mdm` qrpnj` / A-jnd nxhajh 
                         C       
                         C      ;CmdExec: 
                         C      ;     ; Jnd jnl`md{ 
                         C      ;     MVI	A, 2 
                         C      ;     CALL	StartCommand 
                         C      ; 
                         C      ;     ; Hl t`ik` 
                         C      ;     PUSH	H 
                         C      ;     CALL	SendString 
                         C      ;     POP	H 
                         C      ; 
                         C      ;     ; Fdel onj` LJ opnwhr`er t`ik 
                         C      ;     ; LJ dnkfem nrberhr| jndnl ERR_OK_ADDR 
                         C      ;     CALL	SwitchRecvAndWait 
                         C      ;     CPI	ERR_OK_ADDR 
                         C      ;     JNZ	EndCommand 
                         C      ; 
                         C      ;     ; Qnup`mel hl t`ik` (HL-qrpnj`) 
                         C      ;     PUSH	D 
                         C      ;     XCHG 
                         C      ;     LXI	H, SELF_NAME 
                         C      ;     CALL	strcpy255 
                         C      ;     POP	D 
                         C      ; 
                         C      ;     ; Qnup`mel jnl`mdms~ qrpnjs (DE-qrpnj`) 
                         C      ;     LXI	H, CMD_LINE 
                         C      ;     CALL	strcpy255 
                         C      ; 
                         C      ;     ; *** ]rn rnwj` mebngbp`r`. K~a` nxhaj` ophbeder j oepeg`cpsgje. *** 
                         C      ; 
                         C      ;     ; Hmhvh`khg`vh qrej` (`m`knchwmn qr`md`prmnls lnmhrnps) 
                         C      ;     LXI	SP, INIT_STACK 
                         C      ; 
                         C      ;     ; Ophmhl`el `dpeq g`cpsgjh b BC h qnup`mel ecn b qrej 
                         C      ;     CALL	RecvWord 
                         C      ;     PUSH	D 
                         C      ;     MOV 	B, D 
                         C      ;     MOV 	C, E 
                         C      ; 
                         C      ;     ; G`cpsf`el t`ik 
                         C      ;     CALL	RecvBuf 
                         C      ;     JNZ 	Error 
                         C      ; 
                         C      ;     ; Nwhqrj` }jp`m` 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-120


                         C      ;     ; Qm`w`k` m`dn sd`khr| hg nak`qrh }jp`m` bqe qoev qhlbnk{, ` rn qhmup` qahb`erq 
                         C      ;     MVI	C, 1Fh 
                         C      ;     CALL	0F809h      
                         C      ;     ; @ reoep| oepeg`cpsghr| bhdenjnmrpnkkep 
                         C      ;     CALL       INIT_VIDEO 
                         C      ; 
                         C      ;     ; M`qrpnijh dk opncp`ll{ 
                         C      ;     MVI  A, 1		; Bepqh jnmrpnkkep` 
                         C      ;     LXI  B, BiosEntry  ; Rnwj` bund` SD BIOS 
                         C      ;     LXI  D, SELF_NAME  ; Qnaqrbemmne hl 
                         C      ;     LXI  H, CMD_LINE   ; Jnl`mdm` qrpnj` 
                         C      ; 
                         C      ;     ; G`osqj g`cpsfemmni opncp`ll{ 
                         C      ;     RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; ]rn a{k` onqkedm jnl`md`. D`k|xe qrp`mhv` 8E00. 
                         C      ;---------------------------------------------------------------------------- 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; M`w`kn k~ani jnl`md{.  
                         C      ; A - jnd jnl`md{ 
                         C       
  DC99                   C      StartCommand: 
                         C           ; Oepb{l }r`onl opnhqundhr qhmupnmhg`vh q jnmrpnkkepnl 
                         C           ; Ophmhl`erq 256 ono{rnj, b j`fdni hg jnrnp{u opnosqj`erq 256+ a`ir 
                         C           ; Rn eqr| }rn l`jqhl`k|mne jnk-bn d`mm{u, jnrnpne lnfer oeped`r| jnmrpnkkep 
  DC99    C5             C           PUSH	B 
  DC9A    E5             C           PUSH	H 
  DC9B    F5             C           PUSH	PSW 
  DC9C    0E 00          C           MVI	C, 0 
                         C       
  DC9E                   C      StartCommand1: 
                         C           ; Pefhl oeped`wh (nqbnanfd`el xhms) h hmhvh`khghpsel HL 
  DC9E    CD DD0F        C           CALL       SwitchRecv 
                         C       
                         C           ; M`w`kn k~ani jnl`md{ (}rn xhm` `dpeq`) 
                         C           ;LXI	H, USER_PORT+1 
                         C           ;MVI       M,0 
  DCA1    AF             C           XRA        A 
                         C           @out        USER_PORT+1 
  DCA2    32 F7A1        C+     	sta	USER_PORT+1 
                         C           ;MVI        M, 44h 
  DCA5    3E 44          C           MVI        A,44h 
                         C           @out        USER_PORT+1 
  DCA7    32 F7A1        C+     	sta	USER_PORT+1 
                         C           ;MVI        M, 40h 
  DCAA    3E 40          C           MVI        A,40h 
                         C           @out        USER_PORT+1 
  DCAC    32 F7A1        C+     	sta	USER_PORT+1 
                         C           ;MVI        M, 0h 
  DCAF    AF             C           XRA        A 
                         C           @out        USER_PORT+1 
  DCB0    32 F7A1        C+     	sta	USER_PORT+1 
                         C       
                         C           ; Eqkh eqr| qhmupnmhg`vh, rn jnmrpnkkep nrberhr ERR_START 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-121


  DCB3    CD DD71        C           CALL	Recv 
  DCB6    FE 40          C           CPI	ERR_START 
  DCB8    CA DCD1        C           JZ		StartCommand2 
                         C       
                         C           ; O`sg`. H g` ndmn opnosqj`el 256 a`ir (b qslle asder  
                         C           ; opnosyemn 64 Ja d`mm{u, l`jqhl`k|m{i p`glep o`jer`) 
  DCBB    C5             C           PUSH	B 
  DCBC    0E 00          C           MVI	C, 0 
  DCBE                   C      StartCommand3: 
  DCBE    CD DD71        C           CALL	Recv 
  DCC1    0D             C           DCR	C 
  DCC2    C2 DCBE        C           JNZ	StartCommand3 
  DCC5    C1             C           POP	B 
                         C               
                         C           ; Ono{rjh 
  DCC6    0D             C           DCR	C 
  DCC7    C2 DC9E        C           JNZ	StartCommand1     
                         C       
                         C           ; Jnd nxhajh 
  DCCA    3E 40          C           MVI	A, ERR_START 
  DCCC                   C      StartCommandErr2: 
  DCCC    C1             C           POP	B ; Opnxkne gm`wemhe PSW 
  DCCD    E1             C           POP	H ; Opnxkne gm`wemhe H 
  DCCE    C1             C           POP	B ; Opnxkne gm`wemhe B      
  DCCF    C1             C           POP	B ; B{undhl wepeg tsmjvh~. 
  DCD0    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Qhmupnmhg`vh q jnmrpnkkepnl eqr|. Jnmrpnkkep dnkfem nrberhr| ERR_OK_NEXT 
                         C       
  DCD1                   C      StartCommand2: 
                         C           ; Nrber         	 
  DCD1    CD DD18        C           CALL	WaitForReady 
  DCD4    FE 42          C           CPI	ERR_OK_NEXT 
  DCD6    C2 DCCC        C           JNZ	StartCommandErr2 
                         C       
                         C           ; Oepejk~w`elq b pefhl oeped`wh 
  DCD9    CD DCE2        C           CALL       SwitchSend 
                         C       
  DCDC    F1             C           POP        PSW 
  DCDD    E1             C           POP        H 
  DCDE    C1             C           POP        B 
                         C       
                         C           ; Oeped`el jnd jnl`md{ 
  DCDF    C3 DD6E        C           JMP        Send 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Oepejk~whr|q b pefhl oeped`wh 
                         C       
  DCE2                   C      SwitchSend: 
  DCE2    CD DD71        C           CALL	Recv 
  DCE5                   C      SwitchSend0: 
  DCE5    3E 80          C           MVI	A, SEND_MODE 
                         C           @out	USER_PORT+3 
  DCE7    32 F7A3        C+     	sta	USER_PORT+3 
  DCEA    C9             C           RET 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-122


                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Sqoexmne njnmw`mhe jnl`md{  
                         C      ; h dnonkmhrek|m{i r`jr, wrn a{ LJ nrosqrhk xhms 
                         C       
  DCEB                   C      Ret0: 
  DCEB    AF             C           XRA	A 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Njnmw`mhe jnl`md{ q nxhajni b A  
                         C      ; h dnonkmhrek|m{i r`jr, wrn a{ LJ nrosqrhk xhms 
                         C       
  DCEC                   C      EndCommand: 
  DCEC    F5             C           PUSH	PSW 
  DCED    CD DD71        C           CALL	Recv 
  DCF0    F1             C           POP	PSW 
  DCF1    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Ophmr| qknbn b DE  
                         C      ; Onprhl A. 
                         C       
  DCF2                   C      RecvWord: 
  DCF2    CD DD71        C          CALL Recv 
  DCF5    5F             C          MOV  E, A 
  DCF6    CD DD71        C          CALL Recv 
  DCF9    57             C          MOV  D, A 
  DCFA    C9             C          RET 
                         C           
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nrop`bhr| qknbn hg HL  
                         C      ; Onprhl A. 
                         C       
  DCFB                   C      SendWord: 
  DCFB    7D             C          MOV		A, L 
  DCFC    CD DD6E        C          CALL	Send 
  DCFF    7C             C          MOV		A, H 
  DD00    C3 DD6E        C          JMP		Send 
                         C           
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nrop`bj` qrpnjh 
                         C      ; HL - qrpnj` 
                         C      ; Onprhl A. 
                         C       
  DD03                   C      SendString: 
  DD03    AF             C           XRA	A 
  DD04    B6             C           ORA	M 
  DD05    CA DD6E        C           JZ		Send 
  DD08    CD DD6E        C           CALL	Send 
  DD0B    23             C           INX	H 
  DD0C    C3 DD03        C           JMP	SendString 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Oepejk~whr|q b pefhl ophel` 
                         C       
  DD0F                   C      SwitchRecv: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-123


  DD0F    3E 90          C           MVI	A, RECV_MODE 
                         C           @out	USER_PORT+3 
  DD11    32 F7A3        C+     	sta	USER_PORT+3 
  DD14    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Oepejk~whr|q b pefhl oeped`lh h nfhd`mhe cnrnbmnqrh LJ. 
                         C       
  DD15                   C      SwitchRecvAndWait: 
  DD15    CD DD0F        C           CALL SwitchRecv 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nfhd`mhe cnrnbmnqrh LJ. 
                         C       
  DD18                   C      WaitForReady: 
  DD18    CD DD71        C           CALL	Recv 
  DD1B    FE 41          C           CPI	ERR_WAIT 
  DD1D    CA DD18        C           JZ		WaitForReady 
  DD20    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Ophmr| DE a`ir on `dpeqs BC 
                         C      ; Onprhl A 
                         C       
  DD21                   C      RecvBlock: 
  DD21    E5             C           PUSH	H 
  DD22    21 F7A1        C           LXI 	H, USER_PORT+1 
  DD25    14             C           INR 	D 
  DD26    AF             C           XRA 	A 
  DD27    B3             C           ORA 	E 
  DD28    CA DD3F        C           JZ 	RecvBlock2 
                         C       
  DD2B                   C      RecvBlock1: 
                         C      IF 1 
                         C           ;MVI        M, 20h			; 7 
  DD2B    3E 20          C           MVI        A, 20h 
                         C           @out       USER_PORT+1 
  DD2D    32 F7A1        C+     	sta	USER_PORT+1 
                         C           ;MVI        M, 0			; 7 
  DD30    AF             C           XRA        A 
                         C           @out       USER_PORT+1 
  DD31    32 F7A1        C+     	sta	USER_PORT+1 
                         C      ELSE 
                         C           MVI        M, 20h			; 7 
                         C           MVI        M, 0			; 7 
                         C      ENDIF 
  DD34    00             C           NOP 
  DD35    00             C           NOP 
                         C           @in	USER_PORT		; 13 
  DD36    3A F7A0        C+     	lda	USER_PORT 
  DD39    02             C           STAX	B		        ; 7 
  DD3A    03             C           INX	B		        ; 5 
  DD3B    1D             C           DCR	E		        ; 5 
  DD3C    C2 DD2B        C           JNZ	RecvBlock1		; 10 = 54 
  DD3F                   C      RecvBlock2: 
  DD3F    15             C           DCR	D 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-124


  DD40    C2 DD2B        C           JNZ	RecvBlock1 
  DD43    E1             C           POP	H 
  DD44    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; G`cpsgj` d`mm{u on `dpeqs BC.  
                         C      ; M` b{unde HL qjnk|jn g`cpsghkh 
                         C      ; Onprhl A 
                         C      ; Eqkh g`cpsfemn aeg nxhanj, m` b{unde Z=1 
                         C       
  DD45                   C      RecvBuf: 
  DD45    21 0000        C           LXI	H, 0 
  DD48                   C      RecvBuf0:    
                         C           ; Ondnfd`r| 
  DD48    CD DD18        C           CALL	WaitForReady 
  DD4B    FE 44          C           CPI	ERR_OK_READ 
  DD4D    CA DCEB        C           JZ		Ret0		; m` b{unde Z (mer nxhajh) 
  DD50    D6 4F          C           SUI        ERR_OK_BLOCK 
  DD52    C2 DCEC        C           JNZ	EndCommand	; m` b{unde NZ (nxhaj`) 
                         C       
                         C           ; P`glep g`cpsfemm{u d`mm{u b DE 
  DD55    CD DCF2        C           CALL	RecvWord 
                         C       
                         C           ; B HL nayhi p`glep 
  DD58    19             C           DAD D 
                         C       
                         C           ; Ophmr| DE a`ir on `dpeqs BC 
  DD59    CD DD21        C           CALL	RecvBlock 
                         C       
  DD5C    C3 DD48        C           JMP	RecvBuf0 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Qjnohpnb`r| qrpnjs q ncp`mhwemhel 256 qhlbnknb (bjk~w` replhm`rnp) 
                         C       
  DD5F                   C      strcpy255: 
  DD5F    06 FF          C           MVI  B, 255 
  DD61                   C      strcpy255_1: 
  DD61    1A             C           LDAX D 
  DD62    13             C           INX  D 
  DD63    77             C           MOV  M, A 
  DD64    23             C           INX  H 
  DD65    B7             C           ORA  A 
  DD66    C8             C           RZ 
  DD67    05             C           DCR  B 
  DD68    C2 DD61        C           JNZ  strcpy255_1 
  DD6B    36 00          C           MVI  M, 0 ; Replhm`rnp 
  DD6D    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nrop`bhr| a`ir hg A. 
                         C       
  DD6E                   C      Send: 
                         C           @out	USER_PORT 
  DD6E    32 F7A0        C+     	sta	USER_PORT 
                         C       
                         C      ;---------------------------------------------------------------------------- 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-125


                         C      ; Ophmr| a`ir b @ 
                         C       
  DD71                   C      Recv: 
  DD71    3E 20          C           MVI	A, 20h 
                         C           @out	USER_PORT+1 
  DD73    32 F7A1        C+     	sta	USER_PORT+1 
  DD76    AF             C           XRA	A 
                         C           @out	USER_PORT+1 
  DD77    32 F7A1        C+     	sta	USER_PORT+1 
                         C           @in	USER_PORT 
  DD7A    3A F7A0        C+     	lda	USER_PORT 
  DD7D    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C       
                         C      ;.End 
                                IFDEF OWN_GETC 
                         C      include E0GETC.ASM 
                         C      ; 
                         C      ;	E0GETC.ASM -	ED SC80  get symbol module (OS dependent) 
                         C      ;			RK version (hardware dependent) 
                         C      ;			Uses external PPI_ADR 
                         C       
  0040                   C      ?Ctrl	equ	40h 
  0020                   C      ?Shift	equ	20h 
                         C       
                         C      IFNDEF	PPI_ADR 
                         C      ;EXTRN	PPI_ADR 
                         C      ENDIF 
                         C       
                         C      ; Return SYMBOL and SHIFT/CNTRL flags 
                         C      ; 	40h - CNTRL  &  80h - SHIFT 
                         C      ;	B - SYMBOL or MASK 
                         C      ;	C - SYMBOL 
  DD7E                   C      GETCHC:: 
  DD7E    CD DDA8        C      	CALL	GETCHR 
  DD81    E5             C      	PUSH	H 
  DD82    F5             C      	push	psw 
  DD83    E6 3F          C      	ANI	3FH 
  DD85    4F             C      	MOV	C,A 
  DD86    3A DFFF        C      	LDA	@CTRL 
  DD89    47             C      	MOV	B,A 
                         C      	@in	PPI+2 
  DD8A    3A F782        C+     	lda	PPI+2 
  DD8D    A0             C      	ANA	B 
                         C      	;LDA	PPI+2 
                         C      	;LHLD	PPI_ADR 
                         C      	;INX	H 
                         C      	;INX	H 
                         C      	;ANA	M 
                         C      	;PUSH	H ; PPI+2 
  DD8E    79             C      	MOV	A,C 
  DD8F    C2 DD94        C      	JNZ	$+5 
  DD92    F6 40          C      	ORI	40H 
  DD94    4F             C      	MOV	C,A 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-126


  DD95    3A E000        C      	LDA	@SHFT 
                         C      	;POP	H 
  DD98    47             C      	MOV	B,A 
                         C      	@in	PPI+2 
  DD99    3A F782        C+     	lda	PPI+2 
  DD9C    A0             C      	ANA	B 
                         C      	;ANA	M 
  DD9D    79             C      	MOV	A,C 
  DD9E    C2 DDA3        C      	JNZ	$+5 
  DDA1    F6 80          C      	ORI	80H 
  DDA3    47             C      	mov	b,a 
  DDA4    F1             C      	pop	psw 
  DDA5    4F             C      	mov	c,a 
  DDA6    E1             C      	POP	H 
  DDA7    C9             C      	RET 
                         C       
                         C      ; Get character from concole (returns in Acc) 
  DDA8                   C      GETCHR: 
  DDA8    E5             C      	PUSH	H 
  DDA9    D5             C      	PUSH	D 
  DDAA    C5             C      	PUSH	B 
  DDAB    CD DDC6        C      	CALL	GTC 
                         C      	;CALL	0F803h 
  DDAE    C1             C      	POP	B 
  DDAF    D1             C      	POP	D 
  DDB0    E1             C      	POP	H 
  DDB1    C9             C      	RET 
                         C       
                         C      ; Get keyboard status A=0 - not pressed; A=0FFh - key pressed 
  DDB2                   C      GETST: 
  DDB2    2A E002        C      	LHLD	PNT 
  DDB5    7E             C      	MOV	A,M 
  DDB6    3C             C      	INR	A 
  DDB7    3E 00          C      	MVI	A,0 
  DDB9    C8             C      	RZ 
  DDBA    CD DE48        C      	CALL	GTVECT 
  DDBD    3A E004        C      	LDA	ET1 
  DDC0    3C             C      	INR	A 
  DDC1    3E 00          C      	MVI	A,0 
  DDC3    C8             C      	RZ 
  DDC4    3D             C      	DCR	A 
  DDC5    C9             C      	RET 
                         C       
  DDC6    2A E002        C      GTC:	LHLD	PNT 
  DDC9    7E             C      	MOV	A,M 
  DDCA    FE FF          C      	CPI	0FFH 
  DDCC    CA DDD6        C      	JZ	GTCH0 
  DDCF    23             C       	INX	H 
  DDD0    22 E002        C      	SHLD	PNT 
  DDD3    C3 DE23        C      	JMP	??RUS 
                         C       
  DDD6    06 32          C      GTCH0:	MVI	B,50 
  DDD8    C5             C      RP3:	PUSH	B 
  DDD9    CD DE48        C      	CALL	GTVECT 
  DDDC    C1             C      	POP	B 
  DDDD    3A E00E        C      	LDA	NREP 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-127


  DDE0    FE 01          C      	CPI	1 
  DDE2    C2 DDFA        C      	JNZ	RP1 
  DDE5    AF             C      	XRA	A 
  DDE6    32 E00E        C      	STA	NREP 
  DDE9    05             C      	DCR	B 
  DDEA    C2 DDD8        C      	JNZ	RP3 
  DDED    3C             C      	INR	A 
  DDEE    32 E00E        C      	STA	NREP 
  DDF1    21 E004        C      	LXI	H,ET1 
  DDF4    22 E002        C      	SHLD	PNT 
  DDF7    C3 DDC6        C      	JMP	GTC 
  DDFA    3A E00E        C      RP1:	LDA	NREP 
  DDFD    B7             C      	ORA	A 
  DDFE    C2 DE18        C      	JNZ	RP01 
  DE01    21 E004        C      	LXI	H,ET1 
  DE04    23             C      RP02:	INX	H 
  DE05    7E             C      	MOV	A,M 
  DE06    FE FF          C      	CPI	0FFH 
  DE08    C2 DE04        C      	JNZ	RP02 
  DE0B    22 E002        C      	SHLD	PNT 
  DE0E    E5             C      	PUSH	H 
  DE0F    CD DE31        C      	CALL	MDEL 
  DE12    E1             C      	POP	H 
  DE13    2B             C      	DCX	H 
  DE14    7E             C      	MOV	A,M 
  DE15    C3 DE23        C      	JMP	??RUS 
                         C       
  DE18    CD DE31        C      RP01:	CALL	MDEL 
  DE1B    21 E004        C      	LXI	H,ET1 
  DE1E    7E             C      	MOV	A,M 
  DE1F    23             C      	INX	H 
  DE20    22 E002        C      	SHLD	PNT 
  DE23    FE FE          C      ??RUS:	CPI	0FEH 
  DE25    C0             C      	RNZ 
                         C      	@in	PPI+2 
  DE26    3A F782        C+     	lda	PPI+2 
                         C      	;PUSH	H 
                         C      	;LHLD	PPI_ADR 
                         C      	;INX	H 
                         C      	;INX	H 
                         C      	;MOV	A,M 
  DE29    EE 08          C      	XRI	8 
                         C      	@out	PPI+2 
  DE2B    32 F782        C+     	sta	PPI+2 
                         C      	;MOV	M,A 
                         C      	;POP	H 
  DE2E    C3 DDC6        C      	JMP	GTC 
                         C       
  DE31                   C      MDEL: 
                         C      IF	0 
                         C      	EI 
                         C      	LXI	H,1000 
                         C      RP2:	DCX	H 
                         C      	MOV	A,H 
                         C      	ORA	L 
                         C      	JNZ	RP2 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-128


                         C      	DI 
                         C      ELSE 
  DE31    C5             C      	PUSH	B 
  DE32    01 0808        C      	LXI	B,0808h 
                         C      	;PUSH	H 
                         C      	;LXI	H,PSG1+3 
  DE35    3E 36          C      	MVI	A,36h 
                         C      	@out	PSG1+3 
  DE37    32 F743        C+     	sta	PSG1+3 
                         C      	;MVI	L,0 
  DE3A    79             C      	MOV	A,C 
                         C      	;@out	PSG1 
                         C      	;@out	PSG1 
                         C      	;MOV	M,C 
                         C      	;MOV	M,C 
  DE3B                   C      RP21: 
  DE3B    0B             C      	DCX	B 
  DE3C    78             C      	MOV	A,B 
  DE3D    B1             C      	ORA	C 
  DE3E    C2 DE3B        C      	JNZ	RP21 
                         C      	;MVI	L,3 
                         C      	;MVI	M,36 
  DE41    3E 36          C      	MVI	A,36h 
                         C      	@out	PSG1+3 
  DE43    32 F743        C+     	sta	PSG1+3 
                         C      	;POP	H 
  DE46    C1             C      	POP	B 
                         C      ENDIF 
  DE47    C9             C       	RET 
                         C       
                         C      ; (ET1) - Pressed keys vector (in order of press) 
                         C      ; (NREP) - Repeat number 
  DE48    06 05          C      GTVECT:	MVI	B,5 
  DE4A    C5             C      GETC0:	PUSH	B 
  DE4B    3A E001        C      	LDA	@RD 
  DE4E    B7             C      	ORA	A 
  DE4F    3E 00          C      	MVI	A,0 
  DE51    32 E001        C      	STA	@RD 
  DE54    C2 DE5A        C      	JNZ	$+6 
  DE57    CD DEF6        C      	CALL	KBDSCN 
  DE5A    C1             C      	POP	B 
  DE5B    21 E00F        C      	LXI	H,PRESS 
  DE5E    7E             C      	MOV	A,M 
  DE5F    FE FF          C      	CPI	0FFH 
  DE61    C2 DE6E        C      	JNZ	GTV04 
  DE64    05             C      	DCR	B 
  DE65    C2 DE4A        C      	JNZ	GETC0 
  DE68    32 E004        C      	STA	ET1 
  DE6B    C3 DE48        C      	JMP	GTVECT 
                         C       
  DE6E    21 E019        C      GTV04: 	LXI	H,ET2 
  DE71    11 E004        C      	LXI	D,ET1 
  DE74    E5             C      	PUSH	H 
  DE75    D5             C      	PUSH	D 
  DE76    1A             C      GTV08:	LDAX	D 
  DE77    77             C      	MOV	M,A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-129


  DE78    23             C      	INX	H 
  DE79    13             C      	INX	D 
  DE7A    FE FF          C      	CPI	0FFH 
  DE7C    C2 DE76        C      	JNZ	GTV08 
  DE7F    D1             C      	POP	D 
  DE80    E1             C      	POP	H 
                         C       
  DE81    7E             C      GTV00:	MOV	A,M 
  DE82    FE FF          C      	CPI	0FFH 
  DE84    CA DEA2        C      	JZ	GTV06 
                         C       
  DE87    01 E00F        C      	LXI	B,PRESS 
  DE8A    0A             C      GTV07:	LDAX	B 
  DE8B    FE FF          C      	CPI	0FFH 
  DE8D    CA DE9E        C      	JZ	GTV01 
  DE90    BE             C      	CMP	M 
  DE91    03             C      	INX	B 
  DE92    C2 DE8A        C      	JNZ	GTV07 
  DE95    36 FD          C      	MVI	M,0FDH 
  DE97    12             C      	STAX	D 
  DE98    13             C      	INX	D 
  DE99    0B             C      	DCX	B 
  DE9A    3E FD          C      	MVI	A,0FDH 
  DE9C    02             C      	STAX	B 
  DE9D    03             C      	INX	B 
  DE9E    23             C      GTV01:	INX	H 
  DE9F    C3 DE81        C      	JMP	GTV00 
                         C       
  DEA2    01 E00F        C      GTV06:	LXI	B,PRESS 
  DEA5    0B             C      	DCX	B 
  DEA6    03             C      GTV10:	INX	B 
  DEA7    0A             C      	LDAX	B 
  DEA8    FE FD          C      	CPI	0FDH 
  DEAA    CA DEA6        C      	JZ	GTV10 
  DEAD    FE FF          C      	CPI	0FFH 
  DEAF    CA DECC        C      	JZ	REP 
  DEB2    0B             C      	DCX	B 
  DEB3    03             C      GTV11:	INX	B 
  DEB4    0A             C      	LDAX	B 
  DEB5    FE FD          C      	CPI	0FDH 
  DEB7    CA DEB3        C      	JZ	GTV11 
  DEBA    FE FF          C      	CPI	0FFH 
  DEBC    CA DEC4        C      	JZ	GTV22 
  DEBF    12             C      	STAX	D 
  DEC0    13             C      	INX	D 
  DEC1    C3 DEB3        C      	JMP	GTV11 
  DEC4    AF             C      GTV22:	XRA	A 
  DEC5    32 E00E        C      	STA	NREP 
  DEC8    3E FF          C      GTV21:	MVI	A,0FFH 
  DECA    12             C      	STAX	D 
  DECB    C9             C      	RET 
                         C       
  DECC    3A E00E        C      REP:	LDA	NREP 
  DECF    B7             C      	ORA	A 
  DED0    CA DEE9        C      	JZ	GTV31 
  DED3    21 E019        C      	LXI	H,ET2 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-130


  DED6    7E             C      GTV30:	MOV	A,M 
  DED7    23             C      	INX	H 
  DED8    FE FF          C      	CPI	0FFH 
  DEDA    CA DEE9        C      	JZ	GTV31 
  DEDD    FE FD          C      	CPI	0FDH 
  DEDF    CA DED6        C      	JZ	GTV30 
  DEE2    AF             C      	XRA	A 
  DEE3    32 E00E        C      	STA	NREP 
  DEE6    C3 DEC8        C      	JMP	GTV21 
                         C       
  DEE9    3A E00E        C      GTV31:	LDA	NREP 
  DEEC    3C             C      	INR	A 
  DEED    CA DEC8        C      	JZ	GTV21 
  DEF0    32 E00E        C      	STA	NREP 
  DEF3    C3 DEC8        C      	JMP	GTV21 
                         C       
                         C      ; (PRESS) -  Pressed keys vector (in order of discover) 
  DEF6    01 0040        C      KBDSCN:	LXI	B,40H 
  DEF9    21 E00F        C      	LXI	H,PRESS 
  DEFC    11 807F        C      	LXI	D,807FH 
                         C       
  DEFF    C5             C      	PUSH	B 
                         C      	@IN	PPI+2 
  DF00    3A F782        C+     	lda	PPI+2 
  DF03    47             C      	MOV	B,A 
  DF04    3A DFFE        C      	LDA	@RUS 
  DF07    A0             C      	ANA	B 
  DF08    C2 DF0E        C      	JNZ	$+6 
  DF0B    36 FE          C      	MVI	M,0FEH 
  DF0D    23             C      	INX	H 
  DF0E    C1             C      	POP	B 
                         C       
  DF0F    CD DF1D        C      NORM0:	CALL	?PRESS 
  DF12    CC DF47        C      	CZ	FOUND 
  DF15    04             C      	INR	B 
  DF16    0D             C      	DCR	C 
  DF17    C2 DF0F        C      	JNZ	NORM0 
  DF1A    36 FF          C      	MVI	M,0FFH 
  DF1C    C9             C      	RET 
                         C       
  DF1D    CD DF3F        C      ?PRESS:	CALL	GETMSK 
  DF20    7B             C      	MOV	A,E 
                         C      	@out	PPI 
  DF21    32 F780        C+     	sta	PPI 
  DF24    00             C      	NOP 
  DF25    00             C      	NOP 
  DF26    00             C      	NOP 
                         C      	@in	PPI+1 
  DF27    3A F781        C+     	lda	PPI+1 
  DF2A    A2             C      	ANA	D 
  DF2B    C0             C      	RNZ 
                         C       
  DF2C    E5             C      	PUSH	H 
  DF2D    21 00C8        C      	LXI	H,200 
  DF30                   C      ?PRES0:	@in	PPI+1 
  DF30    3A F781        C+     	lda	PPI+1 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-131


  DF33    A2             C      	ANA	D 
  DF34    C2 DF3D        C      	JNZ	?PRES1 
  DF37    2B             C      	DCX	H 
  DF38    7C             C      	MOV	A,H 
  DF39    B5             C      	ORA	L 
  DF3A    C2 DF30        C      	JNZ	?PRES0 
  DF3D    E1             C      ?PRES1:	POP	H 
  DF3E    C9             C      	RET 
                         C       
                         C       
  DF3F    7A             C      GETMSK:	MOV	A,D 
  DF40    07             C      	RLC 
  DF41    57             C      	MOV	D,A 
  DF42    D0             C      	RNC 
  DF43    7B             C      	MOV	A,E 
  DF44    07             C      	RLC 
  DF45    5F             C      	MOV	E,A 
  DF46    C9             C      	RET 
                         C       
  DF47    E5             C      FOUND:	PUSH	H 
  DF48    D5             C      	PUSH	D 
  DF49    C5             C      	PUSH	B 
  DF4A    78             C      	MOV	A,B 
  DF4B    FE 3F          C      	CPI	3FH 
  DF4D    C2 DF55        C      	JNZ	FND01 
  DF50    3E 20          C      	MVI	A,20H 
  DF52    C3 DF67        C      	JMP	FND02 
  DF55    FE 10          C      FND01:	CPI	10H 
  DF57    DA DF5F        C      	JC	FND03 
  DF5A    C6 20          C      	ADI	20H 
  DF5C    C3 DF67        C      	JMP	FND02 
  DF5F    58             C      FND03:	MOV	E,B 
  DF60    16 00          C      	MVI	D,0 
  DF62    21 DFEE        C      	LXI	H,KEYBRD 
  DF65    19             C      	DAD	D 
  DF66    7E             C      	MOV	A,M 
  DF67    5F             C      FND02:	MOV	E,A 
                         C       
  DF68    FE 21          C      	CPI	21H 
  DF6A    D4 DF74        C      	CNC	MODCHR 
  DF6D    7B             C      	MOV	A,E 
  DF6E    C1             C      	POP	B 
  DF6F    D1             C      	POP	D 
  DF70    E1             C      	POP	H 
  DF71    77             C      	MOV	M,A 
  DF72    23             C      	INX	H 
  DF73    C9             C      	RET 
                         C       
  DF74    5F             C      MODCHR:	MOV	E,A 
  DF75    FE 40          C      	CPI	40H 
  DF77    D2 DF7F        C      	JNC	MOD4 
  DF7A    FE 3C          C      	CPI	3CH 
  DF7C    D2 DF9E        C      	JNC	MOD3 
  DF7F                   C      MOD4:	@in	PPI+2 
  DF7F    3A F782        C+     	lda	PPI+2 
  DF82    47             C      	MOV	B,A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-132


  DF83    3A DFFF        C      	LDA	@CTRL 
  DF86    A0             C      	ANA	B 
  DF87    CA DFAA        C      	JZ	SCTRL 
                         C      	@in	PPI+2 
  DF8A    3A F782        C+     	lda	PPI+2 
  DF8D    E6 08          C      	ANI	8 
  DF8F    C2 DFB2        C      	JNZ	SHIFT0 
                         C      	@in	PPI+2 
  DF92    3A F782        C+     	lda	PPI+2 
  DF95    47             C      	MOV	B,A 
  DF96    3A E000        C      	LDA	@SHFT 
  DF99    A0             C      	ANA	B 
  DF9A    CA DFC8        C      	JZ	@SHIFT 
  DF9D    C9             C      	RET 
                         C       
  DF9E                   C      MOD3:	@in	PPI+2 
  DF9E    3A F782        C+     	lda	PPI+2 
  DFA1    47             C      	MOV	B,A 
  DFA2    3A E000        C      	LDA	@SHFT 
  DFA5    A0             C      	ANA	B 
  DFA6    C2 DFCE        C      	JNZ	SH3 
  DFA9    C9             C      	RET 
                         C       
  DFAA    7B             C      SCTRL:	MOV	A,E 
  DFAB    FE 40          C      	CPI	40H 
  DFAD    D8             C      	RC 
  DFAE    D6 40          C      	SUI	40H 
  DFB0    5F             C      	MOV	E,A 
  DFB1    C9             C      	RET 
                         C       
  DFB2                   C      SHIFT0:	@in	PPI+2 
  DFB2    3A F782        C+     	lda	PPI+2 
  DFB5    47             C      	MOV	B,A 
  DFB6    3A E000        C      	LDA	@SHFT 
  DFB9    A0             C      	ANA	B 
  DFBA    CA DFDC        C      	JZ	SH5 
  DFBD    7B             C      	MOV	A,E 
  DFBE    FE 40          C      	CPI	40H 
  DFC0    D8             C      	RC 
  DFC1    FE 7F          C      	CPI	07Fh 
  DFC3    C8             C      	RZ 
  DFC4    C6 20          C      	ADI	20H 
  DFC6    5F             C      	MOV	E,A 
  DFC7    C9             C      	RET 
                         C       
  DFC8                   C      @SHIFT:	@in	PPI+2 
  DFC8    3A F782        C+     	lda	PPI+2 
  DFCB    E6 08          C      	ANI	8 
  DFCD    C0             C      	RNZ 
  DFCE    7B             C      SH3:	MOV	A,E 
  DFCF    FE 40          C      	CPI	40H 
  DFD1    DA DFDC        C      	JC	SH5 
  DFD4    FE 7F          C      	CPI	7Fh 
  DFD6    C8             C      	rz 
  DFD7    C6 20          C      	ADI	20H 
  DFD9    C3 DFE2        C      	JMP	SH1 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-133


  DFDC    7B             C      SH5:	MOV	A,E 
  DFDD    FE 40          C      	CPI	40H 
  DFDF    DA DFE4        C      	JC	SB 
  DFE2    5F             C      SH1:	MOV	E,A 
  DFE3    C9             C      	RET 
  DFE4    D6 10          C      SB:	SUI	10H 
  DFE6    FE 20          C      	CPI	20H 
  DFE8    C2 DFE2        C      	JNZ	SH1 
  DFEB    1E 5F          C      	MVI	E,5Fh 
  DFED    C9             C      	RET 
                         C       
                         C       
  DFEE    0C 1F 1B 00    C      KEYBRD:	DB	0CH,1FH,1BH,0,1,2,3,4 
  DFF2    01 02 03 04    C      
  DFF6    09 0A 0D       C      	DB	9,0AH,0DH 
  DFF9    7F             C      	DB	7FH; Here was 5FH 
  DFFA    08 19 18 1A    C      	DB	8,19H,18H,1AH 
                         C      ; Following map part may be done more compact algoritmically 
                         C      ; Decrease size by 27 bytes 
                         C      ;	DB	'0123456789:;<=>?' 
                         C      ;	DB	'@ABCDEFGHIJKLMNO' 
                         C      ;	DB	'PQRSTUVWXYZ[\]^ ' 
                         C       
                         C       
  DFFE    80             C      @RUS:	DB	80H 
  DFFF    40             C      @CTRL:	DB	?Ctrl 
  E000    20             C      @SHFT:	DB	?Shift 
  E001    00             C      @RD:	DB	0 
                         C       
  E002    E004           C      PNT:	DW	ET1 
  E004    FF             C      ET1:	DB	0ffh 
  E005                   C      	ds	9 
                         C      	;DSEG 
  E00E                   C      NREP:	DS	1 
  E00F                   C      PRESS:	DS	10 
  E019                   C      ET2:	DS	10 
                         C      IFNDEF	noend 
                         C      ;	END 
                         C      ENDIF 
                         C       
                         C       
                                ENDIF 
  E023                          BIOS_END: 
                                	END 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S


Macros:
@IN             @OUT            @SYSREG         

Symbols:
DE23 	??RUS           0040 	?CTRL           DA1A 	?ESC            
DF30 	?PRES0          DF3D 	?PRES1          DF1D 	?PRESS          
0020 	?SHIFT          D88C 	_@ESC           C4FB 	_CONIN          
C548 	_CONOUT         D6DD 	_DPTR           D875 	_ESC            
D87B 	_ESC1           D897 	_ESC2           0000 	_FALSE          
D6D4 	_IO_RESULT      D1DF 	_OLDDSK         C9E3 	_SETDMA         
00FF 	_TRUE           D751 	@001            D832 	@@@             
DB1C 	@@TMP           000E 	@CLR            DAB8 	@CMP0           
DABD 	@CMP1           DC00 	@CMP12          D949 	@CR             
DFFF 	@CTRL           001B 	@ESC            D762 	@EXIT           
0001 	@F              D991 	@HOME           D953 	@LF             
D754 	@LOOP           DA82 	@L_DELAY        DA6F 	@L_WAIT         
0000 	@M              C750 	@MOVE0          E001 	@RD             
DFFE 	@RUS            000F 	@SET            E000 	@SHFT           
DFC8 	@SHIFT          DA6A 	@SKIP           D9EA 	@WAIT_RVV       
C964 	ADDH            C04B 	ADDHCF          0008 	ADDLIST         
D3BF 	ALL01           D41F 	ALL02           D47F 	ALL03           
D1BF 	ALLOCA          C884 	ALLOCATED       CE64 	ALLOCWD         
D1E5 	ARECORD         D1E7 	ARECORD1        C745 	ARET            
D306 	ASKDOS          C88A 	ATRAN           C890 	ATRAN0          
C699 	BACKSP          C5A4 	BACKUP          C64E 	BACKX           
D6CEI 	BAD             CF84 	BADSEEK         BFCF 	BADSERIAL       
0005 	BDOS            0006 	BDOSA           C411 	BDOSE           
C400 	BDOSL           0005 	BDOSTRP         BCF4 	BDOS_COND       
BCC3 	BDOS_INR        C400 	BDOS_START      014D 	BEGPRO          
DA14 	BEGSCR          D8A8 	BELL            D200 	BIOS            
DC0F 	BIOSENTRY       E023 	BIOS_END        BCA2 	BLANK           
D1C4 	BLKMSK          D1C3 	BLKSHF          CE48 	BLOCKOK         
C32D 	BMOVE0          C33B 	BMOVE1          C340 	BMOVE2          
C34C 	BMOVE3          D241 	BOOT            D200 	BOOTF           
C3EE 	BPTR            000B 	BREAKF          BDC2 	BREAK_KEY       
0080 	BUFF            D1B9 	BUFFA           CCE1 	BUFFNZERO       
0001 	BYTE            D200I 	B_BASE          0001 	CC              
BF82 	CCP             BF98 	CCP0            BF58 	CCPCLEAR        
BC00 	CCPLOC          BF5C 	CCPSTART        BE59 	CCP_ADDH        
BCDA 	CCP_CLOSE       BC98 	CCP_CRLF        C3EB 	CCP_DCNT        
BCEF 	CCP_DELETE      BCF9 	CCP_DISKREAD    BD04 	CCP_DISKWRITE   
BCB8 	CCP_INITIALIZE  BD09 	CCP_MAKE        BCCB 	CCP_OPEN        
BCA7 	CCP_PRINT       C210 	CCP_RENAME      BCDF 	CCP_SEARCH      
BCE4 	CCP_SEARCHN     BCBD 	CCP_SELECT      BDD8 	CCP_SETDMA      
01A0 	CCP_START       C3EC 	CDISK           D1B3 	CDRMAXA         
0001 	CENTRONIX       D71C 	CHANGEVIEWMODE  D1BD 	CHECKA          
C99E 	CHECKSUM        D5FBI 	CHECK_D         C944 	CHECK_RODIR     
C947 	CHECK_ROFILE    C954 	CHECK_WRITE     DA93 	CHGDRIVE        
D3FF 	CHK01           D45F 	CHK02           D579 	CHK03           
D1CC 	CHKSIZ          DA18 	CHPNT           CCA2 	CLOSE           
0010 	CLOSEF          C972 	CLRMODNUM       D974 	CLS             
D985 	CLS0            DC26 	CMDOPENDELETE   DC5F 	CMDREAD         
DC3D 	CMDSEEKGETSIZE  DC6F 	CMDWRITE        DC8B 	CMDWRITEFILE1   
DC78 	CMDWRITEFILE2   DAA6 	CMP_ADR         C70C 	COLUMN          
BC88 	COMADDR         BC08 	COMBUF          BE09 	COMERR          
BE0F 	COMERR0         BE22 	COMERR1         C3CA 	COMFCB          
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-1


BC07 	COMLEN          C97F 	COMPCDR         C70A 	COMPCOL         
CB07 	COMPEXT         C562 	COMPOUT         C8FD 	COMPUTECS0      
C8F7 	COMPUTE_CS      CFA5 	COMPUTE_RR      C3EA 	COMREC          
C380 	COMTYPE         C542 	CONB0           C545 	CONB1           
C523 	CONBRK          C506 	CONECH          D70AI 	CONIN           
D209 	CONINF          D78BI 	CONOUT          D20C 	CONOUTF         
D206 	CONSTF          C008 	CONV0           C033 	CONV1           
D6E0I 	CONVER          D707I 	CON_ST          CC01 	COPY_DIR        
CB01 	COPY_DIRLOC     CBFD 	COPY_FCB        D73A 	CORRCNTRL       
D768 	CORRTBL         012E 	CP001           DB40 	CPM_BIN         
D6DAI 	CPM_DISK        D6D9I 	CPM_RECORD      D6D8I 	CPM_TRACK       
D80F 	CPY             000D 	CR              C5C9 	CRLF            
C5B1 	CRLFP           C5B9 	CRLFP0          BDD0 	CSELECT         
0019 	CSELF           005E 	CTL             0003 	CTLC            
0005 	CTLE            0008 	CTLH            C57F 	CTLOUT          
0010 	CTLP            0012 	CTLR            0013 	CTLS            
0015 	CTLU            0018 	CTLX            001A 	CTLZ            
C742 	CURDSK          D1B7 	CURRECA         D045 	CURSELECT       
D1B5 	CURTRKA         DA1B 	CURX            DA1C 	CURY            
BC00 	C_BASE          0020 	C_DIR_ENTRS     0008 	C_OFFSET        
0008 	C_SEC_ON_TRK    07EF 	C_SIZE          D1EA 	DCNT            
BE4F 	DEBLANK         0004 	DEF_DSK         D828 	DELEOL          
CB9C 	DELETE          CBA4 	DELETE0         0013 	DELF            
BE30 	DELIM           D7EA 	DELLIN          BDDD 	DEL_SUB         
C7BB 	DIOCOMP         C088 	DIR0            C08F 	DIR1            
C098 	DIR2            C0D9 	DIR3            C0F9 	DIR4            
C10E 	DIR5            C10F 	DIR6            C0F7 	DIRB            
D33F 	DIRBF           D1CA 	DIRBLK          C077 	DIRECT          
C0CC 	DIRHDR0         C0D4 	DIRHDR1         C6E0 	DIRINP          
D1D4 	DIRLOC          D1C8 	DIRMAX          0004 	DIRREC          
C9E9 	DIR_TO_USER     0004 	DISKA           CDFB 	DISKEOF         
000C 	DISKF           CDC1 	DISKREAD        BCFE 	DISKREADC       
CE1C 	DISKWR0         CE6E 	DISKWR1         CEBB 	DISKWR11        
CED2 	DISKWR2         CF00 	DISKWR3         CE03 	DISKWRITE       
CE6C 	DISKWRU         F7C0 	DISP            0040 	DISP_INTE_FLAG  
0020 	DISP_INTR_FLAG  DA1FI 	DISP_PB         D7F3 	DL0             
D1AF 	DLOG            F7E0 	DMA             D1B1 	DMAAD           
001A 	DMAF            D6DBI 	DMA_ADDR        D1D7 	DMINX           
C845 	DMPOS0          C853 	DMPOS1          C85C 	DMPOS2          
CCFD 	DMSET           C83E 	DM_POSITION     D930 	DOWN            
D1BB 	DPBADDR         D57A 	DPBASE          000F 	DPBLIST         
D5AA 	DPBLK2          D5B9 	DPBLK3          D1E9 	DPTR            
0014 	DREADF          D1EC 	DREC            D6D7 	DRIVE           
C4C6 	DSKERR          D5C8I 	DSKINIT         0010 	DSKMAP          
C4BA 	DSKMSG          0003 	DSKMSK          0002 	DSKSHF          
D31EI 	DSKVER          0022 	DVERS           D948 	DWN0            
0015 	DWRITF          C400 	D_BASE          0DEE 	D_SIZE          
C514 	ECHOC           D1AC 	EFCB            BEF0 	EFILL           
BEF2 	EFILL0          00E5 	EMPTY           C386 	ENDCOM          
DCEC 	ENDCOMMAND      FFFF 	ENDDIR          C11B 	ENDIR           
CD17 	ENDMERGE        BF58 	ENDSCR          CB83 	ENDSEARCH       
C9F5 	END_OF_DIR      C70F 	ENTSP           001A 	EOFILE          
C11F 	ERASE           C142 	ERASEFILE       C152 	ERMSG           
C4E5 	ERRFLG          0043 	ERR_OK          0047 	ERR_OK_ADDR     
004F 	ERR_OK_BLOCK    0045 	ERR_OK_ENTRY    0042 	ERR_OK_NEXT     
0044 	ERR_OK_READ     0046 	ERR_OK_WRITE    0139 	ERR_READ        
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-2


0040 	ERR_START       0041 	ERR_WAIT        E004 	ET1             
E019 	ET2             0001 	EXTERNAL_PORTS  D1C5 	EXTMSK          
000C 	EXTNUM          D1E2 	EXTVAL          DAE9I 	EXT_TO_RAM      
005C 	FCB             D1E0 	FCBDSK          0020 	FCBLEN          
CCDB 	FCBNZERO        0005 	FCBSHF          D1D2 	FCB_COPIED      
F700 	FDC             D81F 	FILL            CE8C 	FILL0           
CE9A 	FILL1           BE60 	FILLFCB         BE5E 	FILLFCB0        
0002 	FIRSTSTR        0001 	FLOP40          0000 	FLOP80          
DA8E 	FLPD_I          DA93 	FLPD_R          DA93 	FLPD_W          
DA94I 	FLP_TBL         DA93 	FLSH_WB         DC05 	FNAME           
DF55 	FND01           DF67 	FND02           DF5F 	FND03           
0184 	FONT            DF47 	FOUND           0000 	FRST_T          
DA96 	FULLMASK        C207 	FULLMSG         C6C8 	FUNC1           
C5E1 	FUNC10          C6FE 	FUNC11          D07E 	FUNC12          
D083 	FUNC13          D045 	FUNC14          D09C 	FUNC15          
D0A5 	FUNC16          D0AB 	FUNC17          D0C8 	FUNC18          
D0D7 	FUNC19          C590 	FUNC2           D0E0 	FUNC20          
D0E6 	FUNC21          D0EC 	FUNC22          D0F5 	FUNC23          
D0FE 	FUNC24          D104 	FUNC25          D10A 	FUNC26          
D111 	FUNC27          C92C 	FUNC28          D117 	FUNC29          
C6CE 	FUNC3           D11D 	FUNC30          D126 	FUNC31          
D12D 	FUNC32          D141 	FUNC33          D147 	FUNC34          
D14D 	FUNC35          D00E 	FUNC36          D153 	FUNC37          
C704 	FUNC38          C704 	FUNC39          D19B 	FUNC40          
C6D4 	FUNC6           C6ED 	FUNC7           C6F3 	FUNC8           
C6F8 	FUNC9           C447 	FUNCTAB         C704 	FUNC_RET        
0080 	FWFMSK          CA35 	GETALLOCBIT     DE4A 	GETC0           
DD7EI 	GETCHC          DDA8 	GETCHR          C85E 	GETDM           
C871 	GETDMD          C95E 	GETDPTRA        C8A6 	GETEXTA         
C8BB 	GETFCB          C8AE 	GETFCBA         CFD2 	GETFILESIZE     
C969 	GETMODNUM       DF3F 	GETMSK          D006 	GETNEXTSIZE     
BFF8 	GETNUMBER       CFE4 	GETSIZE         DDB2 	GETST           
BD13 	GETUSER         CBBE 	GET_BLOCK       D174 	GOBACK          
C74A 	GOERR           D9AB 	GOTOXY          DDC6 	GTC             
DDD6 	GTCH0           DE81 	GTV00           DE9E 	GTV01           
DE6E 	GTV04           DEA2 	GTV06           DE8A 	GTV07           
DE76 	GTV08           DEA6 	GTV10           DEB3 	GTV11           
DEC8 	GTV21           DEC4 	GTV22           DED6 	GTV30           
DEE9 	GTV31           DE48 	GTVECT          C904 	HLROTL          
C905 	HLROTL0         C8EA 	HLROTR          C8EB 	HLROTR0         
C7A1 	HOME            D5D8I 	HOME@           D218 	HOMEF           
C877 	INDEX           CC40 	INDIC0          CC3B 	INDICATORS      
C743 	INFO            000D 	INITF           CAB1 	INITIAL0        
CAD2 	INITIAL2        CAA3 	INITIALIZE      C9C4 	INITIAL_CS      
D805 	INSLIN          0006 	INTLEN          F720 	INTR            
BF33 	INTRIN0         BF3C 	INTRIN1         BF4F 	INTRIN2         
BF54 	INTRIN3         BF2E 	INTRINSIC       BF10 	INTVEC          
000A 	INVIS           0003 	IOLOC           0003 	IO_BYTE         
BFC1 	JMPTAB          DC18 	JMPTBL          C70E 	KBCHAR          
DEF6 	KBDSCN          DFEE 	KEYBRD          005F 	LA              
DA98 	LAST_OPER       DB21I 	LD_SYS          D8F9 	LEFT            
CBC0 	LEFTTST         000A 	LF              000C 	LIFTF           
C670 	LINELEN         D1D6 	LINFO           C70D 	LISTCP          
D20F 	LISTF           D22D 	LISTSTF         000F 	LLLL            
C2DE 	LOAD0           C2FE 	LOAD1           C36E 	LOADERR         
C377 	LOADMSG         0018 	LOGF            0161 	LOOP            
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-3


0170 	LOOP01          DA58 	LPUTC           C745 	LRET            
C741 	LSTACK          001F 	LSTFCB          DA52I 	LSTOUT          
007F 	LSTREC          DA27I 	LSTVER          DA55I 	LST_ST          
CD24 	MAKE            CD46 	MAKE0           0016 	MAKEF           
0194 	MAP             019D 	MAP2            D1C6 	MAXALL          
0042 	MAXDISKCODE     001F 	MAXEXT          BC06 	MAXLEN          
000F 	MAXMOD          DA95 	MAXSECT         0001 	MC6312          
DE31 	MDEL            CCCD 	MERGE0          CCE8 	MERGED          
CD1F 	MERGERR         CC94 	MERGEZERO       DF9E 	MOD3            
DF7F 	MOD4            DF74 	MODCHR          000E 	MODNUM          
C74F 	MOVE            C042 	MOVE0           C040 	MOVENAME        
000F 	NAMLEN          C99C 	NEWCHECKSUM     D8E6 	NEXTST          
0029 	NFUNCS          BFEA 	NOFILE          D69B 	NOFLOP80        
BFF0 	NOFMSG          CE3B 	NOPBLOCK        0000 	NOPRINT         
BDA7 	NOREAD          DF0F 	NORM0           D075 	NOSELECT        
0001 	NOSERIALIZE     CEFE 	NOSPACE         BD96 	NOSUB           
C579 	NOTBACKSP       C6BD 	NOTC            C637 	NOTE            
C616 	NOTH            0000 	NOTHING         C648 	NOTP            
C6A6 	NOTR            C626 	NOTRUB          C66B 	NOTU            
C65F 	NOTX            CEDF 	NOUPDATE        C91E 	NOWRITE         
E00E 	NREP            0020 	NXTREC          D9A4 	NXT_S           
0000 	OFF             D1CE 	OFFSET          D6CDI 	OLDDSK          
D6DFI 	OLDF40          FFFF 	ON              CC51 	OPEN            
BCD0 	OPENC           000F 	OPENF           CC5A 	OPEN_COPY       
CD83 	OPEN_MOD        CC8B 	OPEN_RCNT       CD5A 	OPEN_REEL       
CD8E 	OPEN_REEL0      CDAC 	OPEN_REEL1      CDAF 	OPEN_REEL2      
CDB6 	OPEN_R_ERR      D7A9 	OUTC            0001 	OWN_GETC        
BEB9 	PADNAME         BEE9 	PADTY           0001 	PATCH1          
0009 	PBUFF           0002 	PCHARF          C5AC 	PCTLH           
CAF6 	PDOLLAR         C409 	PERERR          C4CA 	PERMSG          
C499 	PERSUB          001E 	PHYS_H          004E 	PHYS_W          
E002 	PNT             F780 	PPI             F7A0 	PPI2            
F7A1 	PPI2_B          F7A2 	PPI2_C          F7A3 	PPI2_CR         
DA8D 	PPI_INIT_FLAG   E00F 	PRESS           D8F2 	PREVST          
BCAC 	PRIN0           C5D3 	PRINT           BC92 	PRINTBC         
BC8C 	PRINTCHAR       D77BI 	PRNT            D780 	PRNT1           
0001 	PROFI_DISKS     0155 	PROG_DC         F740 	PSG1            
F760 	PSG2            DA4EI 	PUNCH           D212 	PUNCHF          
D780I 	PUTS            D0C2 	QSELECT         0002 	RAMDISK         
DB20I 	RAMDSK_END      DAA5I 	RAMD_I          DA99I 	RAMD_R          
DA9FI 	RAMD_W          DAC2I 	RAM_TO_EXT      CF47 	RANCLOSE        
CF93 	RANDISKREAD     CF9C 	RANDISKWRITE    0021 	RANREC          
DA5A 	RAW_LPUTC       000A 	RBUFF           0001 	RCHARF          
D1E1 	RCOUNT          C7B2 	RDBUFF          C6A9 	RDECH1          
C6A6 	RDECHO          BFDF 	RDMSG           C9D4 	RD_DIR          
DB00 	RD_LP           D6ADI 	RD_REC          C5E1 	READ            
BD39 	READCOM         BDAB 	READCOM0        BDBA 	READCOM1        
C6C1 	READEN          DA4FI 	READER          D215 	READERF         
BFD9 	READERR         D227 	READF           0001 	READING         
C5F1 	READN0          C5EF 	READNX          014C 	READR           
CA05 	READ_DIR        CA19 	READ_DIR0       CA20 	READ_DIR1       
0000 	REBOOT          000F 	RECCNT          CDE6 	RECORDOK        
0080 	RECSIZ          DA94 	RECSPERSECT     DD71 	RECV            
DD21 	RECVBLOCK       DD2B 	RECVBLOCK1      DD3F 	RECVBLOCK2      
DD45 	RECVBUF         DD48 	RECVBUF0        DCF2 	RECVWORD        
0090 	RECV_MODE       C23F 	REN1            C259 	REN2            
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-4


BD0E 	RENAM           CC16 	RENAME          CC27 	RENAME0         
C26D 	RENERR1         C273 	RENERR2         C279 	RENERR3         
0017 	RENF            C282 	RENMSG          DECC 	REP             
C678 	REP0            C68A 	REP1            D1DE 	RESEL           
D051 	RESELECT        C066 	RESETDISK       DCEB 	RET0            
CBEC 	RETBLOCK        CBF4 	RETBLOCK0       C383 	RETCOM          
D191 	RETMON          C201 	RETSAVE         C79D 	RETSELECT       
D909 	RIGHT           CBD1 	RIGHTTST        0001 	RK60K           
D1D3 	RMF             C40D 	RODERR          C4E1 	RODMSG          
D1AD 	RODSK           C4AB 	RODSUB          C40F 	ROFERR          
0009 	ROFILE          C4DC 	ROFMSG          C4B1 	ROFSUB          
CA56 	ROTL            CA64 	ROTR            DE18 	RP01            
DE04 	RP02            DDFA 	RP1             DE3B 	RP21            
DDD8 	RP3             CF03 	RSEEK           CF07 	RSEEK1          
007F 	RUBOUT          DB0B 	RW_CMN          0000 	S               
C1AD 	SAVE            C1D4 	SAVE0           C1F1 	SAVE1           
C1FB 	SAVERR          BD1A 	SAVEUSER        DB20I 	SAV_SYS         
DFE4 	SB              CA6B 	SCANDM          CA75 	SCANDM0         
CA88 	SCANDM1         CA8E 	SCANDM2         CA9D 	SCANM3          
BF01 	SCNQ            BF09 	SCNQ0           D96E 	SCRLL           
D8B1 	SCROLL          D8BF 	SCRU0           D8C3 	SCRU1           
D8DD 	SCRU2           D8AE 	SCRUP           B6D0 	SCR_BUFF        
001A 	SCR_H           0924 	SCR_SIZE        004E 	SCR_W           
DFAA 	SCTRL           0000 	SD              C3ED 	SDISK           
DB8D 	SD_ERR_CHECK    DBABI 	SD_I            DBAB 	SD_I01          
DB80I 	SD_R            DBD1 	SD_S01          DBEA 	SD_S02          
DBEB 	SD_S03          DBC3 	SD_SEEK         DB96I 	SD_W            
CB18 	SEARCH          D1D9 	SEARCHA         BCE9 	SEARCHCOM       
CB73 	SEARCHEXT       D1D8 	SEARCHL         CB53 	SEARCHLOOP      
CB2D 	SEARCHN         CB4A 	SEARCHNEXT      CB7C 	SEARCHOK        
CB94 	SEARCH_FIN      0011 	SEARF           0012 	SEARNF          
D6D5I 	SECT            D1C1 	SECTPT          D230 	SECTRAN         
D67DI 	SECTRN          DA97 	SECTSHIFT       C7D1 	SEEK            
C7E4 	SEEK0           C7FA 	SEEK1           C80F 	SEEK2           
CF8B 	SEEKERR         CF7F 	SEEKOK          CC10 	SEEK_COPY       
C7C3 	SEEK_DIR        D5DFI 	SELDSK          D21B 	SELDSKF         
D021 	SELECT          C759 	SELECTDISK      C40B 	SELERR          
000E 	SELF            C4D5 	SELMSG          C4A5 	SELSUB          
C747 	SEL_ERROR       DD6E 	SEND            DD03 	SENDSTRING      
DCFB 	SENDWORD        0080 	SEND_MODE       CDBC 	SEQDISKREAD     
CDFE 	SEQDISKWRITE    D1D5 	SEQIO           BDFD 	SER0            
BF28 	SERIAL          BDF5 	SERIALIZE       C98C 	SETCDR          
BE88 	SETCUR          BE89 	SETCUR0         C9DA 	SETDATA         
C9E0 	SETDIR          C054 	SETDISK         BD29 	SETDISKA        
D6A7I 	SETDMA          BDD5 	SETDMABUFF      D224 	SETDMAF         
BE90 	SETDSK          C8D2 	SETFCB          C8DE 	SETFCB1         
C978 	SETFWF          C705 	SETLRET1        BE98 	SETNAM0         
BEA9 	SETNAM1         BEAB 	SETNAM2         BE96 	SETNAME         
D00E 	SETRANDOM       D678I 	SETREC          D9C3I 	SETSCR          
D221 	SETSECF         D00C 	SETSIZE         D5DAI 	SETTRK          
D21E 	SETTRKF         BEC0 	SETTY           BEC8 	SETTY0          
BED9 	SETTY1          BEDB 	SETTY2          BD15 	SETUSER         
D13B 	SETUSRCODE      CA5C 	SET_ALLOC_BIT   C90B 	SET_CDISK       
C9FE 	SET_END_DIR     D684I 	SET_PARAMS      C92C 	SET_RO          
DFE2 	SH1             DFCE 	SH3             DFDC 	SH5             
DFB2 	SHIFT0          DB14 	SHR_BC          D6D6I 	SIDE            
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-5


D1DD 	SINGLE          0018 	SSIZE           C3A8 	STACK           
BC8A 	STADDR          DC99 	STARTCOMMAND    DC9E 	STARTCOMMAND1   
DCD1 	STARTCOMMAND2   DCBE 	STARTCOMMAND3   DCCC 	STARTCOMMANDERR2 
BC00 	START_CCP       C701 	STA_RET         D129 	STHL_RET        
DB1E 	STK_SAVE        DA1D 	STRADR          DD5F 	STRCPY255       
DD61 	STRCPY255_1     0177 	STRCPYN         C70B 	STRTCOL         
C3C9 	SUBCR           C995 	SUBDH           C3A9 	SUBFCB          
C3A8 	SUBMIT          C3B7 	SUBMOD          C3B8 	SUBRC           
DD0F 	SWITCHRECV      DD15 	SWITCHRECVANDWAI DCE2 	SWITCHSEND      
DCE5 	SWITCHSEND0     000A 	SYSFILE         0000 	SYSPG           
0009 	TAB             C596 	TAB0            C590 	TABOUT          
0000 	TABREPLACE      0008 	TABSIZE         0080 	TBUFF           
0000 	TEST            0000 	TESTING         0000 	TEXTTRANSL      
005C 	TFCB            D1DB 	TINFO           0100 	TRAN            
BC00 	TRANM           D5AA 	TRANS1          D5AA 	TRANS2          
BD30 	TRANSLATE       D1D0 	TRANV           BEAF 	TRNAME          
BEDF 	TRTYP           C15D 	TYPE            C174 	TYPE0           
C187 	TYPE1           C1A0 	TYPEOF          C1A7 	TYPERR          
000D 	UBYTES          D913 	UP              C28E 	USER            
C2C1 	USER0           C368 	USERER          0020 	USERF           
C2A5 	USERFUNC        F7A0 	USER_PORT       C741 	USRCODE         
000F 	UUUU            0000 	VER_BUF         D739 	VIEWMODE        
D734 	VIEWPTR         D736 	VIEWTBL         B76C 	VRAM            
D1E3 	VRECORD         0001 	VV              DD18 	WAITFORREADY    
C4B4 	WAIT_ERR        D2CB 	WBOOT           D203 	WBOOTF          
D203 	WBOOT_ADR       D2D6 	WBT             0002 	WORD            
C7B8 	WRBUFF          C9C6 	WRDIR           D22A 	WRITEF          
0002 	WRITING         DADB 	WR_LP           D6BDI 	WR_REC          
DA93 	WT_END_CMD      DA16 	XSIZE           DA17 	YSIZE           
0008 	ZZZZ            



No Fatal error(s)


   D736 	VIEWTBL         B76C 	VRAM            
D1E3 	VRECORD         