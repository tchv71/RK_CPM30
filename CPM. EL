"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1


                         C      include	RkConfig.mac 
  0001                   C      OWN_GETC	EQU	1 
  0001                   C      USE_PRG_DC	EQU	1 
                         C       
                                 
                         C      include b0disk.mac 
                         C      ;	B0DISK.MAC - common defines for disk bios 
                         C       
  0000                   C      NOTHING	EQU	0 
  0001                   C      READING	EQU	1 
  0002                   C      WRITING	EQU	2 
                         C       
  0020                   C      C_DIR_ENTRS	equ	32 
  0008                   C      C_OFFSET	equ	8 
  0008                   C      C_SEC_ON_TRK	equ	8 
                         C       
                         C      include 82xx.mac 
                         C      ;	82XX.MAC - 82XX CHIP SET DEFINITION 
                         C       
                         C      ;  8275 display adapter (russian analog - K580VG75) 
                         C      ;DISP	equ	0C000h 
                         C      ; Status register 
  0040                   C      DISP_INTE_Flag	equ	40h 
  0020                   C      DISP_INTR_Flag	equ	20h 
                         C      include RK86.MAC 
                         C      ;** RK86.MAC - Radio-86 computer specific constants & macro *** 
                         C      ; 
                         C      ;	09-Oct-1992  - first version 
                         C      ;	15-Nov-1992  - Add 82XX.MAC 
                         C       
  0040                   C      ?Ctrl	equ	40h 
  0020                   C      ?Shift	equ	20h 
                         C       
  0001                   C      EXTERNAL_PORTS	equ	1 
                         C       
                         C      ; IN and OUT MACRO comands 
                         C      @in	MACRO	addr 
                         C      IF ((addr) LT 256) 
                         C      	in	addr 
                         C      ELSE 
                         C      	lda	addr 
                         C      ENDIF 
                         C      	ENDM 
                         C       
                         C      @out	MACRO	addr 
                         C      IF ((addr) LT 256) 
                         C      	out	addr 
                         C      ELSE 
                         C      	sta	addr 
                         C      ENDIF 
                         C      	ENDM 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      IFDEF EXTERNAL_PORTS 
                         C      ;************ Controller's mapping **************** 
  0000                   C      PPI	equ	000h;  8255 first		  * 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-1


  0010                   C      PPI2	equ	010h;  8255 second	   	  * 
  0020                   C      DISP	equ	020h;  8275 display adapter	  * 
  0030                   C      DMA	equ	030h;  8257 DMA chip	    	  * 
  0040                   C      PSG1	equ	040h;  8253 first	          * 
  00C0                   C      PALM_CNTRL equ	0c0h;  Palmira control byte       * 
                         C      ;************************************************** 
                         C      ELSE 
                         C      ;************ Controller's mapping **************** 
                         C      PSG1	equ	0F800h;  8253 first	          * 
                         C      PPI	equ	0F900h;  8255 first		  * 
                         C      PPI2	equ	0FA00h;  8255 second	   	  * 
                         C      DISP	equ	0FB00h;  8275 display adapter	  * 
                         C      DMA	equ	0FC00h;  8257 DMA chip	    	  * 
                         C      PALM_CNTRL equ	0FD00h;  Palmira control byte     * 
                         C      ;************************************************** 
                         C      ENDIF 
                         C      ELSE 
                         C      IFDEF	RK60K 
                         C      ;************ Controller's mapping **************** 
                         C      FDC	equ	0F700h;				  * 
                         C      INTR	equ	0F720h;  8259 interrupt controller* 
                         C      PSG1	equ	0F740h;  8253 first	          * 
                         C      PSG2	equ	0F760h;  8253 second	      	  * 
                         C      PPI	equ	0F780h;  8255 fist		  * 
                         C      PPI2	equ	0F7A0h;  8255 second	   	  * 
                         C      DISP	equ	0F7C0h;  8275 display adapter	  * 
                         C      DMA	equ	0F7E0h;  8257 DMA chip	    	  * 
                         C      ;************************************************** 
                         C      ELSE 
                         C      ;************ Controller's mapping **************** 
                         C      ;FDC	equ	0F700h;				  * 
                         C      ;INTR	equ	0F720h;  8259 interrupt controller* 
                         C      PSG1	equ	0CC00h;  8253 first	          * 
                         C      ;PSG2	equ	0F760h;  8253 second	      	  * 
                         C      PPI	equ	0C200h;  8255 frist		  * 
                         C      PPI2	equ	0C400h;  8255 second	   	  * 
                         C      DISP	equ	0C000h;  8275 display adapter	  * 
                         C      DMA	equ	0E000h;  8257 DMA chip	    	  * 
                         C      PALM_CNTRL equ	0CE00h;  Palmira control byte     * 
                         C      ;************************************************** 
                         C      ENDIF 
                         C      ENDIF 
                         C      include SCREEN.MAC 
                         C      ;	SCREEN.MAC - bios screen parameters 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      IFDEF EXTERNAL_PORTS 
  F6D0                   C      SCR_BUFF	EQU	0EEd0h+800h 
                         C      ELSE 
                         C      SCR_BUFF	EQU	0EEd0h 
                         C      ENDIF 
                         C      ELSE 
                         C      SCR_BUFF	EQU	0b6d0h 
                         C      ENDIF 
                         C       
  004E                   C      PHYS_W		EQU	78 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-2


  001E                   C      PHYS_H  	equ	29+1 
  0924                   C      SCR_SIZE	equ	PHYS_W*PHYS_H 
                         C       
  0002                   C      FirstStr	equ	2 
                         C       
                         C       
  F76C                   C      VRAM	EQU	SCR_BUFF+FirstStr*PHYS_W 
                         C       
  004E                   C      SCR_W	EQU	78 
  001A                   C      SCR_H	EQU	25+1 
                         C       
  FF58                   C      ENDSCR	EQU	VRAM+SCR_H*PHYS_W 
                         C       
  001B                   C      @ESC	EQU	27 
                                 
                                IFDEF	USE_PRG_DC 
                                	IFDEF	EXTERNAL_PORTS 
  D200                          	START_CCP	EQU 0D200H 
                                	ELSE 
                                	START_CCP	EQU 0CA00h 
                                	ENDIF 
                                ELSE 
                                	IFDEF	RK60K 
                                	START_CCP	EQU 0BC00h 
                                	ELSE 
                                	START_CCP	EQU 9200h 
                                	ENDIF 
                                ENDIF 
                                 
                                	.phase	100h 
                         C      include B0PRGDC.ASM 
                         C      @SYSREG	MACRO	VAL 
                         C      	IN	-1 
                         C      	MVI	A,VAL 
                         C      	OUT	-1 
                         C      	ENDM 
                         C       
  0100    31 0100        C      	LXI	SP,100h 
                         C       
                         C      IFNDEF	USE_PRG_DC 
                         C      	LXI	H,CCP_START + (CPM_BIN - C_BASE) 
                         C      	MVI	B,63 
                         C      	CALL	strcpyN 
                         C      ENDIF 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      	@SYSREG	0C0h ; Turn on external device programming mode (for in/out commands) 
  0103    DB FF          C+     	IN	-1 
  0105    3E C0          C+     	MVI	A,0C0h 
  0107    D3 FF          C+     	OUT	-1 
  0109    21 01B9        C      	LXI	H,BEGPRO+1 
  010C    01 0000        C      	LXI	B,00000h 
  010F    3E 0F          C      	MVI	A,15 
  0111    CD 01B7        C      	CALL	READR 
  0114    CD 01DB        C      	CALL	LOOP01 ; Turn on working mode 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-3


  0117    3E 80          C      	MVI	A,80H ; Start page 
  0119    11 01FF        C      	LXI	D,MAP 
  011C    CD 01C0        C      	CALL	PROG_DC 
                         C      ENDIF 
                         C       
  011F    21 180B        C      	LXI	H,CCP_START + (B_BASE-C_BASE) 
  0122    11 E800        C      	LXI	D, B_BASE 
  0125    01 0D3D        C      	LXI	B, (BIOS_END-B_BASE) 
  0128    CD 0199        C      	CALL	CP001 
                         C       
                         C      IFDEF	USE_PRG_DC 
                         C      IFDEF	EXTERNAL_PORTS 
                         C      	@SYSREG	0C0h ; Turn on external device programming mode (for in/out commands) 
  012B    DB FF          C+     	IN	-1 
  012D    3E C0          C+     	MVI	A,0C0h 
  012F    D3 FF          C+     	OUT	-1 
                         C       
  0131    21 01B9        C      	LXI	H,BEGPRO+1 
  0134    01 0400        C      	LXI	B,400h + PPI 
  0137    AF             C      	XRA	A 
  0138    CD 01B7        C      	CALL	READR 
                         C       
  013B    01 0410        C      	LXI	B,400h + PPI2 
  013E    3C             C      	INR	A 
  013F    CD 01B7        C      	CALL	READR 
                         C       
  0142    3C             C      	INR	A 
  0143    D3 20          C      	OUT	DISP 
  0145    D3 21          C      	OUT	DISP+1 
                         C       
  0147    01 1030        C      	LXI	B,1000h + DMA	; DMA 
  014A    3E 09          C      	MVI	A,9 
  014C    CD 01B7        C      	CALL	READR 
                         C       
  014F    3E 06          C      	MVI	A,6	; PSG 
  0151    01 0440        C      	LXI	B,400h + PSG1 
  0154    CD 01B7        C      	CALL	READR 
                         C       
  0157    3E 0B          C      	MVI	A,11 
  0159    D3 C0          C      	OUT	PALM_CNTRL 
                         C       
                         C      	@SYSREG	80h 
  015B    DB FF          C+     	IN	-1 
  015D    3E 80          C+     	MVI	A,80h 
  015F    D3 FF          C+     	OUT	-1 
                         C      ENDIF 
                         C      ENDIF 
                         C       
                         C      IFNDEF	RK60K 
  0161    3E 80          C      	MVI	A,80H 
                         C      	@out	PALM_CNTRL 
  0163    D3 C0          C+     	out	PALM_CNTRL 
  0165    21 01EF        C      	LXI	H,FONT 
  0168    16 00          C      	MVI	D,0 
  016A    CD F15D        C      	CALL	CmdOpenDelete 
  016D    B7             C      	ORA	A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-4


  016E    C2 01A4        C      	JNZ	ERR_READ 
                         C       
  0171    11 D800        C      	LXI	D,0D800H 
  0174    21 0800        C      	LXI	H,2048 
  0177    CD F196        C      	CALL	CmdRead 
  017A    B7             C      	ORA	A 
  017B    C2 01A4        C      	JNZ	ERR_READ 
  017E    3E C0          C      	MVI	A,0C0h 
                         C      	@out	PALM_CNTRL 
  0180    D3 C0          C+     	out	PALM_CNTRL 
                         C      ENDIF 
                         C       
  0182    3E D8          C      	MVI	A,0D8h 
  0184    11 0208        C      	LXI	D,MAP2 
  0187    CD 01C0        C      	CALL	PROG_DC 
  018A    21 020B        C      	LXI	H,CCP_START 
  018D    11 D200        C      	LXI	D, C_BASE 
  0190    01 1600        C      	LXI	B, (B_BASE-C_BASE) 
  0193    CD 0199        C      	CALL	CP001 
  0196    C3 E841        C      	JMP	BOOT 
                         C       
  0199                   C      CP001: 
  0199    78             C      	MOV	A,B 
  019A    B1             C      	ORA	C 
  019B    C8             C      	RZ 
  019C    7E             C      	MOV	A,M 
  019D    12             C      	STAX	D 
  019E    23             C      	INX	H 
  019F    13             C      	INX	D 
  01A0    0B             C      	DCX	B 
  01A1    C3 0199        C      	JMP	CP001 
                         C       
  01A4                   C      ERR_READ: 
                         C      	@SYSREG	0A0h 
  01A4    DB FF          C+     	IN	-1 
  01A6    3E A0          C+     	MVI	A,0A0h 
  01A8    D3 FF          C+     	OUT	-1 
  01AA    3E 04          C      	MVI	A,4 
  01AC    D3 E0          C      	OUT	0E0H 
                         C      	@SYSREG	80h 
  01AE    DB FF          C+     	IN	-1 
  01B0    3E 80          C+     	MVI	A,80h 
  01B2    D3 FF          C+     	OUT	-1 
  01B4    C3 E000        C      	JMP	0E000H 
                         C       
  01B7                   C      READR: 
  01B7    71             C      	MOV	M,C 
  01B8                   C      BEGPRO: 
  01B8    D3 00          C      	OUT 0 
  01BA    34             C      	INR M 
  01BB    05             C      	DCR B 
  01BC    C8             C      	RZ 
  01BD    C3 01B8        C      	JMP BEGPRO 
                         C       
  01C0                   C      PROG_DC: 
  01C0    F5             C      	PUSH	PSW 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-5


                         C      	@SYSREG	0A0H;  Bjk~whr| pefhl peopncp`llhpnb`mh  bmsrpemmhu sqrpniqrb 
  01C1    DB FF          C+     	IN	-1 
  01C3    3E A0          C+     	MVI	A,0A0H 
  01C5    D3 FF          C+     	OUT	-1 
  01C7    F1             C      	POP	PSW 
  01C8    21 01B9        C      	LXI H,BEGPRO+1 ; G`ohq`r| b hl `dpeq noep`md` 
                         C      		     ; jnl`md{ out dk naeqoewemh hmjpelemr` 
                         C      		     ; m`whm`el q out 80H 
  01CB    77             C      	MOV	M,A 
  01CC                   C      LOOP: 
  01CC    1A             C      	LDAX	D 
  01CD    B7             C      	ORA	A 
  01CE    CA 01DB        C      	JZ	LOOP01 
  01D1    47             C      	MOV	B,A 
  01D2    13             C      	INX	D 
  01D3    1A             C      	LDAX	D 
  01D4    13             C      	INX	D 
  01D5    CD 01B8        C      	CALL	BEGPRO 
  01D8    C3 01CC        C      	JMP	LOOP 
  01DB                   C      LOOP01: 
                         C      	@SYSREG	80H	; G`ohq`r| b qhqrelm{i pechqrp-m`w`k|m{e 
  01DB    DB FF          C+     	IN	-1 
  01DD    3E 80          C+     	MVI	A,80H 
  01DF    D3 FF          C+     	OUT	-1 
                         C      			; gm`wemh: rspanpefhl b{jk~wem, mskeb` 
                         C      			; qrp`mhv` dnonkmhrek|mncn ngs 
  01E1    C9             C      	RET 
                         C       
  01E2                   C      strcpyN: 
  01E2    1A             C      	LDAX	D 
  01E3    13             C      	INX	D 
  01E4    77             C      	MOV	M, A 
  01E5    23             C      	INX	H 
  01E6    B7             C      	ORA	A 
  01E7    C8             C      	RZ 
  01E8    05             C      	DCR	B 
  01E9    C2 01E2        C      	JNZ	strcpyN 
  01EC    36 00          C      	MVI	M, 0 ; Replhm`rnp 
  01EE    C9             C      	RET 
                         C       
                         C       
  01EF    43 50 4D 2F    C      FONT:	DB	'CPM/8X16ENG.FNT',0 
  01F3    38 58 31 36    C      
  01F7    45 4E 47 2E    C      
  01FB    46 4E 54 00    C      
                         C       
  01FF                   C      MAP: 
  01FF    58 0A          C      	DB	58h,10 
  0201    08 0D          C      	DB	8,13 
  0203    18 0A          C      	DB	18h,10 
                         C      IFDEF	EXTERNAL_PORTS 
  0205    08 0A          C      	DB	8,10 
                         C      ELSE 
                         C      	DB	1,6 ;  8253 first 
                         C      	DB	1,0 ;  8255 first 
                         C      	DB	1,1 ;  8255 second 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-6


                         C      	DB	1,2 ;  8275 display adapter 
                         C      	DB	1,4 ;  8257 DMA chip 
                         C      	DB	1,11;  Palmira control byte 
                         C      	DB	2,10; 
                         C      ENDIF 
  0207    00             C      	DB	0 
                         C       
  0208    08 0A 00       C      MAP2:	DB	8,10,0 
                         C       
  020B                   C      CCP_START: 
                                	.dephase 
                                	.phase START_CCP 
                                 
                         C      include CCP.ASM 
                         C      ; Reformatted and converted for cross-assembly by Macro Assembler AS 
                         C      ; Eric Smith <spacewar@gmail.com> 2018-01-24 
                         C      ; from original source os2ccp.asm from 
                         C      ;   http://www.cpm.z80.de/download/cpm2-plm.zip 
                         C       
                         C      ; Changes: 
                         C      ;   multiple instructions per line split to separate lines 
                         C      ;   dollar sign in labels replaced by underscore 
                         C      ;   dollar sign (as digit separator) in binary constants removed 
                         C      ;   single quotes around strings replaced with double quotes 
                         C      ;   true and false replaced with _true and _false 
                         C      ;   replaced "not" operator with "~" 
                         C      ;   removed empty comments 
                         C      ;   added ifdef origin to allow origin to be specified from command line 
                         C      ;   added commments about serial number 
                         C      ;   added ifdefs on "noserial" to omit serialization check 
                         C       
                         C       
                         C      	.8080;.cpu	8080 
                         C       
                         C      	title	"console command processor (CCP), ver 2.0" 
                         C      ;	assembly language version of the CP/M console command processor 
                         C       
                         C      ;	version 2.2 February, 1980 
                         C       
                         C      ;	Copyright (c) 1976, 1977, 1978, 1979, 1980 
                         C      ;	Digital Research 
                         C      ;	Box 579, Pacific Grove, 
                         C      ;	California, 93950 
                         C       
  0000                   C      _false	equ	0000h 
                         C      ;_true	equ	~_false 
  0000                   C      testing	equ	_false	;true if debugging 
  0001                   C      noserialize	equ	1 
                         C       
                         C      	ifdef	origin 
                         C      	org	origin 
                         C      bdosl	equ	$+800h		;bdos location 
                         C      	else 
                         C      	if	testing 
                         C      	org	3400h 
                         C      bdosl	equ	$+800h		;bdos location 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-7


                         C      	else 
                         C      	;org	000h 
  DA00                   C      bdosl	equ	$+800h		;bdos location 
                         C      	endif 
                         C      	endif 
  0100                   C      tran	equ	100h 
  D200                   C      tranm	equ	$ 
  D200                   C      ccploc	equ	$ 
                         C       
                         C      ;	******************************************************** 
                         C      ;	*	Base of CCP contains the following code/data   * 
                         C      ;	*	ccp:	jmp ccpstart	(start with command)   * 
                         C      ;	*		jmp ccpclear    (start, clear command) * 
                         C      ;	*	ccp+6	127		(max command length)   * 
                         C      ;	*	ccp+7	comlen		(command length = 00)  * 
                         C      ;	*	ccp+8	' ... '		(16 blanks)	       * 
                         C      ;	******************************************************** 
                         C      ;	* Normal entry is at ccp, where the command line given * 
                         C      ;	* at ccp+8 is executed automatically (normally a null  * 
                         C      ;	* command with comlen = 00).  An initializing program  * 
                         C      ;	* can be automatically loaded by storing the command   * 
                         C      ;	* at ccp+8, with the command length at ccp+7.  In this * 
                         C      ;	* case, the ccp executes the command before prompting  * 
                         C      ;	* the console for input.  Note that the command is exe-* 
                         C      ;	* cuted on both warm and cold starts.  When the command* 
                         C      ;	* line is initialized, a jump to "jmp ccpclear" dis-   * 
                         C      ;	* ables the automatic command execution.               * 
                         C      ;	******************************************************** 
  D200                   C      C_BASE: 
  D200    C3 D55C        C      	jmp	ccpstart	;start ccp with possible initial command 
  D203    C3 D558        C      	jmp	ccpclear	;clear the command buffer 
  D206    7F             C      maxlen:	db	127	;max buffer length 
  D207    00             C      comlen:	db	0	;command length (filled in by dos) 
                         C      ;	(command executed initially if comlen non zero) 
  D208                   C      combuf: 
  D208    20 20 20 20    C      	db	"        "	;8 character fill 
  D20C    20 20 20 20    C      
  D210    20 20 20 20    C      	db	"        "	;8 character fill 
  D214    20 20 20 20    C      
  D218    43 4F 50 59    C      	db	"COPYRIGHT (C) 1979, DIGITAL RESEARCH  "; 38 
  D21C    52 49 47 48    C      
  D220    54 20 28 43    C      
  D224    29 20 31 39    C      
  D228    37 39 2C 20    C      
  D22C    44 49 47 49    C      
  D230    54 41 4C 20    C      
  D234    52 45 53 45    C      
  D238    41 52 43 48    C      
  D23C    20 20          C      
  D23E                   C      	ds	128-($-combuf) 
                         C      ;	total buffer length is 128 characters 
  D288    D208           C      comaddr:dw	combuf	;address of next to char to scan 
  D28A                   C      staddr:	ds	2	;starting address of current fillfcb request 
                         C       
  0004                   C      diska	equ	0004h	;disk address for current disk 
  0005                   C      bdos	equ	0005h	;primary bdos entry point 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-8


  0080                   C      buff	equ	0080h	;default buffer 
  005C                   C      fcb	equ	005ch	;default file control block 
                         C       
  0001                   C      rcharf	equ	1	;read character function 
  0002                   C      pcharf	equ	2	;print character function 
  0009                   C      pbuff	equ	9	;print buffer function 
  000A                   C      rbuff	equ	10	;read buffer function 
  000B                   C      breakf	equ	11	;break key function 
  000C                   C      liftf	equ	12	;lift head function (no operation) 
  000D                   C      initf	equ	13	;initialize bdos function 
  000E                   C      self	equ	14	;select disk function 
  000F                   C      openf	equ	15	;open file function 
  0010                   C      closef	equ	16	;close file function 
  0011                   C      searf	equ	17	;search for file function 
  0012                   C      searnf	equ	18	;search for next file function 
  0013                   C      delf	equ	19	;delete file function 
  0014                   C      dreadf	equ	20	;disk read function 
  0015                   C      dwritf	equ	21	;disk write function 
  0016                   C      makef	equ	22	;file make function 
  0017                   C      renf	equ	23	;rename file function 
  0018                   C      logf	equ	24	;return login vector 
  0019                   C      cself	equ	25	;return currently selected drive number 
  001A                   C      dmaf	equ	26	;set dma address 
  0020                   C      userf	equ	32	;set user number 
                         C       
                         C      ;	special fcb flags 
  0009                   C      rofile	equ	9	;read only file 
  000A                   C      sysfile	equ	10	;system file flag 
                         C       
                         C      ;	special characters 
  000D                   C      cr	equ	13	;carriage return 
  000A                   C      lf	equ	10	;line feed 
  005F                   C      la	equ	5fh	;left arrow 
  001A                   C      eofile	equ	1ah	;end of file 
                         C       
                         C      ;	utility procedures 
  D28C                   C      printchar: 
  D28C    5F             C      	mov	e,a 
  D28D    0E 02          C      	mvi	c,pcharf 
  D28F    C3 0005        C      	jmp	bdos 
                         C       
  D292                   C      printbc: 
                         C      	;print character, but save b,c registers 
  D292    C5             C      	push	b 
  D293    CD D28C        C      	call	printchar 
  D296    C1             C      	pop	b 
  D297    C9             C      	ret 
                         C       
  D298                   C      ccp_crlf: 
  D298    3E 0D          C      	mvi	a,cr 
  D29A    CD D292        C      	call	printbc 
  D29D    3E 0A          C      	mvi	a,lf 
  D29F    C3 D292        C      	jmp	printbc 
                         C       
  D2A2                   C      blank: 
  D2A2    3E 20          C      	mvi	a,' ' 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-9


  D2A4    C3 D292        C      	jmp	printbc 
                         C       
  D2A7                   C      ccp_print:	; print string starting at b,c until next 00 entry 
  D2A7    C5             C      	push	b		;now print the string 
  D2A8    CD D298        C      	call	ccp_crlf 
  D2AB    E1             C      	pop	h 
  D2AC    7E             C      prin0:	mov	a,m		;stop on 00 
  D2AD    B7             C      	ora	a 
  D2AE    C8             C      	rz 
  D2AF    23             C      	inx	h		;ready for next 
  D2B0    E5             C      	push	h 
  D2B1    CD D28C        C      	call	printchar	;character printed 
  D2B4    E1             C      	pop	h 
  D2B5    C3 D2AC        C      	jmp	prin0		;for another character 
                         C       
  D2B8                   C      ccp_initialize: 
  D2B8    0E 0D          C      	mvi	c,initf 
  D2BA    C3 0005        C      	jmp	bdos 
                         C       
  D2BD                   C      ccp_select: 
  D2BD    5F             C      	mov	e,a 
  D2BE    0E 0E          C      	mvi	c,self 
  D2C0    C3 0005        C      	jmp	bdos 
                         C       
  D2C3                   C      bdos_inr: 
  D2C3    CD 0005        C      	call	bdos 
  D2C6    32 D9EB        C      	sta	ccp_dcnt 
  D2C9    3C             C      	inr	a 
  D2CA    C9             C      	ret 
                         C       
  D2CB                   C      ccp_open:	;open the file given by d,e 
  D2CB    0E 0F          C      	mvi	c,openf 
  D2CD    C3 D2C3        C      	jmp	bdos_inr 
                         C       
  D2D0                   C      openc:	;open comfcb 
  D2D0    AF             C      	xra	a		;clear next record to read 
  D2D1    32 D9EA        C      	sta	comrec 
  D2D4    11 D9CA        C      	lxi	d,comfcb 
  D2D7    C3 D2CB        C      	jmp	ccp_open 
                         C       
  D2DA                   C      ccp_close:	;close the file given by d,e 
  D2DA    0E 10          C      	mvi	c,closef 
  D2DC    C3 D2C3        C      	jmp	bdos_inr 
                         C       
  D2DF                   C      ccp_search:	;search for the file given by d,e 
  D2DF    0E 11          C      	mvi	c,searf 
  D2E1    C3 D2C3        C      	jmp	bdos_inr 
                         C       
  D2E4                   C      ccp_searchn: 
                         C      	;search for the next occurrence of the file given by d,e 
  D2E4    0E 12          C      	mvi	c,searnf 
  D2E6    C3 D2C3        C      	jmp	bdos_inr 
                         C       
  D2E9                   C      searchcom: 
                         C      	;search for comfcb file 
  D2E9    11 D9CA        C      	lxi	d,comfcb 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-10


  D2EC    C3 D2DF        C      	jmp	ccp_search 
                         C       
  D2EF                   C      ccp_delete:	;delete the file given by d,e 
  D2EF    0E 13          C      	mvi	c,delf 
  D2F1    C3 0005        C      	jmp	bdos 
                         C       
  D2F4                   C      bdos_cond: 
  D2F4    CD 0005        C      	call	bdos 
  D2F7    B7             C      	ora	a 
  D2F8    C9             C      	ret 
                         C       
  D2F9                   C      ccp_diskread: 
                         C      	;read the next record from the file given by d,e 
  D2F9    0E 14          C      	mvi	c,dreadf 
  D2FB    C3 D2F4        C      	jmp	bdos_cond 
                         C       
  D2FE                   C      diskreadc: 
                         C      	;read the comfcb file 
  D2FE    11 D9CA        C      	lxi	d,comfcb 
  D301    C3 D2F9        C      	jmp	ccp_diskread 
                         C       
  D304                   C      ccp_diskwrite: 
                         C      	;write the next record to the file given by d,e 
  D304    0E 15          C      	mvi	c,dwritf 
  D306    C3 D2F4        C      	jmp	bdos_cond 
                         C       
  D309                   C      ccp_make:	;create the file given by d,e 
  D309    0E 16          C      	mvi	c,makef 
  D30B    C3 D2C3        C      	jmp	bdos_inr 
                         C       
  D30E                   C      renam:	;rename the file given by d,e 
  D30E    0E 17          C      	mvi	c,renf 
  D310    C3 0005        C      	jmp	bdos 
                         C       
  D313                   C      getuser: 
                         C      	;return current user code in a 
  D313    1E FF          C      	mvi	e,0ffh		;drop through to setuser 
                         C       
  D315                   C      setuser: 
  D315    0E 20          C              mvi	c,userf		;sets user number 
  D317    C3 0005        C      	jmp	bdos 
                         C       
  D31A                   C      saveuser: 
                         C      	;save user#/disk# before possible ^c or transient 
  D31A    CD D313        C      	call	getuser		;code to a 
  D31D    87             C      	add	a		;rot left 
  D31E    87             C      	add	a 
  D31F    87             C      	add	a 
  D320    87             C      	add	a 
  D321    21 D9EC        C      	lxi	h,cdisk		;4b=user, 4b=disk 
  D324    B6             C      	ora	m 
  D325    32 0004        C      	sta	diska		;stored away in memory for later 
  D328    C9             C      	ret 
                         C       
  D329                   C      setdiska: 
  D329    3A D9EC        C      	lda	cdisk		;user/disk 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-11


  D32C    32 0004        C      	sta	diska 
  D32F    C9             C      	ret 
                         C       
  D330                   C      translate: 
                         C      	;translate character in register A to upper case 
  D330    FE 61          C      	cpi	61h		;return if below lower case a 
  D332    D8             C      	rc 
  D333    FE 7B          C      	cpi	7bh		;return if above lower case z 
  D335    D0             C      	rnc 
  D336    E6 5F          C      	ani	5fh		;translated to upper case 
  D338    C9             C      	ret 
                         C       
  D339                   C      readcom: 
                         C      	;read the next command into the command buffer 
                         C      	;check for submit file 
  D339    3A D9A8        C      	lda	submit 
  D33C    B7             C      	ora	a 
  D33D    CA D396        C      	jz	nosub 
                         C      	;scanning a submit file 
                         C      	;change drives to open and read the file 
  D340    3A D9EC        C      	lda	cdisk 
  D343    B7             C      	ora	a 
  D344    3E 00          C      	mvi	a,0 
  D346    C4 D2BD        C      	cnz	ccp_select 
                         C      	;have to open again in case xsub present 
  D349    11 D9A9        C      	lxi	d,subfcb	;skip if no sub 
  D34C    CD D2CB        C      	call	ccp_open 
  D34F    CA D396        C      	jz	nosub 
  D352    3A D9B8        C      	lda	subrc		;read last record(s) first 
  D355    3D             C      	dcr	a 
  D356    32 D9C9        C      	sta	subcr		;current record to read 
  D359    11 D9A9        C      	lxi	d,subfcb	;end of file if last record 
  D35C    CD D2F9        C      	call	ccp_diskread 
  D35F    C2 D396        C      	jnz	nosub 
                         C      	;disk read is ok, transfer to combuf 
  D362    11 D207        C      	lxi	d,comlen 
  D365    21 0080        C      	lxi	h,buff 
  D368    06 80          C      	mvi	b,128 
  D36A    CD D642        C      	call	move0 
                         C      	;line is transferred, close the file with a 
                         C      	;deleted record 
  D36D    21 D9B7        C      	lxi	h,submod	;clear fwflag 
  D370    36 00          C      	mvi	m,0 
  D372    23             C      	inx	h		;one less record 
  D373    35             C      	dcr	m 
  D374    11 D9A9        C      	lxi	d,subfcb 
  D377    CD D2DA        C      	call	ccp_close 
  D37A    CA D396        C      	jz	nosub 
                         C      	;close went ok, return to original drive 
  D37D    3A D9EC        C      	lda	cdisk 
  D380    B7             C      	ora	a 
  D381    C4 D2BD        C      	cnz	ccp_select 
                         C      	;print to the 00 
  D384    21 D208        C      	lxi	h,combuf 
  D387    CD D2AC        C      	call	prin0 
  D38A    CD D3C2        C      	call	break_key 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-12


  D38D    CA D3A7        C      	jz	noread 
  D390    CD D3DD        C      	call	del_sub		;break key depressed 
  D393    C3 D582        C      	jmp	ccp 
                         C       
  D396                   C      nosub:	;no submit file 
  D396    CD D3DD        C      	call	del_sub 
                         C      	;translate to upper case, store zero at end 
  D399    CD D31A        C      	call	saveuser	;user # save in case control c 
  D39C    0E 0A          C      	mvi	c,rbuff 
  D39E    11 D206        C      	lxi	d,maxlen 
  D3A1    CD 0005        C      	call	bdos 
  D3A4    CD D329        C      	call	setdiska	;no control c, so restore diska 
  D3A7                   C      noread:	;enter here from submit file 
                         C      	;set the last character to zero for later scans 
  D3A7    21 D207        C      	lxi	h,comlen	;length is in b 
  D3AA    46             C      	mov	b,m 
  D3AB                   C      readcom0: 
  D3AB    23             C      	inx	h		;end of scan? 
  D3AC    78             C      	mov	a,b 
  D3AD    B7             C      	ora	a 
  D3AE    CA D3BA        C      	jz	readcom1	;get character and translate 
  D3B1    7E             C      	mov	a,m 
  D3B2    CD D330        C      	call	translate 
  D3B5    77             C      	mov	m,a 
  D3B6    05             C      	dcr	b 
  D3B7    C3 D3AB        C      	jmp	readcom0 
                         C       
  D3BA                   C      readcom1: ;end of scan, h,l address end of command 
  D3BA    77             C      	mov	m,a		;store a zero 
  D3BB    21 D208        C      	lxi	h,combuf	;ready to scan to zero 
  D3BE    22 D288        C      	shld	comaddr 
  D3C1    C9             C      	ret 
                         C       
  D3C2                   C      break_key: 
                         C      	;check for a character ready at the console 
  D3C2    0E 0B          C      	mvi	c,breakf 
  D3C4    CD 0005        C      	call	bdos 
  D3C7    B7             C      	ora	a 
  D3C8    C8             C      	rz 
  D3C9    0E 01          C      	mvi	c,rcharf	;character cleared 
  D3CB    CD 0005        C      	call	bdos 
  D3CE    B7             C      	ora	a 
  D3CF    C9             C      	ret 
                         C       
  D3D0                   C      cselect: 
                         C      	;get the currently selected drive number to reg-A 
  D3D0    0E 19          C      	mvi	c,cself 
  D3D2    C3 0005        C      	jmp	bdos 
                         C       
  D3D5                   C      setdmabuff: 
                         C      	;set default buffer dma address 
  D3D5    11 0080        C      	lxi	d,buff		;(drop through) 
                         C       
  D3D8                   C      ccp_setdma: 
                         C      	;set dma address to d,e 
  D3D8    0E 1A          C      	mvi	c,dmaf 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-13


  D3DA    C3 0005        C      	jmp	bdos 
                         C       
  D3DD                   C      del_sub: 
                         C      	;delete the submit file, and set submit flag to false 
  D3DD    21 D9A8        C      	lxi	h,submit	;return if no sub file 
  D3E0    7E             C      	mov	a,m 
  D3E1    B7             C      	ora	a 
  D3E2    C8             C      	rz 
  D3E3    36 00          C      	mvi	m,0		;submit flag is set to false 
  D3E5    AF             C      	xra	a		;on drive a to erase file 
  D3E6    CD D2BD        C      	call	ccp_select 
  D3E9    11 D9A9        C      	lxi	d,subfcb 
  D3EC    CD D2EF        C      	call	ccp_delete 
  D3EF    3A D9EC        C      	lda	cdisk		;back to original drive 
  D3F2    C3 D2BD        C      	jmp	ccp_select 
                         C       
                         C      	ifndef	noserial 
  D3F5                   C      serialize: 
                         C      	;check serialization 
  D3F5    11 D528        C      	lxi	d,serial	;check six bytes 
  D3F8    21 DA00        C      	lxi	h,bdosl 
  D3FB    06 06          C      	mvi	b,6 
  D3FD    1A             C      ser0:	ldax	d 
  D3FE    BE             C      	cmp	m 
  D3FF    C2 D5CF        C      	jnz	badserial 
  D402    13             C      	inx	d 
  D403    23             C      	inx	h 
  D404    05             C      	dcr	b 
  D405    C2 D3FD        C      	jnz	ser0 
  D408    C9             C      	ret			;serial number is ok 
                         C      	endif 
                         C       
  D409                   C      comerr: 
                         C      	;error in command string starting at position 
                         C      	;'staddr' and ending with first delimiter 
  D409    CD D298        C      	call	ccp_crlf		;space to next line 
  D40C    2A D28A        C      	lhld	staddr		;h,l address first to print 
  D40F                   C      comerr0: ;print characters until blank or zero 
  D40F    7E             C      	mov	a,m		; not blank 
  D410    FE 20          C      	cpi	' ' 
  D412    CA D422        C      	jz	comerr1 
  D415    B7             C      	ora	a		; not zero, so print it 
  D416    CA D422        C      	jz	comerr1 
  D419    E5             C      	push	h 
  D41A    CD D28C        C      	call	printchar 
  D41D    E1             C      	pop	h 
  D41E    23             C      	inx	h 
  D41F    C3 D40F        C      	jmp	comerr0;	for another character 
  D422                   C      comerr1: ;print question mark,and delete sub file 
  D422    3E 3F          C      	mvi	a,'?' 
  D424    CD D28C        C      	call	printchar 
  D427    CD D298        C      	call	ccp_crlf 
  D42A    CD D3DD        C      	call	del_sub 
  D42D    C3 D582        C      	jmp	ccp ;restart with next command 
                         C       
                         C      ; fcb scan and fill subroutine (entry is at fillfcb below) 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-14


                         C      	;fill the comfcb, indexed by A (0 or 16) 
                         C      	;subroutines 
  D430                   C      delim:	;look for a delimiter 
  D430    1A             C      	ldax	d		;not the last element 
  D431    B7             C      	ora	a 
  D432    C8             C      	rz 
  D433    FE 20          C      	cpi	' '		;non graphic 
  D435    DA D409        C      	jc	comerr 
  D438    C8             C      	rz			;treat blank as delimiter 
  D439    FE 3D          C      	cpi	'=' 
  D43B    C8             C      	rz 
  D43C    FE 5F          C      	cpi	la		;left arrow 
  D43E    C8             C      	rz 
  D43F    FE 2E          C      	cpi	'.' 
  D441    C8             C      	rz 
  D442    FE 3A          C      	cpi	':' 
  D444    C8             C      	rz 
  D445    FE 3B          C      	cpi	';' 
  D447    C8             C      	rz 
  D448    FE 3C          C      	cpi	'<' 
  D44A    C8             C      	rz 
  D44B    FE 3E          C      	cpi	'>' 
  D44D    C8             C      	rz 
  D44E    C9             C      	ret			;delimiter not found 
                         C       
  D44F                   C      deblank: ;deblank the input line 
  D44F    1A             C      	ldax	d		;treat end of line as blank 
  D450    B7             C      	ora	a 
  D451    C8             C      	rz 
  D452    FE 20          C      	cpi	' ' 
  D454    C0             C      	rnz 
  D455    13             C      	inx	d 
  D456    C3 D44F        C      	jmp	deblank 
                         C       
  D459                   C      ccp_addh: ;add a to h,l 
  D459    85             C      	add	l 
  D45A    6F             C      	mov	l,a 
  D45B    D0             C      	rnc 
  D45C    24             C      	inr	h 
  D45D    C9             C      	ret 
                         C       
  D45E                   C      fillfcb0: 
                         C      	;equivalent to fillfcb(0) 
  D45E    3E 00          C      	mvi	a,0 
                         C       
  D460                   C      fillfcb: 
  D460    21 D9CA        C      	lxi	h,comfcb	;fcb rescanned at end 
  D463    CD D459        C      	call	ccp_addh 
  D466    E5             C      	push	h 
  D467    E5             C      	push	h 
  D468    AF             C      	xra	a		;clear selected disk (in case A:...) 
  D469    32 D9ED        C      	sta	sdisk 
  D46C    2A D288        C      	lhld	comaddr		;command address in d,e 
  D46F    EB             C      	xchg 
  D470    CD D44F        C      	call	deblank		;to first non-blank character 
  D473    EB             C      	xchg			;in case of errors 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-15


  D474    22 D28A        C      	shld	staddr 
  D477    EB             C      	xchg			;d,e has command, h,l has fcb address 
  D478    E1             C      	pop	h 
                         C      	;look for preceding file name A: B: ... 
  D479    1A             C      	ldax	d		;use current disk if empty command 
  D47A    B7             C      	ora	a 
  D47B    CA D489        C      	jz	setcur0 
  D47E    DE 40          C      	sbi	'A'-1		;disk name held in b if : follows 
  D480    47             C      	mov	b,a 
  D481    13             C      	inx	d		;set disk name if : 
  D482    1A             C      	ldax	d 
  D483    FE 3A          C      	cpi	':' 
  D485    CA D490        C      	jz	setdsk 
                         C       
  D488                   C      setcur: ;set current disk 
  D488    1B             C      	dcx	d		;back to first character of command 
  D489                   C      setcur0: 
  D489    3A D9EC        C      	lda	cdisk 
  D48C    77             C      	mov	m,a 
  D48D    C3 D496        C      	jmp	setname 
                         C       
  D490                   C      setdsk: ;set disk to name in register b 
  D490    78             C      	mov	a,b		;mark as disk selected 
  D491    32 D9ED        C      	sta	sdisk 
  D494    70             C      	mov	m,b		;past the : 
  D495    13             C      	inx	d 
                         C       
  D496                   C      setname: ;set the file name field 
  D496    06 08          C      	mvi	b,8		;file name length (max) 
  D498                   C      setnam0: 
  D498    CD D430        C      	call	delim		;not a delimiter 
  D49B    CA D4B9        C      	jz	padname 
  D49E    23             C      	inx	h		;must be ?'s 
  D49F    FE 2A          C      	cpi	'*' 
  D4A1    C2 D4A9        C      	jnz	setnam1 
  D4A4    36 3F          C      	mvi	m,'?'		;to dec count 
  D4A6    C3 D4AB        C      	jmp	setnam2 
                         C       
  D4A9                   C      setnam1: 
  D4A9    77             C      	mov	m,a		;store character to fcb 
  D4AA    13             C      	inx	d 
  D4AB                   C      setnam2: 
  D4AB    05             C      	dcr	b		;count down length 
  D4AC    C2 D498        C      	jnz	setnam0 
                         C       
                         C      	;end of name, truncate remainder 
  D4AF    CD D430        C      trname:	call	delim		;set type field if delimiter 
  D4B2    CA D4C0        C      	jz	setty 
  D4B5    13             C      	inx	d 
  D4B6    C3 D4AF        C      	jmp	trname 
                         C       
  D4B9                   C      padname: 
  D4B9    23             C      	inx	h 
  D4BA    36 20          C      	mvi	m,' ' 
  D4BC    05             C      	dcr	b 
  D4BD    C2 D4B9        C      	jnz	padname 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-16


                         C       
  D4C0                   C      setty: ;set the type field 
  D4C0    06 03          C      	mvi	b,3		;skip the type field if no . 
  D4C2    FE 2E          C      	cpi	'.' 
  D4C4    C2 D4E9        C      	jnz	padty 
  D4C7    13             C      	inx	d		;past the ., to the file type field 
  D4C8                   C      setty0: ;set the field from the command buffer 
  D4C8    CD D430        C      	call	delim 
  D4CB    CA D4E9        C      	jz	padty 
  D4CE    23             C      	inx	h 
  D4CF    FE 2A          C      	cpi	'*' 
  D4D1    C2 D4D9        C      	jnz	setty1 
  D4D4    36 3F          C      	mvi	m,'?'		;since * specified 
  D4D6    C3 D4DB        C      	jmp	setty2 
                         C       
  D4D9                   C      setty1: ;not a *, so copy to type field 
  D4D9    77             C      	mov	m,a 
  D4DA    13             C      	inx	d 
  D4DB                   C      setty2: ;decrement count and go again 
  D4DB    05             C      	dcr	b 
  D4DC    C2 D4C8        C      	jnz	setty0 
                         C       
                         C      	;end of type field, truncate 
  D4DF                   C      trtyp: ;truncate type field 
  D4DF    CD D430        C      	call	delim 
  D4E2    CA D4F0        C      	jz	efill 
  D4E5    13             C      	inx	d 
  D4E6    C3 D4DF        C      	jmp	trtyp 
                         C       
  D4E9                   C      padty:	;pad the type field with blanks 
  D4E9    23             C      	inx	h 
  D4EA    36 20          C      	mvi	m,' ' 
  D4EC    05             C      	dcr	b 
  D4ED    C2 D4E9        C      	jnz	padty 
                         C       
  D4F0                   C      efill: ;end of the filename/filetype fill, save command address 
                         C      	;fill the remaining fields for the fcb 
  D4F0    06 03          C      	mvi	b,3 
  D4F2    23             C      efill0:	inx h 
  D4F3    36 00          C      	mvi	m,0 
  D4F5    05             C      	dcr	b 
  D4F6    C2 D4F2        C      	jnz	efill0 
  D4F9    EB             C      	xchg			;set new starting point 
  D4FA    22 D288        C      	shld	comaddr 
                         C       
                         C      	;recover the start address of the fcb and count ?'s 
  D4FD    E1             C      	pop	h		;b=0, c=8+3 
  D4FE    01 000B        C      	lxi	b,11 
  D501    23             C      scnq:	inx	h 
  D502    7E             C      	mov	a,m 
  D503    FE 3F          C      	cpi	'?' 
  D505    C2 D509        C      	jnz	scnq0 
                         C      	;? found, count it in b 
  D508    04             C      	inr b 
  D509    0D             C      scnq0:	dcr	c 
  D50A    C2 D501        C      	jnz	scnq 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-17


                         C       
                         C      	;number of ?'s in c, move to a and return with flags set 
  D50D    78             C      	mov	a,b 
  D50E    B7             C      	ora	a 
  D50F    C9             C      	ret 
                         C       
  D510                   C      intvec: 
                         C      	;intrinsic function names (all are four characters) 
  D510    44 49 52 20    C      	db	"DIR " 
  D514    45 52 41 20    C      	db	"ERA " 
  D518    54 59 50 45    C      	db	"TYPE" 
  D51C    53 41 56 45    C      	db	"SAVE" 
  D520    52 45 4E 20    C      	db	"REN " 
  D524    55 53 45 52    C              db      "USER" 
  0006                   C      intlen	equ ($-intvec)/4 ;intrinsic function length 
                         C      	 
                         C      ; serial number (details not documented in original DRI source file) 
  D528    00             C      serial:	db	0		; OEM number, low byte 
  D529    00             C      	db	0		; CP/M version, 16h = 2.2 
  D52A    00             C      	db	0		; OEM number, high byte 
  D52B    00 00 00       C      	db	0,0,0		; serial number, big-endian 
                         C       
                         C       
  D52E                   C      intrinsic: 
                         C      	;look for intrinsic functions (comfcb has been filled) 
  D52E    21 D510        C      	lxi	h,intvec	;c counts intrinsics as scanned 
  D531    0E 00          C      	mvi	c,0 
  D533                   C      intrin0: 
  D533    79             C      	mov	a,c		;done with scan? 
  D534    FE 06          C      	cpi	intlen 
  D536    D0             C      	rnc 
                         C      	;no, more to scan 
  D537    11 D9CB        C      	lxi	d,comfcb+1	;beginning of name 
  D53A    06 04          C      	mvi	b,4		;length of match is in b 
  D53C                   C      intrin1: 
  D53C    1A             C      	ldax	d		;match? 
  D53D    BE             C      	cmp	m 
  D53E    C2 D54F        C      	jnz	intrin2		;skip if no match 
  D541    13             C      	inx	d 
  D542    23             C      	inx	h 
  D543    05             C      	dcr	b 
  D544    C2 D53C        C      	jnz	intrin1		;loop while matching 
                         C       
                         C      	;complete match on name, check for blank in fcb 
  D547    1A             C      	ldax	d		;otherwise matched 
  D548    FE 20          C      	cpi	' ' 
  D54A    C2 D554        C      	jnz	intrin3 
  D54D    79             C      	mov	a,c		;with intrinsic number in a 
  D54E    C9             C      	ret 
                         C       
  D54F                   C      intrin2: ;mismatch, move to end of intrinsic 
  D54F    23             C      	inx	h 
  D550    05             C      	dcr	b 
  D551    C2 D54F        C      	jnz	intrin2 
                         C       
  D554                   C      intrin3: ;try next intrinsic 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-18


  D554    0C             C      	inr	c		;to next intrinsic number 
  D555    C3 D533        C      	jmp	intrin0		;for another round 
                         C       
  D558                   C      ccpclear: 
                         C      	;clear the command buffer 
  D558    AF             C      	xra	a 
  D559    32 D207        C      	sta	comlen 
                         C      	;drop through to start ccp 
  D55C                   C      ccpstart: 
                         C      	;enter here from boot loader 
  D55C    31 D9A8        C      	lxi	sp,stack	;save initial disk number 
  D55F    C5             C      	push	b 
                         C              ;(high order 4bits=user code, low 4bits=disk#) 
  D560    79             C      	mov	a,c		;user code 
  D561    1F             C      	rar 
  D562    1F             C      	rar 
  D563    1F             C      	rar 
  D564    1F             C      	rar 
  D565    E6 0F          C      	ani	0fh 
                         C      	 
  D567    5F             C      	mov	e,a		;user code selected 
  D568    CD D315        C      	call	setuser 
                         C      	;initialize for this user, get $ flag 
  D56B    CD D2B8        C              call	ccp_initialize	;0ffh in accum if $ file present 
  D56E    32 D9A8        C              sta	submit		;submit flag set if $ file present 
  D571    C1             C              pop	b		;recall user code and disk number 
  D572    79             C      	mov	a,c		;disk number in accumulator 
  D573    E6 0F          C      	ani	0fh 
  D575    32 D9EC        C              sta	cdisk		;clears user code nibble 
  D578    CD D2BD        C      	call	ccp_select		;proper disk is selected, now check sub files 
                         C      	;check for initial command 
  D57B    3A D207        C      	lda	comlen		;assume typed already 
  D57E    B7             C      	ora	a 
  D57F    C2 D598        C      	jnz	ccp0 
                         C       
  D582                   C      ccp: 
                         C      	;enter here on each command or error condition 
  D582    31 D9A8        C      	lxi	sp,stack 
  D585    CD D298        C      	call	ccp_crlf		;print d> prompt, where d is disk name 
  D588    CD D3D0        C      	call	cselect		;get current disk number 
  D58B    C6 41          C      	adi	'A' 
  D58D    CD D28C        C      	call	printchar 
  D590    3E 3E          C      	mvi	a,'>' 
  D592    CD D28C        C      	call	printchar 
  D595    CD D339        C      	call	readcom		;command buffer filled 
  D598                   C      ccp0:	;(enter here from initialization with command full) 
  D598    11 0080        C      	lxi	d,buff		;default dma address at buff 
  D59B    CD D3D8        C      	call	ccp_setdma 
  D59E    CD D3D0        C      	call	cselect		;current disk number saved 
  D5A1    32 D9EC        C      	sta	cdisk 
  D5A4    CD D45E        C      	call	fillfcb0	;command fcb filled 
  D5A7    C4 D409        C      	cnz	comerr		;the name cannot be an ambiguous reference 
  D5AA    3A D9ED        C      	lda	sdisk 
  D5AD    B7             C      	ora	a 
  D5AE    C2 D8A5        C      	jnz	userfunc 
                         C      	;check for an intrinsic function 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-19


  D5B1    CD D52E        C      	call	intrinsic 
  D5B4    21 D5C1        C      	lxi	h,jmptab	;index is in the accumulator 
  D5B7    5F             C      	mov	e,a		;index in d,e 
  D5B8    16 00          C      	mvi	d,0 
  D5BA    19             C      	dad	d 
  D5BB    19             C      	dad	d 
  D5BC    7E             C      	mov	a,m 
  D5BD    23             C      	inx	h 
  D5BE    66             C      	mov	h,m 
  D5BF    6F             C      	mov	l,a 
  D5C0    E9             C      	pchl 
                         C      	;pc changes to the proper intrinsic or user function 
                         C       
  D5C1                   C      jmptab: 
  D5C1    D677           C      	dw	direct	;directory search 
  D5C3    D71F           C      	dw	erase	;file erase 
  D5C5    D75D           C      	dw	type	;type file 
  D5C7    D7AD           C      	dw	save	;save memory image 
  D5C9    D810           C      	dw	ccp_rename	;file rename 
  D5CB    D88E           C      	dw	user	;user number 
  D5CD    D8A5           C      	dw	userfunc;user-defined function 
                         C       
                         C      	ifndef	noserial 
  D5CF                   C      badserial: 
  D5CF    21 76F3        C      	LXI	H,76F3H	;'DI HLT' instructions.	 
                         C      	;typo "lxi h,di or (hlt shl 8)" here originally, 
                         C      	;corrected by comparing to disassembly of Clark Calkins. 
  D5D2    22 D200        C      	shld	ccploc 
  D5D5    21 D200        C      	lxi	h,ccploc 
  D5D8    E9             C      	pchl 
                         C      	endif 
                         C       
                         C      ;utility subroutines for intrinsic handlers 
  D5D9                   C      readerr: 
                         C      	;print the read error message 
  D5D9    01 D5DF        C      	lxi	b,rdmsg 
  D5DC    C3 D2A7        C      	jmp	ccp_print 
  D5DF    52 45 41 44    C      rdmsg: db "READ ERROR",0 
  D5E3    20 45 52 52    C      
  D5E7    4F 52 00       C      
                         C       
  D5EA                   C      nofile: 
                         C      	;print no file message 
  D5EA    01 D5F0        C      	lxi	b,nofmsg 
  D5ED    C3 D2A7        C      	jmp	ccp_print 
  D5F0    4E 4F 20 46    C      nofmsg: db "NO FILE",0 
  D5F4    49 4C 45 00    C      
                         C       
  D5F8                   C      getnumber: ;read a number from the command line 
  D5F8    CD D45E        C      	call	fillfcb0	;should be number 
  D5FB    3A D9ED        C      	lda	sdisk		;cannot be prefixed 
  D5FE    B7             C      	ora	a 
  D5FF    C2 D409        C      	jnz	comerr 
                         C      	;convert the byte value in comfcb to binary 
  D602    21 D9CB        C      	lxi	h,comfcb+1	;(b=0, c=11) 
  D605    01 000B        C      	lxi	b,11 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-20


                         C      	;value accumulated in b, c counts name length to zero 
  D608    7E             C      conv0:	mov	a,m 
  D609    FE 20          C      	cpi ' ' 
  D60B    CA D633        C      	jz	conv1 
                         C      	;more to scan, convert char to binary and add 
  D60E    23             C      	inx	h		;valid? 
  D60F    D6 30          C      	sui	'0' 
  D611    FE 0A          C      	cpi	10 
  D613    D2 D409        C      	jnc	comerr 
  D616    57             C      	mov	d,a		;save value 
  D617    78             C      	mov	a,b		;mult by 10 
  D618    E6 E0          C      	ani	11100000b 
  D61A    C2 D409        C      	jnz	comerr 
  D61D    78             C      	mov	a,b		;recover value 
  D61E    07             C      	rlc			;*8 
  D61F    07             C      	rlc 
  D620    07             C      	rlc 
  D621    80             C      	add	b 
  D622    DA D409        C      	jc	comerr 
  D625    80             C      	add	b		;*8+*2 = *10 
  D626    DA D409        C      	jc	comerr 
  D629    82             C      	add	d		;+digit 
  D62A    DA D409        C      	jc	comerr 
  D62D    47             C      	mov	b,a		;for another digit 
  D62E    0D             C      	dcr	c 
  D62F    C2 D608        C      	jnz	conv0 
  D632    C9             C      	ret 
  D633                   C      conv1:	;end of digits, check for all blanks 
  D633    7E             C      	mov	a,m		;blanks? 
  D634    FE 20          C      	cpi	' ' 
  D636    C2 D409        C      	jnz	comerr 
  D639    23             C      	inx	h 
  D63A    0D             C      	dcr	c 
  D63B    C2 D633        C      	jnz	conv1 
  D63E    78             C      	mov	a,b		;recover value 
  D63F    C9             C      	ret 
                         C       
  D640                   C      movename: 
                         C      	;move 3 characters from h,l to d,e addresses 
  D640    06 03          C      	mvi	b,3 
  D642    7E             C      move0:	mov	a,m 
  D643    12             C      	stax	d 
  D644    23             C      	inx	h 
  D645    13             C      	inx	d 
  D646    05             C      	dcr	b 
  D647    C2 D642        C      	jnz	move0 
  D64A    C9             C      	ret 
                         C       
  D64B                   C      addhcf:	;buff + a + c to h,l followed by fetch 
  D64B    21 0080        C      	lxi	h,buff 
  D64E    81             C      	add	c 
  D64F    CD D459        C      	call	ccp_addh 
  D652    7E             C      	mov	a,m 
  D653    C9             C      	ret 
                         C       
  D654                   C      setdisk: 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-21


                         C      	;change disks for this command, if requested 
  D654    AF             C      	xra	a		;clear disk name from fcb 
  D655    32 D9CA        C      	sta	comfcb 
  D658    3A D9ED        C      	lda	sdisk		;no action if not specified 
  D65B    B7             C      	ora	a 
  D65C    C8             C      	rz 
  D65D    3D             C      	dcr	a		;already selected 
  D65E    21 D9EC        C      	lxi	h,cdisk 
  D661    BE             C      	cmp	m 
  D662    C8             C      	rz 
  D663    C3 D2BD        C      	jmp	ccp_select 
                         C       
  D666                   C      resetdisk: 
                         C      	;return to original disk after command 
  D666    3A D9ED        C      	lda	sdisk		;no action if not selected 
  D669    B7             C      	ora	a 
  D66A    C8             C      	rz 
  D66B    3D             C      	dcr	a		;same disk 
  D66C    21 D9EC        C      	lxi	h,cdisk 
  D66F    BE             C      	cmp	m 
  D670    C8             C      	rz 
  D671    3A D9EC        C      	lda	cdisk 
  D674    C3 D2BD        C      	jmp	ccp_select 
                         C       
                         C      ;individual intrinsics follow 
  D677                   C      direct: 
                         C      	;directory search 
  D677    CD D45E        C      	call	fillfcb0	;comfcb gets file name 
  D67A    CD D654        C      	call	setdisk		;change disk drives if requested 
  D67D    21 D9CB        C      	lxi	h,comfcb+1	;may be empty request 
  D680    7E             C      	mov	a,m 
  D681    FE 20          C      	cpi	' '		;skip fill of ??? if not blank 
  D683    C2 D68F        C      	jnz	dir1 
                         C      	;set comfcb to all ??? for current disk 
  D686    06 0B          C      	mvi	b,11		;length of fill ????????.??? 
  D688    36 3F          C      dir0:	mvi	m,'?' 
  D68A    23             C      	inx	h 
  D68B    05             C      	dcr	b 
  D68C    C2 D688        C      	jnz	dir0 
                         C      	;not a blank request, must be in comfcb 
  D68F    1E 00          C      dir1:	mvi	e,0		;E counts directory entries 
  D691    D5             C      	push	d 
  D692    CD D2E9        C      	call	searchcom	;first one has been found 
  D695    CC D5EA        C      	cz	nofile		;not found message 
  D698    CA D71B        C      dir2:	jz	endir 
                         C      	;found, but may be system file 
  D69B    3A D9EB        C      	lda	ccp_dcnt		;get the location of the element 
  D69E    0F             C      	rrc 
  D69F    0F             C      	rrc 
  D6A0    0F             C      	rrc 
  D6A1    E6 60          C      	ani	1100000b 
  D6A3    4F             C      	mov	c,a 
                         C      	;c contains base index into buff for dir entry 
  D6A4    3E 0A          C      	mvi	a,sysfile	;value to A 
  D6A6    CD D64B        C      	call	addhcf 
  D6A9    17             C      	ral			;skip if system file 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-22


  D6AA    DA D70F        C      	jc	dir6 
                         C      	;c holds index into buffer 
                         C      	;another fcb found, new line? 
  D6AD    D1             C      	pop	d 
  D6AE    7B             C      	mov	a,e 
  D6AF    1C             C      	inr	e 
  D6B0    D5             C      	push	d 
                         C      	;e=0,1,2,3,...new line if mod 4 = 0 
  D6B1    E6 03          C      	ani	11b		;and save the test 
  D6B3    F5             C      	push	psw 
  D6B4    C2 D6CC        C      	jnz	dirhdr0		;header on current line 
  D6B7    CD D298        C      	call	ccp_crlf 
  D6BA    C5             C      	push	b 
  D6BB    CD D3D0        C      	call	cselect 
  D6BE    C1             C      	pop	b 
                         C      	;current disk in A 
  D6BF    C6 41          C      	adi	'A' 
  D6C1    CD D292        C      	call	printbc 
  D6C4    3E 3A          C      	mvi	a,':' 
  D6C6    CD D292        C      	call	printbc 
  D6C9    C3 D6D4        C      	jmp	dirhdr1		;skip current line hdr 
  D6CC                   C      dirhdr0: 
  D6CC    CD D2A2        C      	call	blank		;after last one 
  D6CF    3E 3A          C      	mvi	a,':' 
  D6D1    CD D292        C      	call	printbc 
  D6D4                   C      dirhdr1: 
  D6D4    CD D2A2        C      	call	blank 
                         C      	;compute position of name in buffer 
  D6D7    06 01          C      	mvi	b,1		;start with first character of name 
  D6D9    78             C      dir3:	mov	a,b		;buff+a+c fetched 
  D6DA    CD D64B        C      	call	addhcf 
  D6DD    E6 7F          C      	ani	7fh		;mask flags 
                         C      	;may delete trailing blanks 
  D6DF    FE 20          C      	cpi	' '		;check for blank type 
  D6E1    C2 D6F9        C      	jnz	dir4 
  D6E4    F1             C      	pop	psw		;may be 3rd item 
  D6E5    F5             C      	push	psw 
  D6E6    FE 03          C      	cpi	3		;place blank at end if not 
  D6E8    C2 D6F7        C      	jnz	dirb 
  D6EB    3E 09          C      	mvi	a,9		;first char of type 
  D6ED    CD D64B        C      	call	addhcf 
  D6F0    E6 7F          C      	ani	7fh 
  D6F2    FE 20          C      	cpi	' ' 
  D6F4    CA D70E        C      	jz	dir5 
                         C      	;not a blank in the file type field 
  D6F7    3E 20          C      dirb:	mvi	a,' '		;restore trailing filename chr 
  D6F9                   C      dir4: 
  D6F9    CD D292        C      	call	printbc		;char printed 
  D6FC    04             C      	inr	b 
  D6FD    78             C      	mov	a,b 
  D6FE    FE 0C          C      	cpi	12 
  D700    D2 D70E        C      	jnc	dir5 
                         C      	;check for break between names 
  D703    FE 09          C      	cpi	9		;for another char 
  D705    C2 D6D9        C      	jnz	dir3 
                         C      	;print a blank between names 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-23


  D708    CD D2A2        C      	call	blank 
  D70B    C3 D6D9        C      	jmp	dir3 
                         C       
  D70E                   C      dir5:	;end of current entry 
  D70E    F1             C      	pop	psw		;discard the directory counter (mod 4) 
  D70F    CD D3C2        C      dir6:	call	break_key	;check for interrupt at keyboard 
  D712    C2 D71B        C      	jnz	endir		;abort directory search 
  D715    CD D2E4        C      	call	ccp_searchn		;for another entry 
  D718    C3 D698        C      	jmp	dir2 
  D71B                   C      endir:	;end of directory scan 
  D71B    D1             C      	pop	d		;discard directory counter 
  D71C    C3 D983        C      	jmp	retcom 
                         C       
                         C       
  D71F                   C      erase: 
  D71F    CD D45E        C      	call	fillfcb0	;cannot be all ???'s 
  D722    FE 0B          C      	cpi	11 
  D724    C2 D742        C      	jnz	erasefile 
                         C      	;erasing all of the disk 
  D727    01 D752        C      	lxi	b,ermsg 
  D72A    CD D2A7        C      	call	ccp_print 
  D72D    CD D339        C      	call	readcom 
  D730    21 D207        C      	lxi	h,comlen	;bad input 
  D733    35             C      	dcr	m 
  D734    C2 D582        C      	jnz	ccp 
  D737    23             C      	inx	h 
  D738    7E             C      	mov	a,m 
  D739    FE 59          C      	cpi	'Y' 
  D73B    C2 D582        C      	jnz	ccp 
                         C      	;ok, erase the entire diskette 
  D73E    23             C      	inx	h		;otherwise error at retcom 
  D73F    22 D288        C      	shld	comaddr 
  D742                   C      erasefile: 
  D742    CD D654        C      	call	setdisk 
  D745    11 D9CA        C      	lxi	d,comfcb 
  D748    CD D2EF        C      	call	ccp_delete 
  D74B    3C             C      	inr	a		;255 returned if not found 
  D74C    CC D5EA        C      	cz	nofile		;no file message if so 
  D74F    C3 D983        C      	jmp	retcom 
                         C       
  D752    41 4C 4C 20    C      ermsg:	db	"ALL (Y/N)?",0 
  D756    28 59 2F 4E    C      
  D75A    29 3F 00       C      
                         C       
  D75D                   C      type: 
  D75D    CD D45E        C      	call	fillfcb0	;don't allow ?'s in file name 
  D760    C2 D409        C      	jnz	comerr 
  D763    CD D654        C      	call	setdisk		;open the file 
  D766    CD D2D0        C      	call	openc 
  D769    CA D7A7        C      	jz	typerr		;zero flag indicates not found 
                         C      	;file opened, read 'til eof 
  D76C    CD D298        C      	call	ccp_crlf		;read first buffer 
  D76F    21 D9EE        C      	lxi	h,bptr 
  D772    36 FF          C      	mvi	m,255 
  D774                   C      type0:	;loop on bptr 
  D774    21 D9EE        C      	lxi	h,bptr		;end buffer 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-24


  D777    7E             C      	mov	a,m 
  D778    FE 80          C      	cpi	128 
  D77A    DA D787        C      	jc	type1		;carry if 0,1,...,127 
  D77D    E5             C      	push	h 
                         C      	;read another buffer full 
  D77E    CD D2FE        C      	call	diskreadc 
  D781    E1             C      	pop	h		;recover address of bptr 
  D782    C2 D7A0        C      	jnz	typeof		;hard end of file 
  D785    AF             C      	xra	a		;bptr = 0 
  D786    77             C      	mov	m,a 
  D787                   C      type1:	;read character at bptr and print 
  D787    34             C      	inr	m		;bptr = bptr + 1 
  D788    21 0080        C      	lxi	h,buff		;h,l addresses char 
  D78B    CD D459        C      	call	ccp_addh 
  D78E    7E             C      	mov	a,m 
  D78F    FE 1A          C      	cpi	eofile 
  D791    CA D983        C      	jz	retcom 
  D794    CD D28C        C      	call	printchar 
  D797    CD D3C2        C      	call	break_key	;abort if break 
  D79A    C2 D983        C      	jnz	retcom 
  D79D    C3 D774        C      	jmp	type0 ;for another character 
                         C       
  D7A0                   C      typeof:	;end of file, check for errors 
  D7A0    3D             C      	dcr	a 
  D7A1    CA D983        C      	jz	retcom 
  D7A4    CD D5D9        C      	call	readerr 
  D7A7    CD D666        C      typerr:	call	resetdisk 
  D7AA    C3 D409        C      	jmp	comerr 
                         C       
  D7AD                   C      save: 
  D7AD    CD D5F8        C      	call	getnumber	; value to register a 
  D7B0    F5             C      	push	psw		;save it for later 
                         C       
                         C      	;should be followed by a file to save the memory image 
  D7B1    CD D45E        C      	call	fillfcb0 
  D7B4    C2 D409        C      	jnz	comerr		;cannot be ambiguous 
  D7B7    CD D654        C      	call	setdisk		;may be a disk change 
  D7BA    11 D9CA        C      	lxi	d,comfcb	;existing file removed 
  D7BD    D5             C      	push	d 
  D7BE    CD D2EF        C      	call	ccp_delete 
  D7C1    D1             C      	pop	d 
  D7C2    CD D309        C      	call	ccp_make		;create a new file on disk 
  D7C5    CA D7FB        C      	jz	saverr		;no directory space 
  D7C8    AF             C      	xra	a		;clear next record field 
  D7C9    32 D9EA        C      	sta	comrec 
  D7CC    F1             C      	pop	psw		;#pages to write is in a, change to #sectors 
  D7CD    6F             C      	mov	l,a 
  D7CE    26 00          C      	mvi	h,0 
  D7D0    29             C      	dad	h  
  D7D1    11 0100        C      	lxi	d,tran		;h,l is sector count, d,e is load address 
  D7D4                   C      save0:	;check for sector count zero 
  D7D4    7C             C      	mov	a,h		;may be completed 
  D7D5    B5             C      	ora	l 
  D7D6    CA D7F1        C      	jz	save1 
  D7D9    2B             C      	dcx	h		;sector count = sector count - 1 
  D7DA    E5             C      	push	h		;save it for next time around 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-25


  D7DB    21 0080        C      	lxi	h,128		;next dma address saved 
  D7DE    19             C      	dad	d 
  D7DF    E5             C      	push	h 
  D7E0    CD D3D8        C      	call	ccp_setdma		;current dma address set 
  D7E3    11 D9CA        C      	lxi	d,comfcb 
  D7E6    CD D304        C      	call	ccp_diskwrite 
  D7E9    D1             C      	pop	d		;dma address, sector count 
  D7EA    E1             C      	pop	h 
  D7EB    C2 D7FB        C      	jnz	saverr		;may be disk full case 
  D7EE    C3 D7D4        C      	jmp	save0		;for another sector 
                         C       
  D7F1                   C      save1:	;end of dump, close the file 
  D7F1    11 D9CA        C      	lxi	d,comfcb 
  D7F4    CD D2DA        C      	call	ccp_close 
  D7F7    3C             C      	inr	a		;255 becomes 00 if error 
  D7F8    C2 D801        C      	jnz	retsave		;for another command 
  D7FB                   C      saverr:	;must be full or read only disk 
  D7FB    01 D807        C      	lxi	b,fullmsg 
  D7FE    CD D2A7        C      	call	ccp_print 
  D801                   C      retsave: 
                         C      	;reset dma buffer 
  D801    CD D3D5        C      	call	setdmabuff 
  D804    C3 D983        C      	jmp	retcom 
  D807                   C      fullmsg: 
  D807    4E 4F 20 53    C      	db "NO SPACE",0 
  D80B    50 41 43 45    C      
  D80F    00             C      
                         C       
                         C       
  D810                   C      ccp_rename: 
                         C      	;rename a file on a specific disk 
  D810    CD D45E        C      	call	fillfcb0	;must be unambiguous 
  D813    C2 D409        C      	jnz	comerr 
  D816    3A D9ED        C      	lda	sdisk		;save for later compare 
  D819    F5             C      	push	psw 
  D81A    CD D654        C      	call	setdisk		;disk selected 
  D81D    CD D2E9        C      	call	searchcom	;is new name already there? 
  D820    C2 D879        C      	jnz	renerr3 
                         C      	;file doesn't exist, move to second half of fcb 
  D823    21 D9CA        C      	lxi	h,comfcb 
  D826    11 D9DA        C      	lxi	d,comfcb+16 
  D829    06 10          C      	mvi	b,16 
  D82B    CD D642        C      	call	move0 
                         C      	;check for = or left arrow 
  D82E    2A D288        C      	lhld	comaddr 
  D831    EB             C      	xchg 
  D832    CD D44F        C      	call	deblank 
  D835    FE 3D          C      	cpi	'='		;ok if = 
  D837    CA D83F        C      	jz	ren1 
  D83A    FE 5F          C      	cpi	la 
  D83C    C2 D873        C      	jnz	renerr2 
  D83F    EB             C      ren1:	xchg			;past delimiter 
  D840    23             C      	inx	h 
  D841    22 D288        C      	shld	comaddr 
                         C      	;proper delimiter found 
  D844    CD D45E        C      	call	fillfcb0 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-26


  D847    C2 D873        C      	jnz	renerr2 
                         C      	;check for drive conflict 
  D84A    F1             C      	pop	psw		;previous drive number 
  D84B    47             C      	mov	b,a 
  D84C    21 D9ED        C      	lxi	h,sdisk 
  D84F    7E             C      	mov	a,m 
  D850    B7             C      	ora	a 
  D851    CA D859        C      	jz	ren2 
                         C      	;drive name was specified.  same one? 
  D854    B8             C      	cmp	b 
  D855    70             C      	mov	m,b 
  D856    C2 D873        C      	jnz	renerr2 
  D859    70             C      ren2:	mov	m,b		;store the name in case drives switched 
  D85A    AF             C      	xra	a		;is old file there? 
  D85B    32 D9CA        C      	sta	comfcb 
  D85E    CD D2E9        C      	call	searchcom 
  D861    CA D86D        C      	jz	renerr1 
                         C       
                         C      	;everything is ok, rename the file 
  D864    11 D9CA        C      	lxi	d,comfcb 
  D867    CD D30E        C      	call	renam 
  D86A    C3 D983        C      	jmp	retcom 
                         C       
  D86D                   C      renerr1:; no file on disk 
  D86D    CD D5EA        C      	call	nofile 
  D870    C3 D983        C      	jmp	retcom 
  D873                   C      renerr2:; ambigous reference/name conflict 
  D873    CD D666        C      	call	resetdisk 
  D876    C3 D409        C      	jmp	comerr 
  D879                   C      renerr3:; file already exists 
  D879    01 D882        C      	lxi	b,renmsg 
  D87C    CD D2A7        C      	call	ccp_print 
  D87F    C3 D983        C      	jmp	retcom 
  D882    46 49 4C 45    C      renmsg:	db "FILE EXISTS",0 
  D886    20 45 58 49    C      
  D88A    53 54 53 00    C      
                         C       
  D88E                   C      user: 
                         C      	;set user number 
  D88E    CD D5F8        C      	call	getnumber	; leaves the value in the accumulator 
  D891    FE 10          C      	cpi	16		; must be between 0 and 15 
  D893    D2 D409        C      	jnc	comerr 
  D896    5F             C      	mov	e,a		;save for setuser call 
  D897    3A D9CB        C      	lda	comfcb+1 
  D89A    FE 20          C      	cpi	' ' 
  D89C    CA D409        C      	jz	comerr 
  D89F    CD D315        C      	call	setuser		;new user number set 
  D8A2    C3 D986        C      	jmp	endcom 
                         C       
  D8A5                   C      userfunc: 
                         C      	ifndef	noserialize 
                         C      	call	serialize	;check serialization 
                         C      	endif 
                         C      	;load user function and set up for execution 
  D8A5    3A D9CB        C      	lda	comfcb+1 
  D8A8    FE 20          C      	cpi	' ' 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-27


  D8AA    C2 D8C1        C      	jnz	user0 
                         C      	;no file name, but may be disk switch 
  D8AD    3A D9ED        C      	lda	sdisk		;no disk name if 0 
  D8B0    B7             C      	ora	a 
  D8B1    CA D986        C      	jz	endcom 
  D8B4    3D             C      	dcr	a		;set user/disk 
  D8B5    32 D9EC        C      	sta	cdisk 
  D8B8    CD D329        C      	call	setdiska 
  D8BB    CD D2BD        C      	call	ccp_select 
  D8BE    C3 D986        C      	jmp	endcom 
  D8C1                   C      user0:	;file name is present 
  D8C1    11 D9D3        C      	lxi	d,comfcb+9	;type ' ' 
  D8C4    1A             C      	ldax	d 
  D8C5    FE 20          C      	cpi	' ' 
  D8C7    C2 D409        C      	jnz	comerr 
  D8CA    D5             C      	push	d		;.com 
  D8CB    CD D654        C      	call	setdisk 
  D8CE    D1             C      	pop	d 
  D8CF    21 D980        C      	lxi	h,comtype 
  D8D2    CD D640        C      	call	movename	;file type is set to .com 
  D8D5    CD D2D0        C      	call	openc 
  D8D8    CA D968        C      	jz	userer 
                         C      	;file opened properly, read it into memory 
  D8DB    21 0100        C      	lxi	h,tran		;transient program base 
  D8DE    E5             C      load0:	push	h		;save dma address 
  D8DF    EB             C      	xchg 
  D8E0    CD D3D8        C      	call	ccp_setdma 
  D8E3    11 D9CA        C      	lxi	d,comfcb 
  D8E6    CD D2F9        C      	call	ccp_diskread 
  D8E9    C2 D8FE        C      	jnz	load1 
                         C      	;sector loaded, set new dma address and compare 
  D8EC    E1             C      	pop	h 
  D8ED    11 0080        C      	lxi	d,128 
  D8F0    19             C      	dad	d 
  D8F1    11 D200        C      	lxi	d,tranm		;has the load overflowed? 
  D8F4    7D             C      	mov	a,l 
  D8F5    93             C      	sub	e 
  D8F6    7C             C      	mov	a,h 
  D8F7    9A             C      	sbb	d 
  D8F8    D2 D96E        C      	jnc	loaderr 
  D8FB    C3 D8DE        C      	jmp	load0		;for another sector 
                         C       
  D8FE    E1             C      load1:	pop	h		;end file is 1 
  D8FF    3D             C      	dcr	a 
  D900    C2 D96E        C      	jnz	loaderr 
  D903    CD D666        C      	call	resetdisk	;back to original disk 
  D906    CD D45E        C      	call	fillfcb0 
  D909    21 D9ED        C      	lxi	h,sdisk 
  D90C    E5             C      	push	h 
  D90D    7E             C      	mov	a,m		;drive number set 
  D90E    32 D9CA        C      	sta	comfcb 
  D911    3E 10          C      	mvi	a,16		;move entire fcb to memory 
  D913    CD D460        C      	call	fillfcb 
  D916    E1             C      	pop	h 
  D917    7E             C      	mov	a,m 
  D918    32 D9DA        C      	sta	comfcb+16 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-28


  D91B    AF             C      	xra	a		;record number set to zero 
  D91C    32 D9EA        C      	sta	comrec 
  D91F    11 005C        C      	lxi	d,fcb 
  D922    21 D9CA        C      	lxi	h,comfcb 
  D925    06 21          C      	mvi	b,33 
  D927    CD D642        C      	call	move0 
                         C      	;move command line to buff 
  D92A    21 D208        C      	lxi	h,combuf 
  D92D    7E             C      bmove0:	mov	a,m 
  D92E    B7             C      	ora	a 
  D92F    CA D93B        C      	jz	bmove1 
  D932    FE 20          C      	cpi	' ' 
  D934    CA D93B        C      	jz	bmove1 
  D937    23             C      	inx	h		;for another scan 
  D938    C3 D92D        C      	jmp	bmove0 
                         C      	;first blank position found 
  D93B    06 00          C      bmove1:	mvi	b,0		;ready for the move 
  D93D    11 0081        C      	lxi	d,buff+1 
  D940    7E             C      bmove2:	mov	a,m 
  D941    12             C      	stax	d 
  D942    B7             C      	ora	a 
  D943    CA D94C        C      	jz	bmove3 
                         C      	;more to move 
  D946    04             C      	inr	b 
  D947    23             C      	inx	h 
  D948    13             C      	inx	d 
  D949    C3 D940        C      	jmp	bmove2 
  D94C                   C      bmove3:	;b has character count 
  D94C    78             C      	mov	a,b 
  D94D    32 0080        C      	sta	buff 
  D950    CD D298        C      	call	ccp_crlf 
                         C      	;now go to the loaded program 
  D953    CD D3D5        C      	call	setdmabuff	;default dma 
  D956    CD D31A        C      	call	saveuser	;user code saved 
                         C      	;low memory diska contains user code 
  D959    CD 0100        C      	call	tran		;gone to the loaded program 
  D95C    31 D9A8        C      	lxi	sp,stack	;may come back here 
  D95F    CD D329        C      	call	setdiska 
  D962    CD D2BD        C      	call	ccp_select 
  D965    C3 D582        C      	jmp	ccp 
                         C       
  D968                   C      userer:	;arrive here on command error 
  D968    CD D666        C      	call	resetdisk 
  D96B    C3 D409        C      	jmp	comerr 
                         C       
  D96E                   C      loaderr:;cannot load the program 
  D96E    01 D977        C      	lxi	b,loadmsg 
  D971    CD D2A7        C      	call	ccp_print 
  D974    C3 D983        C      	jmp	retcom 
  D977                   C      loadmsg: 
  D977    42 41 44 20    C      	db "BAD LOAD",0 
  D97B    4C 4F 41 44    C      
  D97F    00             C      
  D980                   C      comtype: 
  D980    43 4F 4D       C      	db "COM"		;for com files 
                         C       
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-29


                         C       
  D983                   C      retcom:	;reset disk before end of command check 
  D983    CD D666        C      	call	resetdisk 
                         C       
  D986                   C      endcom:	;end of intrinsic command 
  D986    CD D45E        C      	call	fillfcb0	;to check for garbage at end of line 
  D989    3A D9CB        C      	lda	comfcb+1 
  D98C    D6 20          C      	sui	' ' 
  D98E    21 D9ED        C      	lxi	h,sdisk 
  D991    B6             C      	ora	m 
                         C      	;0 in accumulator if no disk selected, and blank fcb 
  D992    C2 D409        C      	jnz	comerr 
  D995    C3 D582        C      	jmp	ccp 
                         C       
                         C       
                         C       
                         C      ;	data areas 
  D998                   C      	ds	16	;8 level stack 
  D9A8                   C      stack: 
                         C       
                         C      ;	'submit' file control block 
  D9A8    00             C      submit:	db	0	;00 if no submit file, ff if submitting 
  D9A9    00 24 24 24    C      subfcb:	db	0,"$$$     "	;file name is $$$ 
  D9AD    20 20 20 20    C      
  D9B1    20             C      
  D9B2    53 55 42 00    C      	db	"SUB",0,0	;file type is sub 
  D9B6    00             C      
  D9B7    00             C      submod:	db	0	;module number 
  D9B8                   C      subrc:	ds	1	;record count filed 
  D9B9                   C      	ds	16	;disk map 
  D9C9                   C      subcr:	ds	1	;current record to read 
                         C       
                         C      ;	command file control block 
  D9CA                   C      comfcb:	ds	32	;fields filled in later 
  D9EA                   C      comrec:	ds	1	;current record to read/write 
  D9EB                   C      ccp_dcnt:	ds	1	;disk directory count (used for error codes) 
  D9EC                   C      cdisk:	ds	1	;current disk 
  D9ED                   C      sdisk:	ds	1	;selected disk for current operation 
                         C      			;none=0, a=1, b=2 ... 
  D9EE                   C      bptr:	ds	1	;buffer pointer 
                         C      	;end	ccploc 
  07EF                   C      C_SIZE	equ	$-C_BASE 
                         C      include BDOS.ASM 
                         C      ; Reformatted and converted for cross-assembly by Macro Assembler AS 
                         C      ; Eric Smith <spacewar@gmail.com> 2018-01-24 
                         C      ; from original source os3bdos.asm from 
                         C      ;   http://www.cpm.z80.de/download/cpm2-plm.zip 
                         C      ; includes Digital Research CP/M V2.2 Patch 01 (cpm22pat.01) from 
                         C      ;   http://www.cpm.z80.de/download/cpm22pat.zip 
                         C       
                         C      ; Changes: 
                         C      ;   multiple instructions per line split to separate lines 
                         C      ;   dollar sign in labels replaced by underscore 
                         C      ;   dollar sign (as digit separator) in binary constants removed 
                         C      ;   no colons for labels for equates 
                         C      ;   single quotes around strings replaced with double quotes 
"console command processor (CCP), ver 2.0" 	MACRO-80 3.44	09-Dec-81	PAGE	1-30


                         C      ;   true and false replaced with _true and _false 
                         C      ;   eliminated equates for 8080 registers, added comments introduced with % 
                         C      ;   replaced "not", "and" operators with "~", "&" 
                         C      ;   removed empty comments 
                         C      ;   added ifdef origin to allow origin to be specified from command line 
                         C      ;   added commments about serial number 
                         C       
                         C      	.8080;.cpu	8080 
                         C       
  0001                   C      patch1	equ	1 
                         C       
                         C       
                         C      	title	"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C      ;**                                                             ** 
                         C      ;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    ** 
                         C      ;**            I n t e r f a c e   M o d u l e                   ** 
                         C      ;**                                                             ** 
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C      ; 
                         C      ;	Copyright (c) 1978, 1979, 1980 
                         C      ;	Digital Research 
                         C      ;	Box 579, Pacific Grove 
                         C      ;	California 
                         C      ; 
                         C      ; 
                         C      ;      20 january 1980 
                         C      ; 
                         C      ; 
  FFFF                   C      on	equ	0ffffh 
  0000                   C      off	equ	00000h 
  0000                   C      test	equ	off 
                         C       
                         C      	ifdef	origin 
                         C      	org	origin 
                         C      	else 
                         C      	if	test 
                         C      	org	0dc00h 
                         C      	else 
                         C      	;org	0800h 
                         C      	endif 
                         C      	endif 
                         C      ;	bios value defined at end of module 
                         C       
  DA00                   C      bdos_start	equ	($ AND 0ff00h)+100h 
  D9EF                   C      	DS	bdos_start-$ 
  DA00                   C      D_BASE: 
  0018                   C      ssize	equ	24		;24 level stack 
                         C       
                         C      ;	low memory locations 
  0000                   C      reboot	equ	0000h		;reboot system 
  0003                   C      ioloc	equ	0003h		;i/o byte location 
  0006                   C      bdosa	equ	0006h		;address field of jmp BDOS 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-31


                         C      ;	bios access constants 
  E800                   C      bootf	set	bios+3*0	;cold boot function 
  E803                   C      wbootf	set	bios+3*1	;warm boot function 
  E806                   C      constf	set	bios+3*2	;console status function 
  E809                   C      coninf	set	bios+3*3	;console input function 
  E80C                   C      conoutf	set	bios+3*4	;console output function 
  E80F                   C      listf	set	bios+3*5	;list output function 
  E812                   C      punchf	set	bios+3*6	;punch output function 
  E815                   C      readerf	set	bios+3*7	;reader input function 
  E818                   C      homef	set	bios+3*8	;disk home function 
  E81B                   C      seldskf	set	bios+3*9	;select disk function 
  E81E                   C      settrkf	set	bios+3*10	;set track function 
  E821                   C      setsecf	set	bios+3*11	;set sector function 
  E824                   C      setdmaf	set	bios+3*12	;set dma function 
  E827                   C      readf	set	bios+3*13	;read disk function 
  E82A                   C      writef	set	bios+3*14	;write disk function 
  E82D                   C      liststf	set	bios+3*15	;list status function 
  E830                   C      sectran	set	bios+3*16	;sector translate 
                         C       
                         C      ;	equates for non graphic characters 
  0003                   C      ctlc	equ	03h	;control c 
  0005                   C      ctle	equ	05h	;physical eol 
  0008                   C      ctlh	equ	08h	;backspace 
  0010                   C      ctlp	equ	10h	;prnt toggle 
  0012                   C      ctlr	equ	12h	;repeat line 
  0013                   C      ctls	equ	13h	;stop/start screen 
  0015                   C      ctlu	equ	15h	;line delete 
  0018                   C      ctlx	equ	18h	;=ctl-u 
  001A                   C      ctlz	equ	1ah	;end of file 
  007F                   C      rubout	equ	7fh	;char delete 
  0009                   C      tab	equ	09h	;tab char 
  000D                   C      cr	equ	0dh	;carriage return 
  000A                   C      lf	equ	0ah	;line feed 
  005E                   C      ctl	equ	5eh	;up arrow 
                         C       
                         C      ; serial number (not documented in original DRI source file) 
  DA00    00             C      	db	0	; OEM number, low byte 
  DA01    00             C      	db	0	; CP/M version, 16h = 2.2 
  DA02    00             C      	db	0	; OEM number, high byte 
  DA03    00 00 00       C      	db	0,0,0	; serial number, big-endian 
                         C       
                         C      ;	enter here from the user's program with function number in c, 
                         C      ;	and information address in d,e 
  DA06    C3 DA11        C      	jmp	bdose	;past parameter block 
                         C       
                         C      ;	************************************************ 
                         C      ;	*** relative locations 0009 - 000e           *** 
                         C      ;	************************************************ 
  DA09    DA99           C      pererr:	dw	persub	;permanent error subroutine 
  DA0B    DAA5           C      selerr:	dw	selsub	;select error subroutine 
  DA0D    DAAB           C      roderr:	dw	rodsub	;ro disk error subroutine 
  DA0F    DAB1           C      roferr:	dw	rofsub	;ro file error subroutine 
                         C       
                         C       
  DA11                   C      bdose:				;arrive here from user programs 
  DA11    EB             C      	xchg			;info=DE, DE=info 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-32


  DA12    22 DD43        C      	shld	info 
  DA15    EB             C      	xchg 
  DA16    7B             C      	mov	a,e		;linfo = low(info) - don't equ 
  DA17    32 E7D6        C      	sta	linfo 
  DA1A    21 0000        C      	lxi	h,0		;return value defaults to 0000 
  DA1D    22 DD45        C      	shld	aret 
                         C      	;save user's stack pointer, set to local stack 
  DA20    39             C      	dad	sp		;entsp = stackptr 
  DA21    22 DD0F        C      	shld	entsp 
  DA24    31 DD41        C      	lxi	sp,lstack	;local stack setup 
  DA27    AF             C      	xra	a		;fcbdsk,resel=false 
  DA28    32 E7E0        C      	sta	fcbdsk 
  DA2B    32 E7DE        C      	sta	resel 
  DA2E    21 E774        C      	lxi	h,goback	;return here after all functions 
  DA31    E5             C      	push	h		;jmp goback equivalent to ret 
  DA32    79             C      	mov	a,c		;skip if invalid # 
  DA33    FE 29          C      	cpi	nfuncs 
  DA35    D0             C      	rnc 
  DA36    4B             C      	mov	c,e		;possible output character to C 
  DA37    21 DA47        C      	lxi	h,functab	;DE=func, HL=.ciotab 
  DA3A    5F             C      	mov	e,a 
  DA3B    16 00          C      	mvi	d,0 
  DA3D    19             C      	dad	d		;DE=functab(func) 
  DA3E    19             C      	dad	d 
  DA3F    5E             C      	mov	e,m 
  DA40    23             C      	inx	h 
  DA41    56             C      	mov	d,m 
  DA42    2A DD43        C      	lhld	info		;info in DE for later xchg	 
  DA45    EB             C      	xchg			;dispatched 
  DA46    E9             C      	pchl 
                         C       
                         C      ;	dispatch table for functions 
  DA47                   C      functab: 
  DA47    E803 DCC8      C      	dw	wbootf, func1, func2, func3 
  DA4B    DB90 DCCE      C      
  DA4F    E812 E80F      C      	dw	punchf, listf, func6, func7 
  DA53    DCD4 DCED      C      
  DA57    DCF3 DCF8      C      	dw	func8, func9, func10,func11 
  DA5B    DBE1 DCFE      C      
  000C                   C      diskf	equ	($-functab)/2	;disk funcs 
  DA5F    E67E E683      C      	dw	func12,func13,func14,func15 
  DA63    E645 E69C      C      
  DA67    E6A5 E6AB      C      	dw	func16,func17,func18,func19 
  DA6B    E6C8 E6D7      C      
  DA6F    E6E0 E6E6      C      	dw	func20,func21,func22,func23 
  DA73    E6EC E6F5      C      
  DA77    E6FE E704      C      	dw	func24,func25,func26,func27 
  DA7B    E70A E711      C      
  DA7F    DF2C E717      C      	dw	func28,func29,func30,func31 
  DA83    E71D E726      C      
  DA87    E72D E741      C      	dw	func32,func33,func34,func35 
  DA8B    E747 E74D      C      
  DA8F    E60E E753      C      	dw	func36,func37,func38,func39 
  DA93    DD04 DD04      C      
  DA97    E79B           C      	dw	func40 
  0029                   C      nfuncs	equ	($-functab)/2 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-33


                         C       
                         C       
                         C      ;	error subroutines 
  DA99                   C      persub:	;report permanent error 
  DA99    21 DACA        C      	lxi	h,permsg	;to report the error 
  DA9C    CD DAE5        C      	call	errflg 
  DA9F    FE 03          C      	cpi	ctlc		;reboot if response is ctlc 
  DAA1    CA 0000        C      	jz	reboot 
  DAA4    C9             C      	ret			;and ignore the error 
                         C       
  DAA5                   C      selsub:	;report select error 
  DAA5    21 DAD5        C      	lxi	h,selmsg	;wait console before boot 
  DAA8    C3 DAB4        C      	jmp	wait_err 
                         C      ; 
  DAAB                   C      rodsub:	;report write to read/only disk 
  DAAB    21 DAE1        C      	lxi	h,rodmsg	;wait console 
  DAAE    C3 DAB4        C      	jmp	wait_err 
                         C      ; 
  DAB1                   C      rofsub:	;report read/only file 
  DAB1    21 DADC        C      	lxi	h,rofmsg	;drop through to wait for console 
                         C      ; 
  DAB4                   C      wait_err: 
                         C      	;wait for response before boot 
  DAB4    CD DAE5        C      	call	errflg 
  DAB7    C3 0000        C      	jmp	reboot 
                         C       
                         C      ;	error messages 
  DABA    42 64 6F 73    C      dskmsg:	db	"Bdos Err On " 
  DABE    20 45 72 72    C      
  DAC2    20 4F 6E 20    C      
  DAC6    20 3A 20 24    C      dskerr:	db	" : $"	;filled in by errflg 
  DACA    42 61 64 20    C      permsg:	db	"Bad Sector$" 
  DACE    53 65 63 74    C      
  DAD2    6F 72 24       C      
  DAD5    53 65 6C 65    C      selmsg:	db	"Select$" 
  DAD9    63 74 24       C      
  DADC    46 69 6C 65    C      rofmsg:	db	"File " 
  DAE0    20             C      
  DAE1    52 2F 4F 24    C      rodmsg:	db	"R/O$" 
                         C       
                         C       
  DAE5                   C      errflg: 
                         C      	;report error to console, message address in HL 
  DAE5    E5             C      	push	h		;stack mssg address, new line 
  DAE6    CD DBC9        C      	call	crlf 
  DAE9    3A DD42        C      	lda	curdsk		;current disk name 
  DAEC    C6 41          C      	adi	'A' 
  DAEE    32 DAC6        C      	sta	dskerr 
  DAF1    01 DABA        C      	lxi	b,dskmsg	;the error message 
  DAF4    CD DBD3        C      	call	print 
  DAF7    C1             C      	pop	b		;error mssage tail 
  DAF8    CD DBD3        C      	call	print 
                         C      	;jmp	_conin		;to get the input character			 
                         C      	;(drop through to _conin) 
                         C      	;ret 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-34


                         C       
                         C      ;	console handlers 
  DAFB                   C      _conin: 
                         C      	;read console character to A 
  DAFB    21 DD0E        C      	lxi	h,kbchar 
  DAFE    7E             C      	mov	a,m 
  DAFF    36 00          C      	mvi	m,0 
  DB01    B7             C      	ora	a 
  DB02    C0             C      	rnz 
                         C      	;no previous keyboard character ready 
  DB03    C3 E809        C      	jmp	coninf		;get character externally 
                         C      	;ret 
                         C       
  DB06                   C      conech: 
                         C      	;read character with echo 
  DB06    CD DAFB        C      	call	_conin		;echo character? 
  DB09    CD DB14        C      	call	echoc 
  DB0C    D8             C      	rc  
                         C              ;character must be echoed before return 
  DB0D    F5             C      	push	psw 
  DB0E    4F             C      	mov	c,a 
  DB0F    CD DB90        C      	call	tabout 
  DB12    F1             C      	pop	psw 
  DB13    C9             C      	ret			;with character in A 
                         C       
  DB14                   C      echoc: 
                         C      	;echo character if graphic 
                         C      	;cr, lf, tab, or backspace 
  DB14    FE 0D          C      	cpi	cr		;carriage return? 
  DB16    C8             C      	rz 
  DB17    FE 0A          C      	cpi	lf		;line feed? 
  DB19    C8             C      	rz 
  DB1A    FE 09          C      	cpi	tab		;tab? 
  DB1C    C8             C      	rz 
  DB1D    FE 08          C      	cpi	ctlh		;backspace? 
  DB1F    C8             C      	rz 
  DB20    FE 20          C      	cpi	' '		;carry set if not graphic 
  DB22    C9             C      	ret  
                         C       
  DB23                   C      conbrk:	;check for character ready 
  DB23    3A DD0E        C      	lda	kbchar		;skip if active kbchar 
  DB26    B7             C      	ora	a 
  DB27    C2 DB45        C      	jnz	conb1 
                         C      	;no active kbchar, check external break 
  DB2A    CD E806        C      	call	constf		;return if no char ready 
  DB2D    E6 01          C      	ani	1 
  DB2F    C8             C      	rz 
                         C      	;character ready, read it 
  DB30    CD E809        C      	call	coninf		;to A 
  DB33    FE 13          C      	cpi	ctls		;check stop screen function 
  DB35    C2 DB42        C      	jnz	conb0 
                         C      	;found ctls, read next character 
  DB38    CD E809        C      	call	coninf		;to A 
  DB3B    FE 03          C      	cpi	ctlc		;ctlc implies re-boot 
  DB3D    CA 0000        C      	jz	reboot 
                         C      	;not a reboot, act as if nothing has happened 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-35


  DB40    AF             C      	xra a			;with zero in accumulator 
  DB41    C9             C      	ret 
  DB42                   C      conb0:	;character in accum, save it 
  DB42    32 DD0E        C      	sta	kbchar 
  DB45                   C      conb1:	;return with true set in accumulator 
  DB45    3E 01          C      	mvi	a,1 
  DB47    C9             C      	ret 
                         C       
  DB48                   C      _conout: 
                         C      	;compute character position/write console char from C 
                         C      	;compcol = true if computing column position 
  DB48    3A DD0A        C      	lda	compcol 
  DB4B    B7             C      	ora	a 
  DB4C    C2 DB62        C      	jnz	compout 
                         C      	;write the character, then compute the column 
                         C      	;write console character from C 
  DB4F    C5             C      	push	b		;check for screen stop function 
  DB50    CD DB23        C      	call	conbrk 
  DB53    C1             C      	pop	b		;recall/save character 
  DB54    C5             C      	push	b 
  DB55    CD E80C        C      	call	conoutf		;externally, to console 
  DB58    C1             C      	pop	b		;recall/save character 
  DB59    C5             C      	push	b 
                         C      	;may be copying to the list device 
  DB5A    3A DD0D        C      	lda	listcp		;to printer, if so 
  DB5D    B7             C      	ora	a 
  DB5E    C4 E80F        C      	cnz	listf 
  DB61    C1             C      	pop	b		;recall the character 
  DB62                   C      compout: 
  DB62    79             C      	mov	a,c		;recall the character 
                         C      	;and compute column position 
  DB63    21 DD0C        C      	lxi	h,column	;A = char, HL = .column 
  DB66    FE 7F          C      	cpi	rubout		;no column change if nulls 
  DB68    C8             C      	rz 
  DB69    34             C      	inr	m		;column = column + 1 
  DB6A    FE 20          C      	cpi	' '		;return if graphic 
  DB6C    D0             C      	rnc 
                         C      	;not graphic, reset column position 
  DB6D    35             C      	dcr	m		;column = column - 1 
  DB6E    7E             C      	mov	a,m		;return if at zero 
  DB6F    B7             C      	ora	a 
  DB70    C8             C      	rz 
                         C      	;not at zero, may be backspace or end line 
  DB71    79             C      	mov	a,c		;character back to A 
  DB72    FE 08          C      	cpi	ctlh 
  DB74    C2 DB79        C      	jnz	notbacksp 
                         C      	;backspace character 
  DB77    35             C      	dcr	m		;column = column - 1 
  DB78    C9             C      	ret 
  DB79                   C      notbacksp: 
                         C      	;not a backspace character, eol? 
  DB79    FE 0A          C      	cpi	lf		;return if not 
  DB7B    C0             C      	rnz 
                         C      	;end of line, column = 0 
  DB7C    36 00          C      	mvi	m,0		;column = 0 
  DB7E    C9             C      	ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-36


                         C       
  DB7F                   C      ctlout: 
                         C      	;send C character with possible preceding up-arrow 
  DB7F    79             C      	mov	a,c		;cy if not graphic (or special case) 
  DB80    CD DB14        C      	call	echoc 
  DB83    D2 DB90        C      	jnc	tabout		;skip if graphic, tab, cr, lf, or ctlh 
                         C      	;send preceding up arrow 
  DB86    F5             C      	push	psw		;up arrow 
  DB87    0E 5E          C      	mvi	c,ctl 
  DB89    CD DB48        C      	call	_conout 
  DB8C    F1             C      	pop	psw		;becomes graphic letter 
  DB8D    F6 40          C      	ori	40h 
  DB8F    4F             C      	mov	c,a		;ready to print 
                         C      	;(drop through to tabout) 
                         C       
  DB90                   C      tabout: 
                         C      	;expand tabs to console 
  DB90    79             C      	mov	a,c		;direct to _conout if not 
  DB91    FE 09          C      	cpi	tab 
  DB93    C2 DB48        C      	jnz	_conout 
                         C      	;tab encountered, move to next tab position 
  DB96                   C      tab0: 
  DB96    0E 20          C      	mvi	c,' '		;another blank 
  DB98    CD DB48        C      	call	_conout 
  DB9B    3A DD0C        C      	lda	column		;column mod 8 = 0 ? 
  DB9E    E6 07          C      	ani	111b 
  DBA0    C2 DB96        C      	jnz	tab0		;back for another if not 
  DBA3    C9             C      	ret 
                         C       
                         C       
  DBA4                   C      backup: 
                         C      	;back-up one screen position 
  DBA4    CD DBAC        C      	call	pctlh 
  DBA7    0E 20          C      	mvi	c,' ' 
  DBA9    CD E80C        C      	call	conoutf 
                         C      ;	(drop through to pctlh) 
  DBAC                   C      pctlh: 
                         C      	;send ctlh to console without affecting column count 
  DBAC    0E 08          C      	mvi	c,ctlh 
  DBAE    C3 E80C        C      	jmp	conoutf 
                         C      	;ret 
                         C       
  DBB1                   C      crlfp: 
                         C      	;print #, cr, lf for ctlx, ctlu, ctlr functions 
                         C      	;then move to strtcol (starting column) 
  DBB1    0E 23          C      	mvi	c,'#' 
  DBB3    CD DB48        C      	call	_conout 
  DBB6    CD DBC9        C      	call	crlf 
                         C      	;column = 0, move to position strtcol 
  DBB9                   C      crlfp0: 
  DBB9    3A DD0C        C      	lda	column 
  DBBC    21 DD0B        C      	lxi	h,strtcol 
  DBBF    BE             C      	cmp	m		;stop when column reaches strtcol 
  DBC0    D0             C      	rnc 
  DBC1    0E 20          C      	mvi	c,' '		;print blank 
  DBC3    CD DB48        C      	call	_conout  
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-37


  DBC6    C3 DBB9        C      	jmp	crlfp0 
                         C       
                         C       
  DBC9                   C      crlf: 
                         C      	;carriage return line feed sequence 
  DBC9    0E 0D          C      	mvi	c,cr 
  DBCB    CD DB48        C      	call	_conout 
  DBCE    0E 0A          C      	mvi	c,lf 
  DBD0    C3 DB48        C      	jmp	_conout 
                         C      	;ret 
                         C       
  DBD3                   C      print: 
                         C      	;print message until M(BC) = '$' 
  DBD3    0A             C      	ldax	b		;stop on $ 
  DBD4    FE 24          C      	cpi	'$' 
  DBD6    C8             C      	rz 
                         C      	;more to print 
  DBD7    03             C      	inx	b		;char to C 
  DBD8    C5             C      	push	b 
  DBD9    4F             C      	mov	c,a 
  DBDA    CD DB90        C      	call	tabout		;another character printed 
  DBDD    C1             C      	pop	b 
  DBDE    C3 DBD3        C      	jmp	print 
                         C       
  DBE1                   C      read:	;read to info address (max length, current length, buffer) 
  DBE1    3A DD0C        C      	lda	column		;save start for ctl-x, ctl-h 
  DBE4    32 DD0B        C      	sta	strtcol  
  DBE7    2A DD43        C      	lhld	info 
  DBEA    4E             C      	mov	c,m 
  DBEB    23             C      	inx	h 
  DBEC    E5             C      	push	h 
  DBED    06 00          C      	mvi	b,0 
                         C      	;B = current buffer length, 
                         C      	;C = maximum buffer length, 
                         C      	;HL= next to fill - 1 
  DBEF                   C      readnx: 
                         C      	;read next character, BC, HL active 
  DBEF    C5             C      	push	b		;blen, cmax, HL saved 
  DBF0    E5             C      	push	h 
  DBF1                   C      readn0: 
  DBF1    CD DAFB        C      	call	_conin		;next char in A 
  DBF4    E6 7F          C      	ani	7fh		;mask parity bit 
  DBF6    E1             C      	pop	h		;reactivate counters 
  DBF7    C1             C      	pop	b 
  DBF8    FE 0D          C      	cpi	cr		;end of line? 
  DBFA    CA DCC1        C      	jz	readen 
  DBFD    FE 0A          C      	cpi	lf		;also end of line 
  DBFF    CA DCC1        C      	jz	readen 
  DC02    FE 08          C      	cpi	ctlh		;backspace? 
  DC04    C2 DC16        C      	jnz	noth 
                         C      	;do we have any characters to back over? 
  DC07    78             C      	mov	a,b 
  DC08    B7             C      	ora	a 
  DC09    CA DBEF        C      	jz	readnx 
                         C      	;characters remain in buffer, backup one 
  DC0C    05             C      	dcr	b		;remove one character 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-38


  DC0D    3A DD0C        C      	lda	column		;col > 0 
  DC10    32 DD0A        C      	sta	compcol 
                         C      	;compcol > 0 marks repeat as length compute 
  DC13    C3 DC70        C      	jmp	linelen		;uses same code as repeat 
  DC16                   C      noth: 
                         C      	;not a backspace 
  DC16    FE 7F          C      	cpi	rubout		;rubout char? 
  DC18    C2 DC26        C      	jnz	notrub 
                         C      	;rubout encountered, rubout if possible 
  DC1B    78             C      	mov	a,b		;skip if len=0 
  DC1C    B7             C      	ora	a 
  DC1D    CA DBEF        C      	jz	readnx  
                         C      	;buffer has characters, resend last char 
  DC20    7E             C      	mov	a,m		;A = last char 
  DC21    05             C      	dcr	b 
  DC22    2B             C      	dcx	h 
                         C      	;blen=blen-1, next to fill - 1 decremented 
  DC23    C3 DCA9        C      	jmp	rdech1		;act like this is an echo 
                         C       
  DC26                   C      notrub: 
                         C      	;not a rubout character, check end line 
  DC26    FE 05          C      	cpi	ctle		;physical end line? 
  DC28    C2 DC37        C      	jnz	note 
                         C      	;yes, save active counters and force eol 
  DC2B    C5             C      	push	b 
  DC2C    E5             C      	push	h 
  DC2D    CD DBC9        C      	call	crlf 
  DC30    AF             C      	xra	a		;start position = 00 
  DC31    32 DD0B        C      	sta	strtcol 
  DC34    C3 DBF1        C      	jmp	readn0		;for another character 
  DC37                   C      note: 
                         C      	;not end of line, list toggle? 
  DC37    FE 10          C      	cpi	ctlp		;skip if not ctlp 
  DC39    C2 DC48        C      	jnz	notp 
                         C      	;list toggle - change parity 
  DC3C    E5             C      	push	h		;save next to fill - 1 
  DC3D    21 DD0D        C      	lxi	h,listcp	;HL=.listcp flag 
  DC40    3E 01          C      	mvi	a,1		;True-listcp 
  DC42    96             C      	sub	m 
  DC43    77             C      	mov	m,a		;listcp = not listcp 
  DC44    E1             C      	pop	h		;for another char 
  DC45    C3 DBEF        C      	jmp	readnx 
  DC48                   C      notp: 
                         C      	;not a ctlp, line delete? 
  DC48    FE 18          C      	cpi	ctlx 
  DC4A    C2 DC5F        C      	jnz	notx 
  DC4D    E1             C      	pop	h		;discard start position 
                         C      	;loop while column > strtcol 
  DC4E                   C      backx: 
  DC4E    3A DD0B        C      	lda	strtcol 
  DC51    21 DD0C        C      	lxi	h,column 
  DC54    BE             C      	cmp	m		;start again 
  DC55    D2 DBE1        C      	jnc	read 
  DC58    35             C      	dcr	m		;column = column - 1 
  DC59    CD DBA4        C      	call	backup		;one position 
  DC5C    C3 DC4E        C      	jmp	backx 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-39


  DC5F                   C      notx: 
                         C      	;not a control x, control u? 
                         C      	;not control-X, control-U? 
  DC5F    FE 15          C      	cpi	ctlu		;skip if not 
  DC61    C2 DC6B        C      	jnz	notu 
                         C      	;delete line (ctlu) 
  DC64    CD DBB1        C      	call	crlfp		;physical eol 
  DC67    E1             C      	pop	h		;discard starting position 
  DC68    C3 DBE1        C      	jmp	read		;to start all over 
  DC6B                   C      notu: 
                         C      	;not line delete, repeat line? 
  DC6B    FE 12          C      	cpi	ctlr 
  DC6D    C2 DCA6        C      	jnz	notr 
  DC70                   C      linelen: 
                         C      	;repeat line, or compute line len (ctlh) 
                         C      	;if compcol > 0 
  DC70    C5             C      	push	b		;save line length 
  DC71    CD DBB1        C      	call	crlfp  
  DC74    C1             C      	pop	b 
  DC75    E1             C      	pop	h 
  DC76    E5             C      	push	h 
  DC77    C5             C      	push	b 
                         C      	;bcur, cmax active, beginning buff at HL 
  DC78                   C      rep0: 
  DC78    78             C      	mov	a,b		;count len to 00 
  DC79    B7             C      	ora	a 
  DC7A    CA DC8A        C      	jz	rep1  
  DC7D    23             C      	inx	h		;next to print 
  DC7E    4E             C      	mov	c,m 
  DC7F    05             C      	dcr	b		;count length down 
  DC80    C5             C      	push	b 
  DC81    E5             C      	push	h 
  DC82    CD DB7F        C      	call	ctlout		;character echoed 
  DC85    E1             C      	pop	h		;recall remaining count 
  DC86    C1             C      	pop	b 
  DC87    C3 DC78        C      	jmp	rep0		;for the next character 
  DC8A                   C      rep1: 
                         C      	;end of repeat, recall lengths 
                         C      	;original BC still remains pushed 
  DC8A    E5             C      	push	h		;save next to fill 
  DC8B    3A DD0A        C      	lda	compcol		;>0 if computing length 
  DC8E    B7             C      	ora	a 
  DC8F    CA DBF1        C      	jz	readn0		;for another char if so 
                         C      	;column position computed for ctlh 
  DC92    21 DD0C        C      	lxi	h,column	;diff > 0 
  DC95    96             C      	sub	m 
  DC96    32 DD0A        C      	sta	compcol		;count down below 
                         C      	;move back compcol-column spaces 
  DC99                   C      backsp: 
                         C      	;move back one more space 
  DC99    CD DBA4        C      	call	backup		;one space 
  DC9C    21 DD0A        C      	lxi	h,compcol 
  DC9F    35             C      	dcr	m 
  DCA0    C2 DC99        C      	jnz	backsp 
  DCA3    C3 DBF1        C      	jmp	readn0		;for next character 
  DCA6                   C      notr: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-40


                         C      	;not a ctlr, place into buffer 
  DCA6                   C      rdecho: 
  DCA6    23             C      	inx	h		;character filled to mem 
  DCA7    77             C      	mov	m,a 
  DCA8    04             C      	inr	b		;blen = blen + 1 
  DCA9                   C      rdech1: 
                         C      	;look for a random control character 
  DCA9    C5             C      	push	b		;active values saved 
  DCAA    E5             C      	push	h  
  DCAB    4F             C      	mov	c,a		;ready to print 
  DCAC    CD DB7F        C      	call	ctlout		;may be up-arrow C 
  DCAF    E1             C      	pop	h		;recall char 
  DCB0    C1             C      	pop	b 
  DCB1    7E             C      	mov	a,m 
  DCB2    FE 03          C      	cpi	ctlc		;set flags for reboot test 
  DCB4    78             C      	mov	a,b		;move length to A 
  DCB5    C2 DCBD        C      	jnz	notc		;skip if not a control c 
  DCB8    FE 01          C      	cpi	1		;control C, must be length 1 
  DCBA    CA 0000        C      	jz	reboot		;reboot if blen = 1 
                         C      	;length not one, so skip reboot 
  DCBD                   C      notc: 
                         C      	;not reboot, are we at end of buffer? 
  DCBD    B9             C      	cmp	c		;go for another if not 
  DCBE    DA DBEF        C      	jc	readnx 
  DCC1                   C      readen: 
                         C      	;end of read operation, store blen 
  DCC1    E1             C      	pop	h		;M(current len) = B 
  DCC2    70             C      	mov	m,b 
  DCC3    0E 0D          C      	mvi	c,cr		;return carriage 
  DCC5    C3 DB48        C      	jmp	_conout 
                         C      	;ret 
  DCC8                   C      func1: 
                         C      	;return console character with echo 
  DCC8    CD DB06        C      	call	conech 
  DCCB    C3 DD01        C      	jmp	sta_ret 
                         C      ; 
  DB90                   C      func2	equ	tabout 
                         C      	;write console character with tab expansion 
                         C      ; 
  DCCE                   C      func3: 
                         C      	;return reader character 
  DCCE    CD E815        C      	call	readerf 
  DCD1    C3 DD01        C      	jmp	sta_ret 
                         C       
                         C      ;func4:	equated to punchf 
                         C      	;write punch character 
                         C       
                         C      ;func5:	equated to listf 
                         C      	;write list character 
                         C      	;write to list device 
                         C       
  DCD4                   C      func6: 
                         C      	;direct console i/o - read if 0ffh 
  DCD4    79             C      	mov	a,c		;0ffh => 00h, means input mode 
  DCD5    3C             C      	inr	a 
  DCD6    CA DCE0        C      	jz	dirinp 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-41


  DCD9    3C             C      	inr	a		;0feH in C for status 
  DCDA    CA E806        C      	jz	constf 
                         C      	;direct output function 
  DCDD    C3 E80C        C      	jmp	conoutf 
  DCE0                   C      dirinp: 
  DCE0    CD E806        C      	call	constf		;status check 
  DCE3    B7             C      	ora	a		;skip, return 00 if not ready 
  DCE4    CA E791        C      	jz	retmon 
                         C      	;character is ready, get it 
  DCE7    CD E809        C      	call	coninf		;to A 
  DCEA    C3 DD01        C      	jmp	sta_ret 
                         C       
  DCED                   C      func7: 
                         C      	;return io byte 
  DCED    3A 0003        C      	lda	ioloc 
  DCF0    C3 DD01        C      	jmp	sta_ret 
                         C       
  DCF3                   C      func8: 
                         C      	;set i/o byte 
  DCF3    21 0003        C      	lxi	h,ioloc 
  DCF6    71             C      	mov	m,c 
  DCF7    C9             C      	ret			;jmp goback 
                         C       
  DCF8                   C      func9: 
                         C      	;write line until $ encountered 
  DCF8    EB             C      	xchg			;was lhld info	 
  DCF9    4D             C      	mov	c,l		;BC=string address 
  DCFA    44             C      	mov	b,h 
  DCFB    C3 DBD3        C      	jmp	print		;out to console	 
                         C       
  DBE1                   C      func10	equ	read 
                         C      	;read a buffered console line 
                         C       
  DCFE                   C      func11: 
                         C      	;check console status 
  DCFE    CD DB23        C      	call	conbrk 
                         C      	;(drop through to sta_ret) 
  DD01                   C      sta_ret: 
                         C      	;store the A register to aret 
  DD01    32 DD45        C      	sta	aret 
  DD04                   C      func_ret:						; 
  DD04    C9             C      	ret			;jmp goback (pop stack for non cp/m functions) 
                         C       
  DD05                   C      setlret1: 
                         C      	;set lret = 1 
  DD05    3E 01          C      	mvi	a,1 
  DD07    C3 DD01        C      	jmp	sta_ret 
                         C       
                         C       
                         C       
                         C      ;	data areas 
                         C       
  DD0A    00             C      compcol:db	0	;true if computing column position 
  DD0B    00             C      strtcol:db	0	;starting column position after read 
  DD0C    00             C      column:	db	0	;column position 
  DD0D    00             C      listcp:	db	0	;listing toggle 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-42


  DD0E    00             C      kbchar:	db	0	;initial key char = 00 
  DD0F                   C      entsp:	ds	2	;entry stack pointer 
  DD11                   C      	ds	ssize*2	;stack size 
  DD41                   C      lstack: 
                         C      ;	end of Basic I/O System 
                         C       
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C       
                         C      ;	common values shared between bdosi and bdos 
  DD41    00             C      usrcode:db	0	;current user number 
  DD42    00             C      curdsk:	db	0	;current disk number 
  DD43                   C      info:	ds	2	;information address 
  DD45                   C      aret:	ds	2	;address value to return 
  DD45                   C      lret	equ	aret	;low(aret) 
                         C       
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C      ;**                                                             ** 
                         C      ;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    ** 
                         C      ;**                                                             ** 
                         C      ;***************************************************************** 
                         C      ;***************************************************************** 
                         C       
  0022                   C      dvers	equ	22h	;version 2.2 
                         C      ;	module addresses 
                         C       
                         C      ;	literal constants 
  00FF                   C      _true	equ	0ffh	;constant true 
  0000                   C      _false	equ	000h	;constant false 
  FFFF                   C      enddir	equ	0ffffh	;end of directory 
  0001                   C      byte	equ	1	;number of bytes for "byte" type 
  0002                   C      word	equ	2	;number of bytes for "word" type 
                         C       
                         C      ;	fixed addresses in low memory 
  005C                   C      tfcb	equ	005ch	;default fcb location 
  0080                   C      tbuff	equ	0080h	;default buffer location 
                         C       
                         C      ;	fixed addresses referenced in bios module are 
                         C      ;	pererr (0009), selerr (000c), roderr (000f) 
                         C       
                         C      ;	error message handlers 
                         C       
                         C      ;per_error:	  
                         C      	;report permanent error to user	 
                         C      ;	lxi h,pererr  jmp goerr		 
                         C       
                         C      ;rod_error: 
                         C      	;report read/only disk error 
                         C      ;	lxi h,roderr  jmp goerr 
                         C       
                         C      ;rof_error: 
                         C      	;report read/only file error 
                         C      ;	lxi h,roferr	;jmp goerr	 
                         C       
  DD47                   C      sel_error: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-43


                         C      	;report select error 
  DD47    21 DA0B        C      	lxi	h,selerr 
                         C       
                         C       
  DD4A                   C      goerr: 
                         C      	;HL = .errorhandler, call subroutine 
  DD4A    5E             C      	mov	e,m		;address of routine in DE 
  DD4B    23             C      	inx	h 
  DD4C    56             C      	mov	d,m 
  DD4D    EB             C      	xchg			;to subroutine 
  DD4E    E9             C      	pchl 
                         C       
                         C       
                         C       
                         C      ;	local subroutines for bios interface 
                         C       
  DD4F                   C      move: 
                         C      	;move data length of length C from source DE to 
                         C      	;destination given by HL 
  DD4F    0C             C      	inr	c		;in case it is zero 
  DD50                   C      @move0: 
  DD50    0D             C      	dcr	c		;more to move 
  DD51    C8             C      	rz 
  DD52    1A             C      	ldax	d		;one byte moved 
  DD53    77             C      	mov	m,a 
  DD54    13             C      	inx	d		;to next byte 
  DD55    23             C      	inx	h 
  DD56    C3 DD50        C      	jmp	@move0 
                         C       
  DD59                   C      selectdisk: 
                         C      	;select the disk drive given by curdsk, and fill 
                         C      	;the base addresses curtrka - alloca, then fill 
                         C      	;the values of the disk parameter block 
  DD59    3A DD42        C      	lda	curdsk		;current disk# to c 
  DD5C    4F             C      	mov	c,a 
                         C      	;lsb of e = 0 if not yet logged - in 
  DD5D    CD E81B        C      	call	seldskf		;HL filled by call 
                         C      	;HL = 0000 if error, otherwise disk headers 
  DD60    7C             C      	mov	a,h		;return with 0000 in HL and z flag 
  DD61    B5             C      	ora	l 
  DD62    C8             C      	rz 
                         C      	;disk header block address in hl 
  DD63    5E             C      	mov	e,m		;DE=.tran 
  DD64    23             C      	inx	h 
  DD65    56             C      	mov	d,m 
  DD66    23             C      	inx	h 
  DD67    22 E7B3        C      	shld	cdrmaxa		;.cdrmax 
  DD6A    23             C      	inx	h 
  DD6B    23             C      	inx	h 
  DD6C    22 E7B5        C      	shld	curtrka		;HL=.currec 
  DD6F    23             C      	inx	h 
  DD70    23             C      	inx	h 
  DD71    22 E7B7        C      	shld	curreca		;HL=.buffa 
  DD74    23             C      	inx	h 
  DD75    23             C      	inx	h 
                         C      	;DE still contains .tran 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-44


  DD76    EB             C      	xchg			;.tran vector 
  DD77    22 E7D0        C      	shld	tranv 
  DD7A    21 E7B9        C      	lxi	h,buffa		;DE= source for move, HL=dest 
  DD7D    0E 08          C      	mvi	c,addlist	;addlist filled 
  DD7F    CD DD4F        C      	call	move 
                         C      	;now fill the disk parameter block 
  DD82    2A E7BB        C      	lhld	dpbaddr		;DE is source 
  DD85    EB             C      	xchg 
  DD86    21 E7C1        C      	lxi	h,sectpt	;HL is destination 
  DD89    0E 0F          C      	mvi	c,dpblist	;data filled 
  DD8B    CD DD4F        C      	call	move 
                         C      	;now set single/double map mode 
  DD8E    2A E7C6        C      	lhld	maxall		;largest allocation number 
  DD91    7C             C      	mov	a,h		;00 indicates < 255 
  DD92    21 E7DD        C      	lxi	h,single	;assume a=00 
  DD95    36 FF          C      	mvi	m,_true 
  DD97    B7             C      	ora	a 
  DD98    CA DD9D        C      	jz	retselect 
                         C      	;high order of maxall not zero, use double dm 
  DD9B    36 00          C      	mvi	m,_false 
  DD9D                   C      retselect: 
  DD9D    3E FF          C      	mvi	a,_true		;select disk function ok 
  DD9F    B7             C      	ora	a 
  DDA0    C9             C      	ret 
                         C       
  DDA1                   C      home: 
                         C      	;move to home position, then offset to start of dir 
  DDA1    CD E818        C      	call	homef		;move to track 00, sector 00 reference 
                         C      	;lxi h,offset ;mov c,m ;inx h ;mov b,m ;call settrkf 
                         C      	;first directory position selected 
  DDA4    AF             C      	xra	a		;constant zero to accumulator 
  DDA5    2A E7B5        C      	lhld	curtrka		;curtrk=0000 
  DDA8    77             C      	mov	m,a 
  DDA9    23             C      	inx	h 
  DDAA    77             C      	mov	m,a 
  DDAB    2A E7B7        C      	lhld	curreca		;currec=0000 
  DDAE    77             C      	mov	m,a 
  DDAF    23             C      	inx	h 
  DDB0    77             C      	mov	m,a 
                         C      	;curtrk, currec both set to 0000 
  DDB1    C9             C      	ret 
                         C       
  DDB2                   C      rdbuff: 
                         C      	;read buffer and check condition 
  DDB2    CD E827        C      	call	readf		;current drive, track, sector, dma 
  DDB5    C3 DDBB        C      	jmp	diocomp		;check for i/o errors 
                         C       
  DDB8                   C      wrbuff: 
                         C      	;write buffer and check condition 
                         C      	;write type (wrtype) is in register C 
                         C      	;wrtype = 0 => normal write operation 
                         C      	;wrtype = 1 => directory write operation 
                         C      	;wrtype = 2 => start of new block 
  DDB8    CD E82A        C      	call	writef		;current drive, track, sector, dma 
  DDBB                   C      diocomp:	;check for disk errors 
  DDBB    B7             C      	ora	a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-45


  DDBC    C8             C      	rz 
  DDBD    21 DA09        C      	lxi	h,pererr 
  DDC0    C3 DD4A        C      	jmp	goerr 
                         C       
  DDC3                   C      seek_dir: 
                         C      	;seek the record containing the current dir entry 
  DDC3    2A E7EA        C      	lhld	dcnt		;directory counter to HL 
  DDC6    0E 02          C      	mvi	c,dskshf	;value to HL 
  DDC8    CD DEEA        C      	call	hlrotr 
  DDCB    22 E7E5        C      	shld	arecord		;ready for seek 
  DDCE    22 E7EC        C      	shld	drec 
                         C      	;  jmp seek 
                         C      	;ret 
                         C       
                         C       
  DDD1                   C      seek: 
                         C      	;seek the track given by arecord (actual record) 
                         C      	;local equates for registers 
                         C      ;arech	equ	b		;arecord = BC 
                         C      ;arecl	equ	c 
                         C      ;crech	equ	d		;currec  = DE 
                         C      ;crecl	equ	e 
                         C      ;ctrkh	equ	h		;curtrk  = HL 
                         C      ;ctrkl	equ	l 
                         C      ;tcrech	equ	h		;tcurrec = HL 
                         C      ;tcrecl	equ	l 
                         C      	;load the registers from memory 
  DDD1    21 E7E5        C      	lxi	h,arecord 
  DDD4    4E             C      	mov	c,m		; % c = arecl 
  DDD5    23             C      	inx	h 
  DDD6    46             C      	mov	b,m		; % b = arech 
  DDD7    2A E7B7        C      	lhld	curreca 
  DDDA    5E             C      	mov	e,m		; % e = crecl 
  DDDB    23             C      	inx	h 
  DDDC    56             C      	mov	d,m		; % d = crech 
  DDDD    2A E7B5        C      	lhld	curtrka 
  DDE0    7E             C      	mov	a,m 
  DDE1    23             C      	inx	h 
  DDE2    66             C      	mov	h,m		; % h = ctrkh 
  DDE3    6F             C      	mov	l,a		; % l = ctrkl 
                         C      	;loop while arecord < currec 
  DDE4                   C      seek0: 
  DDE4    79             C      	mov	a,c		; % c = arecl 
  DDE5    93             C      	sub	e		; % e = crecl 
  DDE6    78             C      	mov	a,b		; % b = arech 
  DDE7    9A             C      	sbb	d		; % d = crech 
  DDE8    D2 DDFA        C      	jnc	seek1		;skip if arecord >= currec 
                         C      	;currec = currec - sectpt 
  DDEB    E5             C      	push	h		; % h = ctrkh 
  DDEC    2A E7C1        C      	lhld	sectpt 
  DDEF    7B             C      	mov	a,e		; % e = crecl 
  DDF0    95             C      	sub	l 
  DDF1    5F             C      	mov	e,a		; % e = crecl 
  DDF2    7A             C      	mov	a,d		; % d = crech 
  DDF3    9C             C      	sbb	h 
  DDF4    57             C      	mov	d,a		; % d = crech 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-46


  DDF5    E1             C      	pop	h		; % h = ctrkh 
                         C      	;curtrk = curtrk - 1 
  DDF6    2B             C      	dcx	h		; % h = ctrkh 
  DDF7    C3 DDE4        C      	jmp	seek0 ;for another try 
  DDFA                   C      seek1: 
                         C      	;look while arecord >= (t:=currec + sectpt) 
  DDFA    E5             C      	push	h		; % h = ctrkh 
  DDFB    2A E7C1        C      	lhld	sectpt		;HL = currec+sectpt 
  DDFE    19             C      	dad	d		; % d = crech 
  DDFF    DA DE0F        C      	jc	seek2		;can be > FFFFH	 
  DE02    79             C      	mov	a,c		; % c = arecl 
  DE03    95             C      	sub	l		; % l = tcrecl 
  DE04    78             C      	mov	a,b		; % b = arech 
  DE05    9C             C      	sbb	h		; % h = tcrech 
  DE06    DA DE0F        C      	jc	seek2		;skip if t > arecord 
                         C      	;currec = t 
  DE09    EB             C      	xchg 
                         C      	;curtrk = curtrk + 1 
  DE0A    E1             C      	pop	h		; % h = ctrkh 
  DE0B    23             C      	inx	h		; % h = ctrkh 
  DE0C    C3 DDFA        C      	jmp	seek1		;for another try 
  DE0F    E1             C      seek2:	pop	h		; % h = ctrkh 
                         C      	;arrive here with updated values in each register 
  DE10    C5             C      	push	b		;to stack for later ; % b = arech 
  DE11    D5             C      	push	d		; % d = crech 
  DE12    E5             C      	push	h		; % h = ctrkh 
                         C      	;stack contains (lowest) BC=arecord, DE=currec, HL=curtrk 
  DE13    EB             C      	xchg			;HL = curtrk+offset 
  DE14    2A E7CE        C      	lhld	offset 
  DE17    19             C      	dad	d 
  DE18    44             C      	mov	b,h		;track set up 
  DE19    4D             C      	mov	c,l 
  DE1A    CD E81E        C      	call	settrkf 
                         C      	;note that BC - curtrk is difference to move in bios 
  DE1D    D1             C      	pop	d		;recall curtrk 
  DE1E    2A E7B5        C      	lhld	curtrka		;curtrk updated 
  DE21    73             C      	mov	m,e 
  DE22    23             C      	inx	h 
  DE23    72             C      	mov	m,d 
                         C      	;now compute sector as arecord-currec 
  DE24    D1             C      	pop	d		;recall currec ; % d = crech 
  DE25    2A E7B7        C      	lhld	curreca 
  DE28    73             C      	mov	m,e		; % e = crecl 
  DE29    23             C      	inx	h 
  DE2A    72             C      	mov	m,d		; % d = crech 
  DE2B    C1             C      	pop	b		;BC=arecord, DE=currec ; % b = arech 
  DE2C    79             C      	mov	a,c		; % c = arecl 
  DE2D    93             C      	sub	e		; % e = crecl 
  DE2E    4F             C      	mov	c,a		; % c = arecl 
  DE2F    78             C      	mov	a,b		; % b = arech 
  DE30    9A             C      	sbb	d		; % d = crech 
  DE31    47             C      	mov	b,a		; % b = arech 
  DE32    2A E7D0        C      	lhld	tranv		;BC=sector#, DE=.tran 
  DE35    EB             C      	xchg 
  DE36    CD E830        C      	call	sectran		;HL = tran(sector) 
  DE39    4D             C      	mov	c,l		;BC = tran(sector) 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-47


  DE3A    44             C      	mov	b,h 
  DE3B    C3 E821        C      	jmp	setsecf		;sector selected 
                         C      	;ret 
                         C       
                         C      ;	file control block (fcb) constants 
  00E5                   C      empty	equ	0e5h	;empty directory entry 
  007F                   C      lstrec	equ	127	;last record# in extent 
  0080                   C      recsiz	equ	128	;record size 
  0020                   C      fcblen	equ	32	;file control block size 
  0004                   C      dirrec	equ	recsiz/fcblen	;directory elts / record 
  0002                   C      dskshf	equ	2	;log2(dirrec) 
  0003                   C      dskmsk	equ	dirrec-1 
  0005                   C      fcbshf	equ	5	;log2(fcblen) 
                         C       
  000C                   C      extnum	equ	12	;extent number field 
  001F                   C      maxext	equ	31	;largest extent number 
  000D                   C      ubytes	equ	13	;unfilled bytes field 
  000E                   C      modnum	equ	14	;data module number 
  000F                   C      maxmod	equ	15	;largest module number 
  0080                   C      fwfmsk	equ	80h	;file write flag is high order modnum 
  000F                   C      namlen	equ	15	;name length 
  000F                   C      reccnt	equ	15	;record count field 
  0010                   C      dskmap	equ	16	;disk map field 
  001F                   C      lstfcb	equ	fcblen-1 
  0020                   C      nxtrec	equ	fcblen 
  0021                   C      ranrec	equ	nxtrec+1;random record field (2 bytes) 
                         C       
                         C      ;	reserved file indicators 
  0009                   C      rofile	equ	9	;high order of first type char 
  000A                   C      invis	equ	10	;invisible file in dir command 
                         C      ;	equ	11	;reserved 
                         C       
                         C      ;	utility functions for file access 
                         C       
  DE3E                   C      dm_position: 
                         C      	;compute disk map position for vrecord to HL 
  DE3E    21 E7C3        C      	lxi	h,blkshf	;shift count to C 
  DE41    4E             C      	mov	c,m 
  DE42    3A E7E3        C      	lda	vrecord		;current virtual record to A 
  DE45                   C      dmpos0: 
  DE45    B7             C      	ora	a 
  DE46    1F             C      	rar 
  DE47    0D             C      	dcr	c 
  DE48    C2 DE45        C      	jnz	dmpos0 
                         C      	;A = shr(vrecord,blkshf) = vrecord/2**(sect/block) 
  DE4B    47             C      	mov	b,a		;save it for later addition 
  DE4C    3E 08          C      	mvi	a,8		;8-blkshf to accumulator 
  DE4E    96             C      	sub	m 
  DE4F    4F             C      	mov	c,a		;extent shift count in register c 
  DE50    3A E7E2        C      	lda	extval		;extent value ani extmsk 
  DE53                   C      dmpos1: 
                         C      	;blkshf = 3,4,5,6,7, C=5,4,3,2,1 
                         C      	;shift is 4,3,2,1,0 
  DE53    0D             C      	dcr	c 
  DE54    CA DE5C        C      	jz	dmpos2 
  DE57    B7             C      	ora	a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-48


  DE58    17             C      	ral 
  DE59    C3 DE53        C      	jmp	dmpos1 
  DE5C                   C      dmpos2: 
                         C      	;arrive here with A = shl(ext and extmsk,7-blkshf) 
  DE5C    80             C      	add	b		;add the previous shr(vrecord,blkshf) value 
                         C      	;A is one of the following values, depending upon alloc 
                         C      	;bks blkshf 
                         C      	;1k   3     v/8 + extval * 16 
                         C      	;2k   4     v/16+ extval * 8 
                         C      	;4k   5     v/32+ extval * 4 
                         C      	;8k   6     v/64+ extval * 2 
                         C      	;16k  7     v/128+extval * 1 
  DE5D    C9             C      	ret		;with dm_position in A 
                         C       
  DE5E                   C      getdm: 
                         C      	;return disk map value from position given by BC 
  DE5E    2A DD43        C      	lhld	info		;base address of file control block 
  DE61    11 0010        C      	lxi	d,dskmap	;HL =.diskmap 
  DE64    19             C      	dad	d 
  DE65    09             C      	dad	b		;index by a single byte value 
  DE66    3A E7DD        C      	lda	single		;single byte/map entry? 
  DE69    B7             C      	ora	a		;get disk map single byte 
  DE6A    CA DE71        C      	jz	getdmd 
  DE6D    6E             C      	mov	l,m		;with HL=00bb 
  DE6E    26 00          C      	mvi	h,0 
  DE70    C9             C      	ret 
  DE71                   C      getdmd: 
  DE71    09             C      	dad	b		;HL=.fcb(dm+i*2) 
                         C      	;double precision value returned 
  DE72    5E             C      	mov	e,m 
  DE73    23             C      	inx	h 
  DE74    56             C      	mov	d,m 
  DE75    EB             C      	xchg 
  DE76    C9             C      	ret 
                         C       
  DE77                   C      index: 
                         C      	;compute disk block number from current fcb 
  DE77    CD DE3E        C      	call	dm_position	;0...15 in register A 
  DE7A    4F             C      	mov	c,a		;value to HL 
  DE7B    06 00          C      	mvi	b,0 
  DE7D    CD DE5E        C      	call	getdm 
  DE80    22 E7E5        C      	shld	arecord 
  DE83    C9             C      	ret 
                         C       
  DE84                   C      allocated: 
                         C      	;called following index to see if block allocated 
  DE84    2A E7E5        C      	lhld	arecord 
  DE87    7D             C      	mov	a,l 
  DE88    B4             C      	ora	h 
  DE89    C9             C      	ret 
                         C       
  DE8A                   C      atran: 
                         C      	;compute actual record address, assuming index called 
  DE8A    3A E7C3        C      	lda	blkshf		;shift count to reg A 
  DE8D    2A E7E5        C      	lhld	arecord 
  DE90                   C      atran0: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-49


  DE90    29             C      	dad	h		;shl(arecord,blkshf) 
  DE91    3D             C      	dcr	a 
  DE92    C2 DE90        C      	jnz	atran0 
  DE95    22 E7E7        C      	shld	arecord1	;save shifted block #   
  DE98    3A E7C4        C      	lda	blkmsk		;mask value to C 
  DE9B    4F             C      	mov	c,a 
  DE9C    3A E7E3        C      	lda	vrecord		;masked value in A 
  DE9F    A1             C      	ana	c 
  DEA0    B5             C      	ora	l		;to HL 
  DEA1    6F             C      	mov	l,a 
  DEA2    22 E7E5        C      	shld	arecord		;arecord=HL or (vrecord and blkmsk) 
  DEA5    C9             C      	ret 
                         C       
  DEA6                   C      getexta: 
                         C      	;get current extent field address to A 
  DEA6    2A DD43        C      	lhld	info		;HL=.fcb(extnum) 
  DEA9    11 000C        C      	lxi	d,extnum 
  DEAC    19             C      	dad	d 
  DEAD    C9             C      	ret 
                         C       
  DEAE                   C      getfcba: 
                         C      	;compute reccnt and nxtrec addresses for get/setfcb 
  DEAE    2A DD43        C      	lhld	info		;DE=.fcb(reccnt) 
  DEB1    11 000F        C      	lxi	d,reccnt 
  DEB4    19             C      	dad	d 
  DEB5    EB             C      	xchg 
  DEB6    21 0011        C      	lxi	h,(nxtrec-reccnt)	;HL=.fcb(nxtrec) 
  DEB9    19             C      	dad	d 
  DEBA    C9             C      	ret 
                         C       
  DEBB                   C      getfcb: 
                         C      	;set variables from currently addressed fcb 
  DEBB    CD DEAE        C      	call	getfcba		;addresses in DE, HL 
  DEBE    7E             C      	mov	a,m		;vrecord=fcb(nxtrec) 
  DEBF    32 E7E3        C      	sta	vrecord 
  DEC2    EB             C      	xchg			;rcount=fcb(reccnt) 
  DEC3    7E             C      	mov	a,m 
  DEC4    32 E7E1        C      	sta	rcount 
  DEC7    CD DEA6        C      	call	getexta		;HL=.fcb(extnum) 
  DECA    3A E7C5        C      	lda	extmsk		;extent mask to a 
  DECD    A6             C      	ana	m		;fcb(extnum) and extmsk 
  DECE    32 E7E2        C      	sta	extval 
  DED1    C9             C      	ret 
                         C       
  DED2                   C      setfcb: 
                         C      	;place values back into current fcb 
  DED2    CD DEAE        C      	call	getfcba		;addresses to DE, HL 
  DED5    3A E7D5        C      	lda	seqio 
  DED8    FE 02          C      	cpi	02		;check ranfill 
  DEDA    C2 DEDE        C      	jnz	setfcb1 
  DEDD    AF             C      	xra	a 
  DEDE                   C      setfcb1: 
  DEDE    4F             C       	mov	c,a		;=1 if sequential i/o 
  DEDF    3A E7E3        C      	lda	vrecord		;fcb(nxtrec)=vrecord+seqio 
  DEE2    81             C      	add	c 
  DEE3    77             C      	mov	m,a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-50


  DEE4    EB             C      	xchg			;fcb(reccnt)=rcount 
  DEE5    3A E7E1        C      	lda	rcount 
  DEE8    77             C      	mov	m,a 
  DEE9    C9             C      	ret 
                         C       
  DEEA                   C      hlrotr: 
                         C      	;hl rotate right by amount C 
  DEEA    0C             C      	inr	c		;in case zero 
  DEEB                   C      hlrotr0: 
  DEEB    0D             C      	dcr	c		;return when zero 
  DEEC    C8             C      	rz 
  DEED    7C             C      	mov	a,h		;high byte 
  DEEE    B7             C      	ora	a 
  DEEF    1F             C      	rar 
  DEF0    67             C      	mov	h,a 
  DEF1    7D             C      	mov	a,l		;low byte 
  DEF2    1F             C      	rar 
  DEF3    6F             C      	mov	l,a 
  DEF4    C3 DEEB        C      	jmp	hlrotr0 
                         C       
                         C       
  DEF7                   C      compute_cs: 
                         C      	;compute checksum for current directory buffer 
  DEF7    0E 80          C      	mvi	c,recsiz	;size of directory buffer 
  DEF9    2A E7B9        C      	lhld	buffa		;current directory buffer 
  DEFC    AF             C      	xra	a		;clear checksum value 
  DEFD                   C      computecs0: 
  DEFD    86             C      	add	m		;cs=cs+buff(recsiz-C) 
  DEFE    23             C      	inx	h 
  DEFF    0D             C      	dcr	c 
  DF00    C2 DEFD        C      	jnz	computecs0 
  DF03    C9             C      	ret			;with checksum in A 
                         C       
  DF04                   C      hlrotl: 
                         C      	;rotate the mask in HL by amount in C 
  DF04    0C             C      	inr	c		;may be zero 
  DF05                   C      hlrotl0: 
  DF05    0D             C      	dcr	c		;return if zero 
  DF06    C8             C      	rz 
  DF07    29             C      	dad	h 
  DF08    C3 DF05        C      	jmp	hlrotl0 
                         C       
  DF0B                   C      set_cdisk: 
                         C      	;set a "1" value in curdsk position of BC 
  DF0B    C5             C      	push	b		;save input parameter 
  DF0C    3A DD42        C      	lda	curdsk		;ready parameter for shift 
  DF0F    4F             C      	mov	c,a 
  DF10    21 0001        C      	lxi	h,1		;number to shift 
  DF13    CD DF04        C      	call	hlrotl		;HL = mask to integrate 
  DF16    C1             C      	pop	b		;original mask 
  DF17    79             C      	mov	a,c 
  DF18    B5             C      	ora	l 
  DF19    6F             C      	mov	l,a 
  DF1A    78             C      	mov	a,b		;HL = mask or rol(1,curdsk) 
  DF1B    B4             C      	ora	h 
  DF1C    67             C      	mov	h,a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-51


  DF1D    C9             C      	ret 
                         C       
  DF1E                   C      nowrite: 
                         C      	;return true if dir checksum difference occurred 
  DF1E    2A E7AD        C      	lhld	rodsk 
  DF21    3A DD42        C      	lda	curdsk 
  DF24    4F             C      	mov	c,a 
  DF25    CD DEEA        C      	call	hlrotr 
  DF28    7D             C      	mov	a,l		;non zero if nowrite 
  DF29    E6 01          C      	ani	1b 
  DF2B    C9             C      	ret 
                         C       
  DF2C                   C      set_ro: 
                         C      	;set current disk to read only 
  DF2C    21 E7AD        C      	lxi	h,rodsk 
  DF2F    4E             C      	mov	c,m 
  DF30    23             C      	inx	h 
  DF31    46             C      	mov	b,m 
  DF32    CD DF0B        C      	call	set_cdisk	;sets bit to 1 
  DF35    22 E7AD        C      	shld	rodsk 
                         C      	;high water mark in directory goes to max 
  DF38    2A E7C8        C      	lhld	dirmax		;DE = directory max 
  DF3B    23             C      	inx	h 
  DF3C    EB             C      	xchg 
  DF3D    2A E7B3        C      	lhld	cdrmaxa		;HL = .cdrmax 
  DF40    73             C      	mov	m,e		;cdrmax = dirmax 
  DF41    23             C      	inx	h 
  DF42    72             C      	mov	m,d 
  DF43    C9             C      	ret 
                         C       
  DF44                   C      check_rodir: 
                         C      	;check current directory element for read/only status 
  DF44    CD DF5E        C      	call	getdptra	;address of element 
                         C      						 
  DF47                   C      check_rofile: 
                         C      	;check current buff(dptr) or fcb(0) for r/o status 
  DF47    11 0009        C      	lxi	d,rofile	;offset to ro bit 
  DF4A    19             C      	dad	d 
  DF4B    7E             C      	mov	a,m		;return if not set 
  DF4C    17             C      	ral 
  DF4D    D0             C      	rnc 
  DF4E    21 DA0F        C      	lxi	h,roferr 
  DF51    C3 DD4A        C      	jmp	goerr 
                         C      ;	jmp rof_error ;exit to read only disk message 
                         C       
                         C       
  DF54                   C      check_write: 
                         C      	;check for write protected disk 
  DF54    CD DF1E        C      	call	nowrite		;ok to write if not rodsk 
  DF57    C8             C      	rz 
  DF58    21 DA0D        C      	lxi	h,roderr 
  DF5B    C3 DD4A        C      	jmp	goerr 
                         C      ;	jmp rod_error ;read only disk error 
                         C       
  DF5E                   C      getdptra: 
                         C      	;compute the address of a directory element at 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-52


                         C      	;positon dptr in the buffer 
  DF5E    2A E7B9        C      	lhld	buffa 
  DF61    3A E7E9        C      	lda	dptr 
  DF64                   C      addh: 
                         C      	;HL = HL + A 
  DF64    85             C      	add	l 
  DF65    6F             C      	mov	l,a 
  DF66    D0             C      	rnc 
                         C      	;overflow to H 
  DF67    24             C      	inr	h 
  DF68    C9             C      	ret 
                         C       
                         C       
  DF69                   C      getmodnum: 
                         C      	;compute the address of the module number  
                         C      	;bring module number to accumulator 
                         C      	;(high order bit is fwf (file write flag) 
  DF69    2A DD43        C      	lhld	info		;HL=.fcb(modnum) 
  DF6C    11 000E        C      	lxi	d,modnum 
  DF6F    19             C      	dad	d 
  DF70    7E             C      	mov	a,m		;A=fcb(modnum) 
  DF71    C9             C      	ret 
                         C       
  DF72                   C      clrmodnum: 
                         C      	;clear the module number field for user open/make 
  DF72    CD DF69        C      	call	getmodnum	;fcb(modnum)=0 
  DF75    36 00          C      	mvi	m,0 
  DF77    C9             C      	ret 
                         C       
  DF78                   C      setfwf: 
  DF78    CD DF69        C      	call	getmodnum	;HL=.fcb(modnum), A=fcb(modnum) 
                         C      	;set fwf (file write flag) to "1" 
  DF7B    F6 80          C      	ori	fwfmsk		;fcb(modnum)=fcb(modnum) or 80h 
  DF7D    77             C      	mov	m,a 
                         C      	;also returns non zero in accumulator 
  DF7E    C9             C      	ret 
                         C       
                         C       
  DF7F                   C      compcdr: 
                         C      	;return cy if cdrmax > dcnt 
  DF7F    2A E7EA        C      	lhld	dcnt		;DE = directory counter 
  DF82    EB             C      	xchg 
  DF83    2A E7B3        C      	lhld	cdrmaxa		;HL=.cdrmax 
  DF86    7B             C      	mov	a,e		;low(dcnt) - low(cdrmax) 
  DF87    96             C      	sub	m 
  DF88    23             C      	inx	h		;HL = .cdrmax+1 
  DF89    7A             C      	mov	a,d		;hig(dcnt) - hig(cdrmax) 
  DF8A    9E             C      	sbb	m 
                         C      	;condition dcnt - cdrmax  produces cy if cdrmax>dcnt 
  DF8B    C9             C      	ret 
                         C       
  DF8C                   C      setcdr: 
                         C      	;if not (cdrmax > dcnt) then cdrmax = dcnt+1 
  DF8C    CD DF7F        C      	call	compcdr 
  DF8F    D8             C      	rc			;return if cdrmax > dcnt 
                         C      	;otherwise, HL = .cdrmax+1, DE = dcnt 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-53


  DF90    13             C      	inx	d 
  DF91    72             C      	mov	m,d 
  DF92    2B             C      	dcx	h 
  DF93    73             C      	mov	m,e 
  DF94    C9             C      	ret 
                         C       
  DF95                   C      subdh: 
                         C      	;compute HL = DE - HL 
  DF95    7B             C      	mov	a,e 
  DF96    95             C      	sub	l 
  DF97    6F             C      	mov	l,a 
  DF98    7A             C      	mov	a,d 
  DF99    9C             C      	sbb	h 
  DF9A    67             C      	mov	h,a 
  DF9B    C9             C      	ret 
                         C       
  DF9C                   C      newchecksum: 
  DF9C    0E FF          C      	mvi	c,_true		;drop through to compute new checksum 
  DF9E                   C      checksum: 
                         C      	;compute current checksum record and update the 
                         C      	;directory element if C=true, or check for = if not 
                         C      	;drec < chksiz? 
  DF9E    2A E7EC        C      	lhld	drec		;DE-HL 
  DFA1    EB             C      	xchg 
  DFA2    2A E7CC        C      	lhld	chksiz 
  DFA5    CD DF95        C      	call	subdh 
  DFA8    D0             C      	rnc			;skip checksum if past checksum vector size 
                         C      	;drec < chksiz, so continue 
  DFA9    C5             C      	push	b		;save init flag 
  DFAA    CD DEF7        C      	call	compute_cs	;check sum value to A 
  DFAD    2A E7BD        C      	lhld	checka		;address of check sum vector 
  DFB0    EB             C      	xchg 
  DFB1    2A E7EC        C      	lhld	drec		;value of drec 
  DFB4    19             C      	dad	d		;HL = .check(drec) 
  DFB5    C1             C      	pop	b		;recall true=0ffh or false=00 to C 
  DFB6    0C             C      	inr	c		;0ffh produces zero flag 
  DFB7    CA DFC4        C      	jz	initial_cs 
                         C      	;not initializing, compare 
  DFBA    BE             C      	cmp	m		;compute_cs=check(drec)? 
  DFBB    C8             C      	rz			;no message if ok 
                         C      	;checksum error, are we beyond 
                         C      	;the end of the disk? 
  DFBC    CD DF7F        C      	call	compcdr 
  DFBF    D0             C      	rnc			;no message if so 
  DFC0    CD DF2C        C      	call	set_ro		;read/only disk set 
  DFC3    C9             C      	ret 
  DFC4                   C      initial_cs: 
                         C      	;initializing the checksum 
  DFC4    77             C      	mov	m,a 
  DFC5    C9             C      	ret 
                         C       
                         C       
  DFC6                   C      wrdir: 
                         C      	;write the current directory entry, set checksum 
  DFC6    CD DF9C        C      	call	newchecksum	;initialize entry 
  DFC9    CD DFE0        C      	call	setdir		;directory dma 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-54


  DFCC    0E 01          C      	mvi	c,1		;indicates a write directory operation 
  DFCE    CD DDB8        C      	call	wrbuff		;write the buffer 
  DFD1    C3 DFDA        C              jmp	setdata		;to data dma address 
                         C      	;ret 
                         C       
  DFD4                   C      rd_dir: 
                         C      	;read a directory entry into the directory buffer 
  DFD4    CD DFE0        C      	call	setdir		;directory dma 
  DFD7    CD DDB2        C      	call	rdbuff		;directory record loaded 
                         C              ; jmp setdata to data dma address     
                         C      	;ret 
                         C       
  DFDA                   C      setdata: 
                         C      	;set data dma address 
  DFDA    21 E7B1        C      	lxi	h,dmaad		;to complete the call 
  DFDD    C3 DFE3        C      	jmp	_setdma 
                         C       
  DFE0                   C      setdir: 
                         C      	;set directory dma address 
  DFE0    21 E7B9        C      	lxi	h,buffa		;jmp _setdma to complete call      
                         C       
  DFE3                   C      _setdma: 
                         C      	;HL=.dma address to set (i.e., buffa or dmaad) 
  DFE3    4E             C      	mov	c,m		;parameter ready 
  DFE4    23             C      	inx	h 
  DFE5    46             C      	mov	b,m 
  DFE6    C3 E824        C      	jmp	setdmaf 
                         C       
                         C       
  DFE9                   C      dir_to_user: 
                         C      	;copy the directory entry to the user buffer 
                         C      	;after call to search or searchn by user code 
  DFE9    2A E7B9        C      	lhld	buffa		;source is directory buffer 
  DFEC    EB             C      	xchg 
  DFED    2A E7B1        C      	lhld	dmaad		;destination is user dma address 
  DFF0    0E 80          C      	mvi	c,recsiz	;copy entire record 
  DFF2    C3 DD4F        C      	jmp	move 
                         C      	;ret 
                         C       
  DFF5                   C      end_of_dir: 
                         C      	;return zero flag if at end of directory, non zero 
                         C      	;if not at end (end of dir if dcnt = 0ffffh) 
  DFF5    21 E7EA        C      	lxi	h,dcnt		;may be 0ffh 
  DFF8    7E             C      	mov	a,m 
  DFF9    23             C      	inx	h		;low(dcnt) = high(dcnt)? 
  DFFA    BE             C      	cmp	m 
  DFFB    C0             C      	rnz			;non zero returned if different 
                         C      	;high and low the same, = 0ffh? 
  DFFC    3C             C      	inr	a		;0ffh becomes 00 if so 
  DFFD    C9             C      	ret 
                         C       
  DFFE                   C      set_end_dir: 
                         C      	;set dcnt to the end of the directory 
  DFFE    21 FFFF        C      	lxi	h,enddir 
  E001    22 E7EA        C      	shld	dcnt 
  E004    C9             C      	ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-55


                         C       
  E005                   C      read_dir: 
                         C      	;read next directory entry, with C=true if initializing 
  E005    2A E7C8        C      	lhld	dirmax		;in preparation for subtract 
  E008    EB             C      	xchg 
  E009    2A E7EA        C      	lhld	dcnt		;dcnt=dcnt+1 
  E00C    23             C      	inx	h 
  E00D    22 E7EA        C      	shld	dcnt 
                         C      	;continue while dirmax >= dcnt (dirmax-dcnt no cy) 
  E010    CD DF95        C      	call	subdh		;DE-HL 
  E013    D2 E019        C      	jnc	read_dir0 
                         C      	;yes, set dcnt to end of directory 
  E016    C3 DFFE        C      	jmp	set_end_dir 
                         C      ;		ret 
  E019                   C      read_dir0: 
                         C      	;not at end of directory, seek next element 
                         C      	;initialization flag is in C 
  E019    3A E7EA        C      	lda	dcnt		;low(dcnt) and dskmsk 
  E01C    E6 03          C      	ani	dskmsk 
  E01E    06 05          C      	mvi	b,fcbshf	;to multiply by fcb size 
  E020                   C      read_dir1: 
  E020    87             C      	add	a 
  E021    05             C      	dcr	b 
  E022    C2 E020        C      	jnz	read_dir1 
                         C      	;A = (low(dcnt) and dskmsk) shl fcbshf 
  E025    32 E7E9        C      	sta	dptr		;ready for next dir operation 
  E028    B7             C      	ora	a		;return if not a new record 
  E029    C0             C      	rnz 
  E02A    C5             C      	push	b		;save initialization flag C 
  E02B    CD DDC3        C      	call	seek_dir	;seek proper record 
  E02E    CD DFD4        C      	call	rd_dir		;read the directory record 
  E031    C1             C      	pop	b		;recall initialization flag 
  E032    C3 DF9E        C      	jmp	checksum	;checksum the directory elt 
                         C      	;ret 
                         C       
                         C       
  E035                   C      getallocbit: 
                         C      	;given allocation vector position BC, return with byte 
                         C      	;containing BC shifted so that the least significant 
                         C      	;bit is in the low order accumulator position.  HL is 
                         C      	;the address of the byte for possible replacement in 
                         C      	;memory upon return, and D contains the number of shifts 
                         C      	;required to place the returned value back into position 
  E035    79             C      	mov	a,c 
  E036    E6 07          C      	ani	111b 
  E038    3C             C      	inr	a 
  E039    5F             C      	mov	e,a 
  E03A    57             C      	mov	d,a 
                         C      	;d and e both contain the number of bit positions to shift 
  E03B    79             C      	mov	a,c		;C shr 3 to C 
  E03C    0F             C      	rrc 
  E03D    0F             C      	rrc 
  E03E    0F             C      	rrc 
  E03F    E6 1F          C      	ani	11111b 
  E041    4F             C      	mov	c,a 
  E042    78             C      	mov	a,b		;B shl 5 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-56


  E043    87             C      	add	a 
  E044    87             C      	add	a 
  E045    87             C      	add	a 
  E046    87             C      	add	a 
  E047    87             C      	add	a 
  E048    B1             C      	ora	c		;bbbccccc to C 
  E049    4F             C      	mov	c,a 
  E04A    78             C      	mov	a,b		;BC shr 3 to BC 
  E04B    0F             C      	rrc 
  E04C    0F             C      	rrc 
  E04D    0F             C      	rrc 
  E04E    E6 1F          C      	ani	11111b 
  E050    47             C      	mov	b,a 
  E051    2A E7BF        C      	lhld	alloca		;base address of allocation vector 
  E054    09             C      	dad	b		;byte to A, hl = .alloc(BC shr 3) 
  E055    7E             C      	mov	a,m 
                         C      	;now move the bit to the low order position of A 
  E056    07             C      rotl:	rlc 
  E057    1D             C      	dcr	e 
  E058    C2 E056        C      	jnz	rotl 
  E05B    C9             C      	ret 
                         C       
                         C       
  E05C                   C      set_alloc_bit: 
                         C      	;BC is the bit position of ALLOC to set or reset.  The 
                         C      	;value of the bit is in register E. 
  E05C    D5             C      	push	d		;shifted val A, count in D 
  E05D    CD E035        C      	call	getallocbit 
  E060    E6 FE          C      	ani	11111110b	;mask low bit to zero (may be set) 
  E062    C1             C      	pop	b		;low bit of C is masked into A 
  E063    B1             C      	ora	c 
                         C      ;	jmp rotr ;to rotate back into proper position	 
                         C      	;ret 
  E064                   C      rotr: 
                         C      	;byte value from ALLOC is in register A, with shift count 
                         C      	;in register C (to place bit back into position), and 
                         C      	;target ALLOC position in registers HL, rotate and replace 
  E064    0F             C      	rrc			;back into position 
  E065    15             C      	dcr	d 
  E066    C2 E064        C      	jnz	rotr  
  E069    77             C      	mov	m,a		;back to ALLOC 
  E06A    C9             C      	ret 
                         C       
  E06B                   C      scandm: 
                         C      	;scan the disk map addressed by dptr for non-zero 
                         C      	;entries, the allocation vector entry corresponding 
                         C      	;to a non-zero entry is set to the value of C (0,1) 
  E06B    CD DF5E        C      	call	getdptra	;HL = buffa + dptr 
                         C      	;HL addresses the beginning of the directory entry 
  E06E    11 0010        C      	lxi	d,dskmap	;hl now addresses the disk map 
  E071    19             C      	dad	d 
  E072    C5             C      	push	b		;save the 0/1 bit to set 
  E073    0E 11          C      	mvi	c,fcblen-dskmap+1	;size of single byte disk map + 1 
  E075                   C      scandm0: 
                         C      	;loop once for each disk map entry 
  E075    D1             C      	pop	d		;recall bit parity 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-57


  E076    0D             C      	dcr	c		;all done scanning? 
  E077    C8             C      	rz 
                         C      	;no, get next entry for scan 
  E078    D5             C      	push	d		;replace bit parity 
  E079    3A E7DD        C      	lda	single 
  E07C    B7             C      	ora	a 
  E07D    CA E088        C      	jz	scandm1 
                         C      	;single byte scan operation 
  E080    C5             C      	push	b		;save counter 
  E081    E5             C      	push	h		;save map address 
  E082    4E             C      	mov	c,m		;BC=block# 
  E083    06 00          C      	mvi	b,0 
  E085    C3 E08E        C      	jmp	scandm2 
  E088                   C      scandm1: 
                         C      	;double byte scan operation 
  E088    0D             C      	dcr	c		;count for double byte 
  E089    C5             C      	push	b		;save counter 
  E08A    4E             C      	mov	c,m		;BC=block# 
  E08B    23             C      	inx	h 
  E08C    46             C      	mov	b,m 
  E08D    E5             C      	push	h		;save map address 
  E08E                   C      scandm2: 
                         C      	;arrive here with BC=block#, E=0/1 
  E08E    79             C      	mov	a,c		;skip if = 0000 
  E08F    B0             C      	ora	b 
  E090    CA E09D        C      	jz	scanm3 
  E093    2A E7C6        C      	lhld	maxall		;check invalid index 
  E096    7D             C      	mov	a,l		;maxall - block# 
  E097    91             C      	sub	c 
  E098    7C             C      	mov	a,h 
  E099    98             C      	sbb	b 
  E09A    D4 E05C        C      	cnc	set_alloc_bit 
                         C      	;bit set to 0/1 
  E09D                   C      scanm3: 
  E09D    E1             C      	pop	h		;to next bit position 
  E09E    23             C      	inx	h 
  E09F    C1             C      	pop	b		;recall counter 
  E0A0    C3 E075        C      	jmp	scandm0		;for another item 
                         C       
  E0A3                   C      initialize: 
                         C      	;initialize the current disk 
                         C      	;lret = false ;set to true if $ file exists 
                         C      	;compute the length of the allocation vector - 2 
  E0A3    2A E7C6        C      	lhld	maxall		;perform maxall/8 
  E0A6    0E 03          C      	mvi	c,3 
                         C      	;number of bytes in alloc vector is (maxall/8)+1 
  E0A8    CD DEEA        C      	call	hlrotr		;HL = maxall/8+1 
  E0AB    23             C      	inx	h 
  E0AC    44             C      	mov	b,h		;count down BC til zero 
  E0AD    4D             C      	mov	c,l 
  E0AE    2A E7BF        C      	lhld	alloca		;base of allocation vector 
                         C      	;fill the allocation vector with zeros 
  E0B1                   C      initial0: 
  E0B1    36 00          C      	mvi	m,0		;alloc(i)=0 
  E0B3    23             C      	inx	h 
  E0B4    0B             C      	dcx	b		;count length down 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-58


  E0B5    78             C      	mov	a,b 
  E0B6    B1             C      	ora	c 
  E0B7    C2 E0B1        C      	jnz	initial0 
                         C      	;set the reserved space for the directory 
  E0BA    2A E7CA        C      	lhld	dirblk 
  E0BD    EB             C      	xchg 
  E0BE    2A E7BF        C      	lhld	alloca		;HL=.alloc() 
  E0C1    73             C      	mov	m,e		;sets reserved directory blks 
  E0C2    23             C      	inx	h 
  E0C3    72             C      	mov	m,d 
                         C      	;allocation vector initialized, home disk 
  E0C4    CD DDA1        C      	call	home 
                         C              ;cdrmax = 3 (scans at least one directory record) 
  E0C7    2A E7B3        C      	lhld	cdrmaxa 
  E0CA    36 03          C      	mvi	m,3 
  E0CC    23             C      	inx	h 
  E0CD    36 00          C      	mvi	m,0 
                         C      	;cdrmax = 0000 
  E0CF    CD DFFE        C      	call	set_end_dir	;dcnt = enddir 
                         C      	;read directory entries and check for allocated storage 
  E0D2                   C      initial2: 
  E0D2    0E FF          C      	mvi	c,_true 
  E0D4    CD E005        C      	call	read_dir 
  E0D7    CD DFF5        C      	call	end_of_dir	;return if end of directory 
  E0DA    C8             C      	rz 
                         C      	;not end of directory, valid entry? 
  E0DB    CD DF5E        C      	call	getdptra	;HL = buffa + dptr 
  E0DE    3E E5          C      	mvi	a,empty 
  E0E0    BE             C      	cmp	m 
  E0E1    CA E0D2        C      	jz	initial2	;go get another item 
                         C      	;not empty, user code the same? 
  E0E4    3A DD41        C      	lda	usrcode 
  E0E7    BE             C      	cmp	m 
  E0E8    C2 E0F6        C      	jnz	pdollar 
                         C      	;same user code, check for '$' submit 
  E0EB    23             C      	inx	h		;first character 
  E0EC    7E             C      	mov	a,m 
  E0ED    D6 24          C      	sui	'$'		;dollar file? 
  E0EF    C2 E0F6        C      	jnz	pdollar 
                         C      	;dollar file found, mark in lret 
  E0F2    3D             C      	dcr	a		;lret = 255 
  E0F3    32 DD45        C      	sta	lret 
  E0F6                   C      pdollar: 
                         C      	;now scan the disk map for allocated blocks 
  E0F6    0E 01          C      	mvi	c,1		;set to allocated 
  E0F8    CD E06B        C      	call	scandm 
  E0FB    CD DF8C        C      	call	setcdr		;set cdrmax to dcnt 
  E0FE    C3 E0D2        C      	jmp	initial2	;for another entry 
                         C       
  E101                   C      copy_dirloc: 
                         C      	;copy directory location to lret following 
                         C      	;delete, rename, ... ops 
  E101    3A E7D4        C      	lda	dirloc 
  E104    C3 DD01        C      	jmp	sta_ret 
                         C      ;	ret 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-59


  E107                   C      compext: 
                         C      	;compare extent# in A with that in C, return nonzero 
                         C      	;if they do not match 
  E107    C5             C      	push	b		;save C's original value 
  E108    F5             C      	push	psw 
  E109    3A E7C5        C      	lda	extmsk 
  E10C    2F             C      	cma 
  E10D    47             C      	mov	b,a 
                         C      	;B has negated form of extent mask 
  E10E    79             C      	mov	a,c		;low bits removed from C 
  E10F    A0             C      	ana	b 
  E110    4F             C      	mov	c,a 
  E111    F1             C      	pop	psw		;low bits removed from A 
  E112    A0             C      	ana	b 
  E113    91             C      	sub	c		;set flags 
  E114    E6 1F          C      	ani	maxext 
  E116    C1             C      	pop	b		;restore original values 
  E117    C9             C      	ret 
                         C       
  E118                   C      search: 
                         C      	;search for directory element of length C at info 
  E118    3E FF          C      	mvi	a,0ffh		;changed if actually found 
  E11A    32 E7D4        C      	sta	dirloc 
  E11D    21 E7D8        C      	lxi	h,searchl	;searchl = C 
  E120    71             C      	mov	m,c 
  E121    2A DD43        C      	lhld	info		;searcha = info 
  E124    22 E7D9        C      	shld	searcha 
  E127    CD DFFE        C      	call	set_end_dir	;dcnt = enddir 
  E12A    CD DDA1        C      	call	home		;to start at the beginning 
                         C      	;(drop through to searchn) 
                         C       
  E12D                   C      searchn: 
                         C      	;search for the next directory element, assuming 
                         C      	;a previous call on search which sets searcha and 
                         C      	;searchl 
  E12D    0E 00          C      	mvi	c,_false	;read next dir element 
  E12F    CD E005        C      	call	read_dir 
  E132    CD DFF5        C      	call	end_of_dir	;skip to end if so 
  E135    CA E194        C      	jz	search_fin 
                         C      	;not end of directory, scan for match 
  E138    2A E7D9        C      	lhld	searcha		;DE=beginning of user fcb 
  E13B    EB             C      	xchg 
  E13C    1A             C      	ldax	d		;first character 
  E13D    FE E5          C      	cpi	empty		;keep scanning if empty 
  E13F    CA E14A        C      	jz	searchnext 
                         C      	;not empty, may be end of logical directory 
  E142    D5             C      	push	d		;save search address 
  E143    CD DF7F        C      	call	compcdr		;past logical end? 
  E146    D1             C      	pop	d		;recall address 
  E147    D2 E194        C      	jnc	search_fin	;artificial stop 
  E14A                   C      searchnext: 
  E14A    CD DF5E        C      	call	getdptra	;HL = buffa+dptr 
  E14D    3A E7D8        C      	lda	searchl		;length of search to c 
  E150    4F             C      	mov	c,a 
  E151    06 00          C      	mvi	b,0		;b counts up, c counts down 
  E153                   C      searchloop: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-60


  E153    79             C      	mov	a,c 
  E154    B7             C      	ora	a 
  E155    CA E183        C      	jz	endsearch 
  E158    1A             C      	ldax	d		;? matches all 
  E159    FE 3F          C      	cpi	'?' 
  E15B    CA E17C        C      	jz	searchok 
                         C      	;scan next character if not ubytes 
  E15E    78             C      	mov	a,b 
  E15F    FE 0D          C      	cpi	ubytes 
  E161    CA E17C        C      	jz	searchok 
                         C      	;not the ubytes field, extent field? 
  E164    FE 0C          C      	cpi	extnum		;may be extent field 
  E166    1A             C      	ldax	d		;fcb character 
  E167    CA E173        C      	jz	searchext	;skip to search extent 
  E16A    96             C      	sub	m		;mask-out flags/extent modulus 
  E16B    E6 7F          C      	ani	7fh 
  E16D    C2 E12D        C      	jnz	searchn		;skip if not matched 
  E170    C3 E17C        C      	jmp	searchok	;matched character 
  E173                   C      searchext: 
                         C      	;A has fcb character 
                         C      	;attempt an extent # match 
  E173    C5             C      	push	b		;save counters 
  E174    4E             C      	mov	c,m		;directory character to c 
  E175    CD E107        C      	call	compext		;compare user/dir char 
  E178    C1             C      	pop	b		;recall counters 
  E179    C2 E12D        C      	jnz	searchn		;skip if no match 
  E17C                   C      searchok: 
                         C      	;current character matches 
  E17C    13             C      	inx	d 
  E17D    23             C      	inx	h 
  E17E    04             C      	inr	b 
  E17F    0D             C      	dcr	c 
  E180    C3 E153        C      	jmp	searchloop 
  E183                   C      endsearch: 
                         C      	;entire name matches, return dir position 
  E183    3A E7EA        C      	lda	dcnt 
  E186    E6 03          C      	ani	dskmsk 
  E188    32 DD45        C      	sta	lret 
                         C      	;lret = low(dcnt) and 11b 
  E18B    21 E7D4        C      	lxi	h,dirloc	;dirloc=0ffh? 
  E18E    7E             C      	mov	a,m 
  E18F    17             C      	ral 
  E190    D0             C      	rnc 
                         C      	;yes, change it to 0 to mark as found 
  E191    AF             C      	xra	a		;dirloc=0 
  E192    77             C      	mov	m,a 
  E193    C9             C      	ret 
  E194                   C      search_fin: 
                         C      	;end of directory, or empty name 
  E194    CD DFFE        C      	call	set_end_dir	;may be artifical end 
  E197    3E FF          C      	mvi	a,255 
  E199    C3 DD01        C      	jmp	sta_ret 
                         C       
                         C       
  E19C                   C      delete: 
                         C      	;delete the currently addressed file 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-61


  E19C    CD DF54        C      	call	check_write	;write protected? 
  E19F    0E 0C          C      	mvi	c,extnum	;search through file type 
  E1A1    CD E118        C      	call	search 
  E1A4                   C      delete0: 
                         C      	;loop while directory matches 
  E1A4    CD DFF5        C      	call	end_of_dir	;stop if end 
  E1A7    C8             C      	rz 
                         C      	;set each non zero disk map entry to 0 
                         C      	;in the allocation vector 
                         C      	;may be r/o file 
  E1A8    CD DF44        C      	call	check_rodir	;ro disk error if found 
  E1AB    CD DF5E        C      	call	getdptra	;HL=.buff(dptr) 
  E1AE    36 E5          C      	mvi	m,empty 
  E1B0    0E 00          C      	mvi	c,0		;alloc elts set to 0 
  E1B2    CD E06B        C      	call	scandm 
  E1B5    CD DFC6        C      	call	wrdir		;write the directory 
  E1B8    CD E12D        C      	call	searchn		;to next element 
  E1BB    C3 E1A4        C      	jmp	delete0		;for another record 
                         C       
  E1BE                   C      get_block: 
                         C      	;given allocation vector position BC, find the zero bit 
                         C      	;closest to this position by searching left and right. 
                         C      	;if found, set the bit to one and return the bit position 
                         C      	;in hl.  if not found (i.e., we pass 0 on the left, or 
                         C      	;maxall on the right), return 0000 in hl 
  E1BE    50             C      	mov	d,b		;copy of starting position to de 
  E1BF    59             C      	mov	e,c 
  E1C0                   C      lefttst: 
  E1C0    79             C      	mov	a,c		;skip if left=0000 
  E1C1    B0             C      	ora	b 
  E1C2    CA E1D1        C      	jz	righttst 
                         C      	;left not at position zero, bit zero? 
  E1C5    0B             C      	dcx	b		;left,right pushed 
  E1C6    D5             C      	push	d 
  E1C7    C5             C      	push	b 
  E1C8    CD E035        C      	call	getallocbit 
  E1CB    1F             C      	rar			;return block number if zero 
  E1CC    D2 E1EC        C      	jnc	retblock 
                         C      	;bit is one, so try the right 
  E1CF    C1             C      	pop	b		;left, right restored 
  E1D0    D1             C      	pop	d 
  E1D1                   C      righttst: 
  E1D1    2A E7C6        C      	lhld	maxall		;value of maximum allocation# 
  E1D4    7B             C      	mov	a,e		;right=maxall? 
  E1D5    95             C      	sub	l 
  E1D6    7A             C      	mov	a,d 
  E1D7    9C             C      	sbb	h 
  E1D8    D2 E1F4        C      	jnc	retblock0	;return block 0000 if so 
  E1DB    13             C      	inx	d		;left, right pushed 
  E1DC    C5             C      	push	b 
  E1DD    D5             C      	push	d 
  E1DE    42             C      	mov	b,d		;ready right for call 
  E1DF    4B             C      	mov	c,e 
  E1E0    CD E035        C      	call	getallocbit 
  E1E3    1F             C      	rar			;return block number if zero 
  E1E4    D2 E1EC        C      	jnc	retblock 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-62


  E1E7    D1             C      	pop	d		;restore left and right pointers 
  E1E8    C1             C      	pop	b 
  E1E9    C3 E1C0        C      	jmp	lefttst ;for another attempt 
  E1EC                   C      retblock: 
  E1EC    17             C      	ral			;bit back into position and set to 1 
  E1ED    3C             C      	inr	a 
                         C      	;d contains the number of shifts required to reposition 
  E1EE    CD E064        C      	call	rotr		;move bit back to position and store 
  E1F1    E1             C      	pop	h		;HL returned value, DE discarded 
  E1F2    D1             C      	pop	d 
  E1F3    C9             C      	ret 
  E1F4                   C      retblock0: 
                         C      	;cannot find an available bit, return 0000 
  E1F4    79             C      	mov	a,c		; 
  E1F5    B0             C      	ora	b		;also at beginning 
  E1F6    C2 E1C0        C      	jnz	lefttst 
  E1F9    21 0000        C      	lxi	h,0000h 
  E1FC    C9             C      	ret 
                         C       
  E1FD                   C      copy_fcb: 
                         C      	;copy the entire file control block 
  E1FD    0E 00          C      	mvi	c,0		;start at 0, to fcblen-1 
  E1FF    1E 20          C      	mvi	e,fcblen 
                         C      	;	jmp copy_dir 
                         C       
  E201                   C      copy_dir: 
                         C      	;copy fcb information starting at C for E bytes 
                         C      	;into the currently addressed directory entry 
  E201    D5             C      	push	d		;save length for later 
  E202    06 00          C      	mvi	b,0		;double index to BC 
  E204    2A DD43        C      	lhld	info		;HL = source for data 
  E207    09             C      	dad	b		;DE=.fcb(C), source for copy 
  E208    EB             C      	xchg 
  E209    CD DF5E        C      	call	getdptra	;HL=.buff(dptr), destination 
  E20C    C1             C      	pop	b		;DE=source, HL=dest, C=length 
  E20D    CD DD4F        C      	call	move		;data moved 
  E210                   C      seek_copy: 
                         C      	;enter from close to seek and copy current element 
  E210    CD DDC3        C      	call	seek_dir	;to the directory element 
  E213    C3 DFC6        C      	jmp	wrdir		;write the directory element 
                         C      	;ret 
                         C       
                         C       
  E216                   C      rename: 
                         C      	;rename the file described by the first half of 
                         C      	;the currently addressed file control block. the 
                         C      	;new name is contained in the last half of the 
                         C      	;currently addressed file conrol block.  the file 
                         C      	;name and type are changed, but the reel number 
                         C      	;is ignored.  the user number is identical 
  E216    CD DF54        C      	call	check_write	;may be write protected 
                         C      	;search up to the extent field 
  E219    0E 0C          C      	mvi	c,extnum 
  E21B    CD E118        C      	call	search 
                         C      	;copy position 0 
  E21E    2A DD43        C      	lhld	info		;HL=.fcb(0), A=fcb(0) 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-63


  E221    7E             C      	mov	a,m 
  E222    11 0010        C      	lxi	d,dskmap	;HL=.fcb(dskmap) 
  E225    19             C      	dad	d 
  E226    77             C      	mov	m,a		;fcb(dskmap)=fcb(0) 
                         C      	;assume the same disk drive for new named file 
  E227                   C      rename0: 
  E227    CD DFF5        C      	call	end_of_dir	;stop at end of dir 
  E22A    C8             C      	rz 
                         C      	;not end of directory, rename next element 
  E22B    CD DF44        C      	call	check_rodir	;may be read-only file 
  E22E    0E 10          C      	mvi	c,dskmap 
  E230    1E 0C          C      	mvi	e,extnum 
  E232    CD E201        C      	call	copy_dir 
                         C      	;element renamed, move to next 
  E235    CD E12D        C      	call	searchn 
  E238    C3 E227        C      	jmp	rename0 
                         C       
  E23B                   C      indicators: 
                         C      	;set file indicators for current fcb 
  E23B    0E 0C          C      	mvi	c,extnum	;through file type 
  E23D    CD E118        C      	call	search 
  E240                   C      indic0: 
  E240    CD DFF5        C      	call	end_of_dir	;stop at end of dir 
  E243    C8             C      	rz 
                         C      	;not end of directory, continue to change 
  E244    0E 00          C      	mvi	c,0		;copy name 
  E246    1E 0C          C      	mvi	e,extnum 
  E248    CD E201        C      	call	copy_dir 
  E24B    CD E12D        C      	call	searchn 
  E24E    C3 E240        C      	jmp	indic0 
                         C       
  E251                   C      open: 
                         C      	;search for the directory entry, copy to fcb 
  E251    0E 0F          C      	mvi	c,namlen 
  E253    CD E118        C      	call	search 
  E256    CD DFF5        C      	call	end_of_dir	;return with lret=255 if end 
  E259    C8             C      	rz 
                         C      	;not end of directory, copy fcb information 
  E25A                   C      open_copy: 
                         C      	;(referenced below to copy fcb info) 
  E25A    CD DEA6        C      	call	getexta		;save extent# 
  E25D    7E             C      	mov	a,m 
  E25E    F5             C      	push	psw 
  E25F    E5             C      	push	h 
  E260    CD DF5E        C      	call	getdptra	;DE = .buff(dptr) 
  E263    EB             C      	xchg 
  E264    2A DD43        C      	lhld	info		;HL=.fcb(0) 
  E267    0E 20          C      	mvi	c,nxtrec	;length of move operation 
  E269    D5             C      	push	d		;save .buff(dptr) 
  E26A    CD DD4F        C      	call	move		;from .buff(dptr) to .fcb(0) 
                         C      	;note that entire fcb is copied, including indicators 
  E26D    CD DF78        C      	call	setfwf		;sets file write flag 
  E270    D1             C      	pop	d		;HL=.buff(dptr+extnum) 
  E271    21 000C        C      	lxi	h,extnum 
  E274    19             C      	dad	d 
  E275    4E             C      	mov	c,m		;C = directory extent number 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-64


  E276    21 000F        C      	lxi	h,reccnt	;HL=.buff(dptr+reccnt) 
  E279    19             C      	dad	d 
  E27A    46             C      	mov	b,m		;B holds directory record count 
  E27B    E1             C      	pop	h		;restore extent number 
  E27C    F1             C      	pop	psw 
  E27D    77             C      	mov	m,a 
                         C      	;HL = .user extent#, B = dir rec cnt, C = dir extent# 
                         C      	;if user ext < dir ext then user := 128 records 
                         C      	;if user ext = dir ext then user := dir records 
                         C      	;if user ext > dir ext then user := 0 records 
  E27E    79             C      	mov	a,c		;ready dir reccnt 
  E27F    BE             C      	cmp	m 
  E280    78             C      	mov	a,b 
  E281    CA E28B        C      	jz	open_rcnt	;if same, user gets dir reccnt 
  E284    3E 00          C      	mvi	a,0		;user is larger 
  E286    DA E28B        C      	jc	open_rcnt 
  E289    3E 80          C      	mvi	a,128		;directory is larger 
  E28B                   C      open_rcnt: ;A has record count to fill 
  E28B    2A DD43        C      	lhld	info 
  E28E    11 000F        C      	lxi	d,reccnt 
  E291    19             C      	dad	d 
  E292    77             C      	mov	m,a 
  E293    C9             C      	ret 
                         C       
  E294                   C      mergezero: 
                         C      	;HL = .fcb1(i), DE = .fcb2(i), 
                         C      	;if fcb1(i) = 0 then fcb1(i) := fcb2(i) 
  E294    7E             C      	mov	a,m		;return if = 0000 
  E295    23             C      	inx	h 
  E296    B6             C      	ora	m 
  E297    2B             C      	dcx	h 
  E298    C0             C      	rnz 
  E299    1A             C      	ldax	d		;low byte copied 
  E29A    77             C      	mov	m,a 
  E29B    13             C      	inx	d 
  E29C    23             C      	inx	h 
  E29D    1A             C      	ldax	d		;back to input form 
  E29E    77             C      	mov	m,a 
  E29F    1B             C      	dcx	d 
  E2A0    2B             C      	dcx	h 
  E2A1    C9             C      	ret 
                         C       
  E2A2                   C      close: 
                         C      	;locate the directory element and re-write it 
  E2A2    AF             C      	xra	a 
  E2A3    32 DD45        C      	sta	lret 
  E2A6    32 E7EA        C      	sta	dcnt 
  E2A9    32 E7EB        C      	sta	dcnt+1 
  E2AC    CD DF1E        C      	call	nowrite		;skip close if r/o disk 
  E2AF    C0             C      	rnz 
                         C      	;check file write flag - 0 indicates written 
  E2B0    CD DF69        C      	call	getmodnum	;fcb(modnum) in A 
  E2B3    E6 80          C      	ani	fwfmsk		;return if bit remains set 
  E2B5    C0             C      	rnz 
  E2B6    0E 0F          C      	mvi	c,namlen	;locate file 
  E2B8    CD E118        C      	call	search 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-65


  E2BB    CD DFF5        C      	call	end_of_dir	;return if not found 
  E2BE    C8             C      	rz 
                         C      	;merge the disk map at info with that at buff(dptr) 
  E2BF    01 0010        C      	lxi	b,dskmap 
  E2C2    CD DF5E        C      	call	getdptra 
  E2C5    09             C      	dad	b		;DE is .buff(dptr+16) 
  E2C6    EB             C      	xchg 
  E2C7    2A DD43        C      	lhld	info		;DE=.buff(dptr+16), HL=.fcb(16) 
  E2CA    09             C      	dad	b 
  E2CB    0E 10          C      	mvi	c,(fcblen-dskmap)	;length of single byte dm 
  E2CD                   C      merge0: 
  E2CD    3A E7DD        C      	lda	single		;skip to double 
  E2D0    B7             C      	ora	a 
  E2D1    CA E2E8        C      	jz	merged 
                         C      	;this is a single byte map 
                         C      	;if fcb(i) = 0 then fcb(i) = buff(i) 
                         C      	;if buff(i) = 0 then buff(i) = fcb(i) 
                         C      	;if fcb(i) <> buff(i) then error 
  E2D4    7E             C      	mov	a,m 
  E2D5    B7             C      	ora	a 
  E2D6    1A             C      	ldax	d 
  E2D7    C2 E2DB        C      	jnz	fcbnzero 
                         C      	;fcb(i) = 0 
  E2DA    77             C      	mov	m,a		;fcb(i) = buff(i) 
  E2DB                   C      fcbnzero: 
  E2DB    B7             C      	ora	a 
  E2DC    C2 E2E1        C      	jnz	buffnzero 
                         C      	;buff(i) = 0 
  E2DF    7E             C      	mov	a,m		;buff(i)=fcb(i) 
  E2E0    12             C      	stax	d 
  E2E1                   C      buffnzero: 
  E2E1    BE             C      	cmp	m		;fcb(i) = buff(i)? 
  E2E2    C2 E31F        C      	jnz	mergerr 
  E2E5    C3 E2FD        C      	jmp	dmset		;if merge ok 
  E2E8                   C      merged: 
                         C      	;this is a double byte merge operation 
  E2E8    CD E294        C      	call	mergezero	;buff = fcb if buff 0000 
  E2EB    EB             C      	xchg			;fcb = buff if fcb 0000 
  E2EC    CD E294        C      	call	mergezero 
  E2EF    EB             C      	xchg 
                         C      	;they should be identical at this point 
  E2F0    1A             C      	ldax	d		;low same? 
  E2F1    BE             C      	cmp	m 
  E2F2    C2 E31F        C      	jnz	mergerr 
  E2F5    13             C      	inx	d		;to high byte 
  E2F6    23             C      	inx	h 
  E2F7    1A             C      	ldax	d		;high same? 
  E2F8    BE             C      	cmp	m 
  E2F9    C2 E31F        C      	jnz	mergerr 
                         C      	;merge operation ok for this pair 
  E2FC    0D             C      	dcr	c		;extra count for double byte 
  E2FD                   C      dmset: 
  E2FD    13             C      	inx	d		;to next byte position 
  E2FE    23             C      	inx	h 
  E2FF    0D             C      	dcr	c		;for more 
  E300    C2 E2CD        C      	jnz	merge0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-66


                         C      	;end of disk map merge, check record count 
                         C      	;DE = .buff(dptr)+32, HL = .fcb(32) 
  E303    01 FFEC        C      	lxi	b,-(fcblen-extnum) 
  E306    09             C      	dad	b 
  E307    EB             C      	xchg 
  E308    09             C      	dad	b 
                         C      	;DE = .fcb(extnum), HL = .buff(dptr+extnum) 
  E309    1A             C      	ldax	d		;current user extent number 
                         C      	;if fcb(ext) >= buff(fcb) then 
                         C      	;buff(ext) := fcb(ext), buff(rec) := fcb(rec) 
  E30A    BE             C      	cmp	m 
  E30B    DA E317        C      	jc	endmerge 
                         C      	;fcb extent number >= dir extent number 
  E30E    77             C      	mov	m,a		;buff(ext) = fcb(ext) 
                         C      	;update directory record count field 
  E30F    01 0003        C      	lxi	b,(reccnt-extnum) 
  E312    09             C      	dad	b 
  E313    EB             C      	xchg 
  E314    09             C      	dad	b 
                         C      	;DE=.buff(reccnt), HL=.fcb(reccnt) 
  E315    7E             C      	mov	a,m		;buff(reccnt)=fcb(reccnt) 
  E316    12             C      	stax	d 
  E317                   C      endmerge: 
  E317    3E FF          C      	mvi	a,_true		;mark as copied 
  E319    32 E7D2        C      	sta	fcb_copied 
  E31C    C3 E210        C      	jmp	seek_copy	;ok to "wrdir" here - 1.4 compat 
                         C      	;		ret 
  E31F                   C      mergerr: 
                         C      	;elements did not merge correctly 
  E31F    21 DD45        C      	lxi	h,lret		;=255 non zero flag set 
  E322    35             C      	dcr	m 
  E323    C9             C      	ret 
                         C       
  E324                   C      make: 
                         C      	;create a new file by creating a directory entry 
                         C      	;then opening the file 
  E324    CD DF54        C      	call	check_write	;may be write protected 
  E327    2A DD43        C      	lhld	info		;save fcb address, look for e5 
  E32A    E5             C      	push	h 
  E32B    21 E7AC        C      	lxi	h,efcb		;info = .empty 
  E32E    22 DD43        C      	shld	info 
  E331    0E 01          C      	mvi	c,1		;length 1 match on empty entry 
  E333    CD E118        C      	call	search 
  E336    CD DFF5        C      	call	end_of_dir	;zero flag set if no space 
  E339    E1             C      	pop	h		;recall info address 
  E33A    22 DD43        C      	shld	info		;in case we return here 
  E33D    C8             C      	rz			;return with error condition 255 if not found 
  E33E    EB             C      	xchg			;DE = info address 
                         C      	;clear the remainder of the fcb 
  E33F    21 000F        C      	lxi	h,namlen	;HL=.fcb(namlen) 
  E342    19             C      	dad	d 
  E343    0E 11          C      	mvi	c,fcblen-namlen	;number of bytes to fill 
  E345    AF             C      	xra	a		;clear accumulator to 00 for fill 
  E346                   C      make0: 
  E346    77             C      	mov	m,a 
  E347    23             C      	inx	h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-67


  E348    0D             C      	dcr	c 
  E349    C2 E346        C      	jnz	make0 
  E34C    21 000D        C      	lxi	h,ubytes	;HL = .fcb(ubytes) 
  E34F    19             C      	dad	d 
  E350    77             C      	mov	m,a		;fcb(ubytes) = 0 
  E351    CD DF8C        C      	call	setcdr		;may have extended the directory 
                         C      	;now copy entry to the directory 
  E354    CD E1FD        C      	call	copy_fcb 
                         C      	;and set the file write flag to "1" 
  E357    C3 DF78        C      	jmp	setfwf 
                         C      	;ret 
                         C       
  E35A                   C      open_reel: 
                         C      	;close the current extent, and open the next one 
                         C      	;if possible.  RMF is true if in read mode 
  E35A    AF             C      	xra	a		;set true if actually copied 
  E35B    32 E7D2        C      	sta	fcb_copied 
  E35E    CD E2A2        C      	call	close		;close current extent 
                         C      	;lret remains at enddir if we cannot open the next ext 
  E361    CD DFF5        C      	call	end_of_dir	;return if end 
  E364    C8             C      	rz 
                         C      	;increment extent number 
  E365    2A DD43        C      	lhld	info		;HL=.fcb(extnum) 
  E368    01 000C        C      	lxi	b,extnum 
  E36B    09             C      	dad	b 
  E36C    7E             C      	mov	a,m		;fcb(extnum)=++1 
  E36D    3C             C      	inr	a 
  E36E    E6 1F          C      	ani	maxext 
  E370    77             C      	mov	m,a 
  E371    CA E383        C      	jz	open_mod	;move to next module if zero 
                         C      	;may be in the same extent group 
  E374    47             C      	mov	b,a 
  E375    3A E7C5        C      	lda	extmsk 
  E378    A0             C      	ana	b 
                         C      	;if result is zero, then not in the same group 
  E379    21 E7D2        C      	lxi	h,fcb_copied	;true if the fcb was copied to directory 
  E37C    A6             C      	ana	m		;produces a 00 in accumulator if not written 
  E37D    CA E38E        C      	jz	open_reel0	;go to next physical extent 
                         C      	;result is non zero, so we must be in same logical ext 
  E380    C3 E3AC        C      	jmp	open_reel1	;to copy fcb information 
  E383                   C      open_mod: 
                         C      	;extent number overflow, go to next module 
  E383    01 0002        C      	lxi	b,(modnum-extnum)	;HL=.fcb(modnum) 
  E386    09             C      	dad	b 
  E387    34             C      	inr	m		;fcb(modnum)=++1 
                         C      	;module number incremented, check for overflow 
  E388    7E             C      	mov	a,m		;mask high order bits 
  E389    E6 0F          C      	ani	maxmod 
  E38B    CA E3B6        C      	jz	open_r_err	;cannot overflow to zero 
                         C      	;otherwise, ok to continue with new module 
  E38E                   C      open_reel0: 
  E38E    0E 0F          C      	mvi	c,namlen	;next extent found? 
  E390    CD E118        C      	call	search 
  E393    CD DFF5        C      	call	end_of_dir 
  E396    C2 E3AC        C      	jnz	open_reel1 
                         C      	;end of file encountered 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-68


  E399    3A E7D3        C      	lda	rmf		;0ffh becomes 00 if read 
  E39C    3C             C      	inr	a 
  E39D    CA E3B6        C      	jz	open_r_err	;sets lret = 1 
                         C      	;try to extend the current file 
  E3A0    CD E324        C      	call	make 
                         C      	;cannot be end of directory 
  E3A3    CD DFF5        C      	call	end_of_dir 
  E3A6    CA E3B6        C      	jz	open_r_err	;with lret = 1 
  E3A9    C3 E3AF        C      	jmp	open_reel2 
  E3AC                   C      open_reel1: 
                         C      	;not end of file, open 
  E3AC    CD E25A        C      	call	open_copy 
  E3AF                   C      open_reel2: 
  E3AF    CD DEBB        C      	call	getfcb		;set parameters 
  E3B2    AF             C      	xra	a		;lret = 0 
  E3B3    C3 DD01        C      	jmp	sta_ret 
                         C      ;	ret ;with lret = 0 
  E3B6                   C      open_r_err: 
                         C      	;cannot move to next extent of this file 
  E3B6    CD DD05        C      	call	setlret1	;lret = 1 
  E3B9    C3 DF78        C      	jmp	setfwf		;ensure that it will not be closed 
                         C      	;ret 
                         C       
  E3BC                   C      seqdiskread: 
                         C      	;sequential disk read operation 
  E3BC    3E 01          C      	mvi	a,1 
  E3BE    32 E7D5        C      	sta	seqio 
                         C      	;drop through to diskread 
                         C       
  E3C1                   C      diskread:	;(may enter from seqdiskread) 
  E3C1    3E FF          C      	mvi	a,_true		;read mode flag = true (open_reel) 
  E3C3    32 E7D3        C      	sta	rmf 
                         C      	;read the next record from the current fcb 
  E3C6    CD DEBB        C      	call	getfcb		;sets parameters for the read 
  E3C9    3A E7E3        C      	lda	vrecord		;vrecord-rcount 
  E3CC    21 E7E1        C      	lxi	h,rcount 
  E3CF    BE             C      	cmp	m 
                         C      	;skip if rcount > vrecord 
  E3D0    DA E3E6        C      	jc	recordok 
                         C      	;not enough records in the extent 
                         C      	;record count must be 128 to continue 
  E3D3    FE 80          C      	cpi	128		;vrecord = 128? 
  E3D5    C2 E3FB        C      	jnz	diskeof		;skip if vrecord<>128 
  E3D8    CD E35A        C      	call	open_reel	;go to next extent if so 
  E3DB    AF             C      	xra	a		;vrecord=00 
  E3DC    32 E7E3        C      	sta	vrecord 
                         C      	;now check for open ok 
  E3DF    3A DD45        C      	lda	lret		;stop at eof 
  E3E2    B7             C      	ora	a 
  E3E3    C2 E3FB        C      	jnz	diskeof 
  E3E6                   C      recordok: 
                         C      	;arrive with fcb addressing a record to read 
  E3E6    CD DE77        C      	call	index 
                         C      	;error 2 if reading unwritten data 
                         C      	;(returns 1 to be compatible with 1.4) 
  E3E9    CD DE84        C      	call	allocated	;arecord=0000? 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-69


  E3EC    CA E3FB        C      	jz	diskeof 
                         C      	;record has been allocated, read it 
  E3EF    CD DE8A        C      	call	atran		;arecord now a disk address 
  E3F2    CD DDD1        C      	call	seek		;to proper track,sector 
  E3F5    CD DDB2        C      	call	rdbuff		;to dma address 
  E3F8    C3 DED2        C      	jmp	setfcb		;replace parameter	 
                         C      ;		ret 
  E3FB                   C      diskeof: 
  E3FB    C3 DD05        C      	jmp	setlret1	;lret = 1 
                         C      	;ret 
                         C       
  E3FE                   C      seqdiskwrite: 
                         C      	;sequential disk write 
  E3FE    3E 01          C      	mvi	a,1 
  E400    32 E7D5        C      	sta	seqio 
                         C      	;drop through to diskwrite 
                         C       
  E403                   C      diskwrite:	;(may enter here from seqdiskwrite above) 
  E403    3E 00          C      	mvi	a,_false	;read mode flag 
  E405    32 E7D3        C      	sta	rmf 
                         C      	;write record to currently selected file 
  E408    CD DF54        C      	call	check_write	;in case write protected 
  E40B    2A DD43        C      	lhld	info		;HL = .fcb(0) 
  E40E    CD DF47        C      	call	check_rofile	;may be a read-only file 
  E411    CD DEBB        C      	call	getfcb		;to set local parameters 
  E414    3A E7E3        C      	lda	vrecord		;vrecord-128 
  E417    FE 80          C      	cpi	lstrec+1 
                         C      	;skip if vrecord > lstrec 
                         C      	;vrecord = 128, cannot open next extent 
  E419    D2 DD05        C      	jnc	setlret1	;lret=1 
  E41C                   C      diskwr0: 
                         C      	;can write the next record, so continue 
  E41C    CD DE77        C      	call	index 
  E41F    CD DE84        C      	call	allocated 
  E422    0E 00          C      	mvi	c,0		;marked as normal write operation for wrbuff 
  E424    C2 E46E        C      	jnz	diskwr1 
                         C      	;not allocated 
                         C      	;the argument to getblock is the starting 
                         C      	;position for the disk search, and should be 
                         C      	;the last allocated block for this file, or 
                         C      	;the value 0 if no space has been allocated 
  E427    CD DE3E        C      	call	dm_position 
  E42A    32 E7D7        C      	sta	dminx		;save for later 
  E42D    01 0000        C      	lxi	b,0000h		;may use block zero 
  E430    B7             C      	ora	a		;skip if no previous block 
  E431    CA E43B        C      	jz	nopblock 
                         C      	;previous block exists at A 
  E434    4F             C      	mov	c,a		;previous block # in BC 
  E435    0B             C      	dcx	b 
  E436    CD DE5E        C      	call	getdm		;previous block # to HL 
  E439    44             C      	mov	b,h		;BC=prev block# 
  E43A    4D             C      	mov	c,l 
  E43B                   C      nopblock: 
                         C      	;BC = 0000, or previous block # 
  E43B    CD E1BE        C      	call	get_block	;block # to HL 
                         C      	;arrive here with block# or zero 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-70


  E43E    7D             C      	mov	a,l 
  E43F    B4             C      	ora	h 
  E440    C2 E448        C      	jnz	blockok 
                         C      	;cannot find a block to allocate 
  E443    3E 02          C      	mvi	a,2	 	;lret=2 
  E445    C3 DD01        C      	jmp	sta_ret 
  E448                   C      blockok: 
                         C      	;allocated block number is in HL 
  E448    22 E7E5        C      	shld	arecord 
  E44B    EB             C      	xchg			;block number to DE 
  E44C    2A DD43        C      	lhld	info		;HL=.fcb(dskmap) 
  E44F    01 0010        C      	lxi	b,dskmap 
  E452    09             C      	dad	b 
  E453    3A E7DD        C      	lda	single		;set flags for single byte dm 
  E456    B7             C      	ora	a 
  E457    3A E7D7        C      	lda	dminx		;recall dm index 
  E45A    CA E464        C      	jz	allocwd		;skip if allocating word 
                         C      	;allocating a byte value 
  E45D    CD DF64        C      	call	addh		;single byte alloc 
  E460    73             C      	mov	m,e 
  E461    C3 E46C        C      	jmp	diskwru		;to continue 
  E464                   C      allocwd: 
                         C      	;allocate a word value 
  E464    4F             C      	mov	c,a		;double(dminx) 
  E465    06 00          C      	mvi	b,0 
  E467    09             C      	dad	b		;HL=.fcb(dminx*2) 
  E468    09             C      	dad	b 
  E469    73             C      	mov	m,e		;double wd 
  E46A    23             C      	inx	h 
  E46B    72             C      	mov	m,d 
  E46C                   C      diskwru: 
                         C      	;disk write to previously unallocated block 
  E46C    0E 02          C      	mvi	c,2		;marked as unallocated write 
  E46E                   C      diskwr1: 
                         C      	;continue the write operation of no allocation error 
                         C      	;C = 0 if normal write, 2 if to prev unalloc block 
  E46E    3A DD45        C      	lda	lret		;stop if non zero returned value 
  E471    B7             C      	ora	a 
  E472    C0             C      	rnz 
  E473    C5             C      	push	b		;save write flag 
  E474    CD DE8A        C      	call	atran		;arecord set 
  E477    3A E7D5        C      	lda	seqio 
  E47A    3D             C      	dcr	a 
  E47B    3D             C      	dcr	a 
  E47C    C2 E4BB        C      	jnz	diskwr11 
  E47F    C1             C      	pop	b 
  E480    C5             C      	push	b 
  E481    79             C      	mov	a,c 
  E482    3D             C      	dcr	a 
  E483    3D             C      	dcr	a 
  E484    C2 E4BB        C      	jnz	diskwr11	;old allocation   
  E487    E5             C      	push	h		;arecord in hl ret from atran 
  E488    2A E7B9        C      	lhld	buffa		;zero buffa & fill 
  E48B    57             C      	mov	d,a 
  E48C    77             C      fill0:  mov	m,a 
  E48D    23             C      	inx	h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-71


  E48E    14             C      	inr	d 
  E48F    F2 E48C        C      	jp	fill0 
  E492    CD DFE0        C      	call	setdir 
  E495    2A E7E7        C      	lhld	arecord1 
  E498    0E 02          C      	mvi	c,2 
  E49A    22 E7E5        C      fill1:  shld	arecord 
  E49D    C5             C      	push	b 
  E49E    CD DDD1        C      	call	seek 
  E4A1    C1             C      	pop	b 
  E4A2    CD DDB8        C      	call	wrbuff		;write fill record 
  E4A5    2A E7E5        C      	lhld	arecord		;restore last record      
  E4A8    0E 00          C      	mvi	c,0		;change  allocate flag    
  E4AA    3A E7C4        C      	lda	blkmsk 
  E4AD    47             C      	mov	b,a 
  E4AE    A5             C      	ana	l 
  E4AF    B8             C      	cmp	b 
  E4B0    23             C      	inx	h 
  E4B1    C2 E49A        C      	jnz	fill1		;cont until cluster is zeroed 
  E4B4    E1             C      	pop	h 
  E4B5    22 E7E5        C      	shld	arecord 
  E4B8    CD DFDA        C      	call	setdata 
  E4BB                   C      diskwr11: 
  E4BB    CD DDD1        C      	call seek ;to proper file position 
  E4BE    C1             C      	pop	b		;restore/save write flag (C=2 if new block) 
  E4BF    C5             C      	push	b 
  E4C0    CD DDB8        C      	call	wrbuff		;written to disk 
  E4C3    C1             C      	pop	b		;C = 2 if a new block was allocated, 0 if not 
                         C      	;increment record count if rcount<=vrecord 
  E4C4    3A E7E3        C      	lda	vrecord		;vrecord-rcount 
  E4C7    21 E7E1        C      	lxi	h,rcount 
  E4CA    BE             C      	cmp	m 
  E4CB    DA E4D2        C      	jc	diskwr2 
                         C      	;rcount <= vrecord 
  E4CE    77             C      	mov	m,a		;rcount = vrecord+1 
  E4CF    34             C      	inr	m 
  E4D0    0E 02          C      	mvi	c,2		;mark as record count incremented 
  E4D2                   C      diskwr2: 
                         C      	if	patch1 
                         C      	; CP/M V2.2 patch 1 for use of optional blocking/deblocking 
  E4D2    00             C      	nop 
  E4D3    00             C      	nop 
  E4D4    21 0000        C      	lxi	h,0 
                         C      	else 
                         C      	; original code 
                         C      	;A has vrecord, C=2 if new block or new record# 
                         C      	dcr	c 
                         C      	dcr	c 
                         C      	jnz	noupdate 
                         C      	endif 
  E4D7    F5             C      	push	psw		;save vrecord value 
  E4D8    CD DF69        C      	call	getmodnum	;HL=.fcb(modnum), A=fcb(modnum) 
                         C      	;reset the file write flag to mark as written fcb 
  E4DB    E6 7F          C      	ani	(NOT fwfmsk) AND 0ffh	;bit reset 
  E4DD    77             C      	mov	m,a		;fcb(modnum) = fcb(modnum) and 7fh 
  E4DE    F1             C      	pop	psw		;restore vrecord 
  E4DF                   C      noupdate: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-72


                         C      	;check for end of extent, if found attempt to open 
                         C      	;next extent in preparation for next write 
  E4DF    FE 7F          C      	cpi	lstrec		;vrecord=lstrec? 
  E4E1    C2 E500        C      	jnz	diskwr3		;skip if not 
                         C      	;may be random access write, if so we are done 
                         C      	;change next      
  E4E4    3A E7D5        C      	lda	seqio		;skip next extent open op 
  E4E7    FE 01          C      	cpi	1 
  E4E9    C2 E500        C      	jnz	diskwr3 
                         C      	;update current fcb before going to next extent 
  E4EC    CD DED2        C      	call	setfcb 
  E4EF    CD E35A        C      	call	open_reel	;rmf=false 
                         C      	;vrecord remains at lstrec causing eof if 
                         C      	;no more directory space is available 
  E4F2    21 DD45        C      	lxi	h,lret 
  E4F5    7E             C      	mov	a,m 
  E4F6    B7             C      	ora	a 
  E4F7    C2 E4FE        C      	jnz	nospace 
                         C      	;space available, set vrecord=255 
  E4FA    3D             C      	dcr	a		;goes to 00 next time 
  E4FB    32 E7E3        C      	sta	vrecord 
  E4FE                   C      nospace: 
  E4FE    36 00          C      	mvi	m,0		;lret = 00 for returned value 
  E500                   C      diskwr3: 
  E500    C3 DED2        C      	jmp	setfcb ;replace parameters 
                         C      	;ret 
                         C       
  E503                   C      rseek: 
                         C      	;random access seek operation, C=0ffh if read mode 
                         C      	;fcb is assumed to address an active file control block 
                         C      	;(modnum has been set to 1100_0000b if previous bad seek) 
  E503    AF             C      	xra	a		;marked as random access operation 
  E504    32 E7D5        C      	sta	seqio 
  E507                   C      rseek1: 
  E507    C5             C      	push	b		;save r/w flag 
  E508    2A DD43        C      	lhld	info		;DE will hold base of fcb 
  E50B    EB             C      	xchg 
  E50C    21 0021        C      	lxi	h,ranrec	;HL=.fcb(ranrec) 
  E50F    19             C      	dad	d 
  E510    7E             C      	mov	a,m		;record number 
  E511    E6 7F          C      	ani	7fh 
  E513    F5             C      	push	psw 
  E514    7E             C      	mov	a,m		;cy=lsb of extent# 
  E515    17             C      	ral 
  E516    23             C      	inx	h		;A=ext# 
  E517    7E             C      	mov	a,m 
  E518    17             C      	ral 
  E519    E6 1F          C      	ani	11111b 
  E51B    4F             C      	mov	c,a		;C holds extent number, record stacked 
  E51C    7E             C      	mov	a,m		;mod# 
  E51D    1F             C      	rar 
  E51E    1F             C      	rar 
  E51F    1F             C      	rar 
  E520    1F             C      	rar 
  E521    E6 0F          C      	ani	1111b 
  E523    47             C      	mov	b,a		;B holds module#, C holds ext# 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-73


  E524    F1             C      	pop	psw		;recall sought record # 
                         C      	;check to insure that high byte of ran rec = 00 
  E525    23             C      	inx	h		;l=high byte (must be 00) 
  E526    6E             C      	mov	l,m 
  E527    2C             C      	inr	l		;zero flag, l=6 
  E528    2D             C      	dcr	l 
  E529    2E 06          C      	mvi	l,6 
                         C      	;produce error 6, seek past physical eod 
  E52B    C2 E58B        C      	jnz	seekerr 
                         C      	;otherwise, high byte = 0, A = sought record 
  E52E    21 0020        C      	lxi	h,nxtrec	;HL = .fcb(nxtrec) 
  E531    19             C      	dad	d 
  E532    77             C      	mov	m,a		;sought rec# stored away 
                         C      	;arrive here with B=mod#, C=ext#, DE=.fcb, rec stored 
                         C      	;the r/w flag is still stacked.  compare fcb values 
  E533    21 000C        C      	lxi	h,extnum	;A=seek ext# 
  E536    19             C      	dad	d 
  E537    79             C      	mov	a,c 
  E538    96             C      	sub	m		;tests for = extents 
  E539    C2 E547        C      	jnz	ranclose 
                         C      	;extents match, check mod# 
  E53C    21 000E        C      	lxi	h,modnum	;B=seek mod# 
  E53F    19             C      	dad	d 
  E540    78             C      	mov	a,b 
                         C      	;could be overflow at eof, producing module# 
                         C      	;of 90H or 10H, so compare all but fwf 
  E541    96             C      	sub	m		;same? 
  E542    E6 7F          C      	ani	7fh 
  E544    CA E57F        C      	jz	seekok 
  E547                   C      ranclose: 
  E547    C5             C      	push	b		;save seek mod#,ext#, .fcb 
  E548    D5             C      	push	d 
  E549    CD E2A2        C      	call	close		;current extent closed 
  E54C    D1             C      	pop	d		;recall parameters and fill 
  E54D    C1             C      	pop	b 
  E54E    2E 03          C      	mvi	l,3		;cannot close error #3 
  E550    3A DD45        C      	lda	lret 
  E553    3C             C      	inr	a 
  E554    CA E584        C      	jz	badseek 
  E557    21 000C        C      	lxi	h,extnum	;fcb(extnum)=ext# 
  E55A    19             C      	dad	d 
  E55B    71             C      	mov	m,c 
  E55C    21 000E        C      	lxi	h,modnum	;fcb(modnum)=mod# 
  E55F    19             C      	dad	d 
  E560    70             C      	mov	m,b 
  E561    CD E251        C      	call	open		;is the file present? 
  E564    3A DD45        C      	lda	lret		;open successful? 
  E567    3C             C      	inr	a 
  E568    C2 E57F        C      	jnz	seekok 
                         C      	;cannot open the file, read mode? 
  E56B    C1             C      	pop	b		;r/w flag to c (=0ffh if read) 
  E56C    C5             C      	push	b		;everyone expects this item stacked 
  E56D    2E 04          C      	mvi	l,4		;seek to unwritten extent #4 
  E56F    0C             C      	inr	c		;becomes 00 if read operation 
  E570    CA E584        C      	jz	badseek		;skip to error if read operation 
                         C      	;write operation, make new extent 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-74


  E573    CD E324        C      	call	make 
  E576    2E 05          C      	mvi	l,5		 ;cannot create new extent #5 
  E578    3A DD45        C      	lda	lret		;no dir space 
  E57B    3C             C      	inr	a 
  E57C    CA E584        C      	jz	badseek 
                         C      	;file make operation successful 
  E57F                   C      seekok: 
  E57F    C1             C      	pop	b		;discard r/w flag 
  E580    AF             C      	xra	a		;with zero set 
  E581    C3 DD01        C      	jmp	sta_ret 
  E584                   C      badseek: 
                         C      	;fcb no longer contains a valid fcb, mark 
                         C      	;with 1100_000b in modnum field so that it 
                         C      	;appears as overflow with file write flag set 
  E584    E5             C      	push	h		;save error flag 
  E585    CD DF69        C      	call	getmodnum	;HL = .modnum 
  E588    36 C0          C      	mvi	m,11000000b 
  E58A    E1             C      	pop	h		;and drop through 
  E58B                   C      seekerr: 
  E58B    C1             C      	pop	b		;discard r/w flag 
  E58C    7D             C      	mov	a,l		;lret=#, nonzero 
  E58D    32 DD45        C      	sta	lret 
                         C      	;setfwf returns non-zero accumulator for err 
  E590    C3 DF78        C      	jmp	setfwf		;flag set, so subsequent close ok 
                         C      	;ret 
                         C       
  E593                   C      randiskread: 
                         C      	;random disk read operation 
  E593    0E FF          C      	mvi	c,_true		;marked as read operation 
  E595    CD E503        C      	call	rseek 
  E598    CC E3C1        C      	cz	diskread	;if seek successful 
  E59B    C9             C      	ret 
                         C       
  E59C                   C      randiskwrite: 
                         C      	;random disk write operation 
  E59C    0E 00          C      	mvi	c,_false	;marked as write operation 
  E59E    CD E503        C      	call	rseek 
  E5A1    CC E403        C      	cz	diskwrite	;if seek successful 
  E5A4    C9             C      	ret 
                         C       
  E5A5                   C      compute_rr: 
                         C      	;compute random record position for getfilesize/setrandom 
  E5A5    EB             C      	xchg 
  E5A6    19             C      	dad	d 
                         C      	;DE=.buf(dptr) or .fcb(0), HL = .f(nxtrec/reccnt) 
  E5A7    4E             C      	mov	c,m		;BC = 0000 0000 ?rrr rrrr 
  E5A8    06 00          C      	mvi	b,0 
  E5AA    21 000C        C      	lxi	h,extnum	;A=e000 0000 
  E5AD    19             C      	dad	d 
  E5AE    7E             C      	mov	a,m 
  E5AF    0F             C      	rrc 
  E5B0    E6 80          C      	ani	80h 
  E5B2    81             C      	add	c 
  E5B3    4F             C      	mov	c,a 
  E5B4    3E 00          C      	mvi	a,0 
  E5B6    88             C      	adc	b 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-75


  E5B7    47             C      	mov	b,a 
                         C      	;BC = 0000 000? errrr rrrr 
  E5B8    7E             C      	mov	a,m 
  E5B9    0F             C      	rrc 
  E5BA    E6 0F          C      	ani	0fh 
  E5BC    80             C      	add	b 
  E5BD    47             C      	mov	b,a 
                         C      	;BC = 000? eeee errrr rrrr 
  E5BE    21 000E        C      	lxi	h,modnum	;A=XXX? mmmm 
  E5C1    19             C      	dad	d 
  E5C2    7E             C      	mov	a,m 
  E5C3    87             C      	add	a		;cy=? A=mmmm 0000 
  E5C4    87             C      	add	a 
  E5C5    87             C      	add	a 
  E5C6    87             C      	add	a 
  E5C7    F5             C      	push	psw 
  E5C8    80             C      	add	b 
  E5C9    47             C      	mov	b,a 
                         C      	;cy=?, BC = mmmm eeee errr rrrr 
  E5CA    F5             C      	push	psw		;possible second carry 
  E5CB    E1             C      	pop	h		;cy = lsb of L 
  E5CC    7D             C      	mov	a,l		;cy = lsb of A 
  E5CD    E1             C      	pop	h		;cy = lsb of L 
  E5CE    B5             C      	ora	l		;cy/cy = lsb of A 
  E5CF    E6 01          C      	ani	1		;A = 0000 000? possible carry-out 
  E5D1    C9             C      	ret 
                         C       
  E5D2                   C      getfilesize: 
                         C      	;compute logical file size for current fcb 
  E5D2    0E 0C          C      	mvi	c,extnum 
  E5D4    CD E118        C      	call	search 
                         C      	;zero the receiving ranrec field 
  E5D7    2A DD43        C      	lhld	info		;save position 
  E5DA    11 0021        C      	lxi	d,ranrec 
  E5DD    19             C      	dad	d 
  E5DE    E5             C      	push	h 
  E5DF    72             C      	mov	m,d		;=00 00 00 
  E5E0    23             C      	inx	h 
  E5E1    72             C      	mov	m,d 
  E5E2    23             C      	inx	h 
  E5E3    72             C      	mov	m,d 
  E5E4                   C      getsize: 
  E5E4    CD DFF5        C      	call	end_of_dir 
  E5E7    CA E60C        C      	jz	setsize 
                         C      	;current fcb addressed by dptr 
  E5EA    CD DF5E        C      	call	getdptra	;ready for compute size 
  E5ED    11 000F        C      	lxi	d,reccnt 
  E5F0    CD E5A5        C      	call	compute_rr 
                         C      	;A=0000 000? BC = mmmm eeee errr rrrr 
                         C      	;compare with memory, larger? 
  E5F3    E1             C      	pop	h		;recall, replace .fcb(ranrec) 
  E5F4    E5             C      	push	h 
  E5F5    5F             C      	mov	e,a		;save cy 
  E5F6    79             C      	mov	a,c		;ls byte 
  E5F7    96             C      	sub	m 
  E5F8    23             C      	inx	h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-76


  E5F9    78             C      	mov	a,b		;middle byte 
  E5FA    9E             C      	sbb	m 
  E5FB    23             C      	inx	h 
  E5FC    7B             C      	mov	a,e		;carry if .fcb(ranrec) > directory 
  E5FD    9E             C      	sbb	m 
  E5FE    DA E606        C      	jc	getnextsize	;for another try 
                         C      	;fcb is less or equal, fill from directory 
  E601    73             C      	mov	m,e 
  E602    2B             C      	dcx	h 
  E603    70             C      	mov	m,b 
  E604    2B             C      	dcx	h 
  E605    71             C      	mov	m,c 
  E606                   C      getnextsize: 
  E606    CD E12D        C      	call	searchn 
  E609    C3 E5E4        C      	jmp	getsize 
  E60C                   C      setsize: 
  E60C    E1             C      	pop	h		;discard .fcb(ranrec) 
  E60D    C9             C      	ret 
                         C       
  E60E                   C      setrandom: 
                         C      	;set random record from the current file control block 
  E60E    2A DD43        C      	lhld	info		;ready params for computesize 
  E611    11 0020        C      	lxi	d,nxtrec 
  E614    CD E5A5        C      	call	compute_rr	;DE=info, A=cy, BC=mmmm eeee errr rrrr 
  E617    21 0021        C      	lxi	h,ranrec	;HL = .fcb(ranrec) 
  E61A    19             C      	dad	d 
  E61B    71             C      	mov	m,c		;to ranrec 
  E61C    23             C      	inx	h 
  E61D    70             C      	mov	m,b 
  E61E    23             C      	inx	h 
  E61F    77             C      	mov	m,a 
  E620    C9             C      	ret 
                         C       
  E621                   C      select: 
                         C      	;select disk info for subsequent input or output ops 
  E621    2A E7AF        C      	lhld	dlog 
  E624    3A DD42        C      	lda	curdsk 
  E627    4F             C      	mov	c,a 
  E628    CD DEEA        C      	call	hlrotr 
  E62B    E5             C      	push	h		;save it for test below, send to seldsk 
  E62C    EB             C      	xchg 
  E62D    CD DD59        C      	call	selectdisk	;recall dlog vector 
  E630    E1             C      	pop	h 
  E631    CC DD47        C      	cz	sel_error	;returns true if select ok 
                         C      	;is the disk logged in? 
  E634    7D             C      	mov	a,l		;return if bit is set 
  E635    1F             C      	rar 
  E636    D8             C      	rc 
                         C      	;disk not logged in, set bit and initialize 
  E637    2A E7AF        C      	lhld	dlog		;call ready 
  E63A    4D             C      	mov	c,l 
  E63B    44             C      	mov	b,h 
  E63C    CD DF0B        C      	call	set_cdisk	;dlog=set_cdisk(dlog) 
  E63F    22 E7AF        C      	shld	dlog 
  E642    C3 E0A3        C      	jmp	initialize 
                         C      	;ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-77


                         C       
  E645                   C      curselect: 
  E645    3A E7D6        C      	lda	linfo		;skip if linfo=curdsk 
  E648    21 DD42        C      	lxi	h,curdsk 
  E64B    BE             C      	cmp	m 
  E64C    C8             C      	rz 
  E64D    77             C      	mov	m,a		;curdsk=info 
  E64E    C3 E621        C      	jmp	select 
                         C      	;ret 
                         C       
  E651                   C      reselect: 
                         C      	;check current fcb to see if reselection necessary 
  E651    3E FF          C      	mvi	a,_true		;mark possible reselect 
  E653    32 E7DE        C      	sta	resel 
  E656    2A DD43        C      	lhld	info		;drive select code 
  E659    7E             C      	mov	a,m 
  E65A    E6 1F          C      	ani	11111b		;non zero is auto drive select 
  E65C    3D             C      	dcr	a		;drive code normalized to 0..30, or 255 
  E65D    32 E7D6        C      	sta	linfo		;save drive code 
  E660    FE 1E          C      	cpi	30 
  E662    D2 E675        C      	jnc	noselect 
                         C      	;auto select function, save curdsk 
  E665    3A DD42        C      	lda	curdsk		;_olddsk=curdsk 
  E668    32 E7DF        C      	sta	_olddsk 
  E66B    7E             C      	mov	a,m		;save drive code 
  E66C    32 E7E0        C      	sta	fcbdsk 
  E66F    E6 E0          C      	ani	11100000b	;preserve hi bits 
  E671    77             C      	mov	m,a 
  E672    CD E645        C      	call	curselect 
  E675                   C      noselect: 
                         C      	;set user code 
  E675    3A DD41        C      	lda	usrcode		;0...31 
  E678    2A DD43        C      	lhld	info 
  E67B    B6             C      	ora	m 
  E67C    77             C      	mov	m,a 
  E67D    C9             C      	ret 
                         C       
                         C      ;	individual function handlers 
  E67E                   C      func12: 
                         C      	;return version number 
  E67E    3E 22          C      	mvi	a,dvers		;lret = dvers (high = 00) 
  E680    C3 DD01        C      	jmp	sta_ret 
                         C      ;	ret ;jmp goback 
                         C       
  E683                   C      func13: 
                         C      	;reset disk system - initialize to disk 0 
  E683    21 0000        C      	lxi	h,0 
  E686    22 E7AD        C      	shld	rodsk 
  E689    22 E7AF        C      	shld	dlog 
  E68C    AF             C      	xra	a		;note that usrcode remains unchanged 
  E68D    32 DD42        C      	sta	curdsk 
  E690    21 0080        C      	lxi	h,tbuff		;dmaad = tbuff 
  E693    22 E7B1        C      	shld	dmaad 
  E696    CD DFDA        C              call	setdata		;to data dma address 
  E699    C3 E621        C      	jmp	select 
                         C      	;ret ;jmp goback 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-78


                         C       
  E645                   C      func14	equ	curselect 
                         C      	;select disk info 
                         C      	;ret ;jmp goback 
                         C       
  E69C                   C      func15: 
                         C      	;open file 
  E69C    CD DF72        C      	call	clrmodnum	;clear the module number 
  E69F    CD E651        C      	call	reselect 
  E6A2    C3 E251        C      	jmp	open 
                         C      	;ret ;jmp goback 
                         C       
  E6A5                   C      func16: 
                         C      	;close file 
  E6A5    CD E651        C      	call	reselect 
  E6A8    C3 E2A2        C      	jmp	close 
                         C      	;ret ;jmp goback 
                         C       
  E6AB                   C      func17: 
                         C      	;search for first occurrence of a file 
  E6AB    0E 00          C      	mvi	c,0		;length assuming '?' true 
  E6AD    EB             C      	xchg			;was lhld info		 
  E6AE    7E             C      	mov	a,m		;no reselect if ? 
  E6AF    FE 3F          C      	cpi	'?' 
  E6B1    CA E6C2        C      	jz	qselect		;skip reselect if so 
                         C      	;normal search 
  E6B4    CD DEA6        C      	call	getexta 
  E6B7    7E             C      	mov	a,m 
  E6B8    FE 3F          C      	cpi	'?' 
  E6BA    C4 DF72        C      	cnz	clrmodnum	;module number zeroed 
  E6BD    CD E651        C      	call	reselect 
  E6C0    0E 0F          C      	mvi	c,namlen 
  E6C2                   C      qselect: 
  E6C2    CD E118        C      	call	search 
  E6C5    C3 DFE9        C      	jmp	dir_to_user	;copy directory entry to user 
                         C      	;ret ;jmp goback 
                         C       
  E6C8                   C      func18: 
                         C      	;search for next occurrence of a file name 
  E6C8    2A E7D9        C      	lhld	searcha 
  E6CB    22 DD43        C      	shld	info 
  E6CE    CD E651        C      	call	reselect 
  E6D1    CD E12D        C      	call	searchn 
  E6D4    C3 DFE9        C      	jmp	dir_to_user	;copy directory entry to user 
                         C      	;ret ;jmp goback 
                         C       
  E6D7                   C      func19: 
                         C      	;delete a file 
  E6D7    CD E651        C      	call	reselect 
  E6DA    CD E19C        C      	call	delete 
  E6DD    C3 E101        C      	jmp	copy_dirloc 
                         C      	;ret ;jmp goback 
                         C       
  E6E0                   C      func20: 
                         C      	;read a file 
  E6E0    CD E651        C      	call	reselect 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-79


  E6E3    C3 E3BC        C      	jmp	seqdiskread				; 
                         C      	 ;jmp goback 
                         C       
  E6E6                   C      func21: 
                         C      	;write a file 
  E6E6    CD E651        C      	call	reselect 
  E6E9    C3 E3FE        C      	jmp	seqdiskwrite			; 
                         C      	 ;jmp goback 
                         C       
  E6EC                   C      func22: 
                         C      	;make a file 
  E6EC    CD DF72        C      	call	clrmodnum 
  E6EF    CD E651        C      	call	reselect 
  E6F2    C3 E324        C      	jmp	make 
                         C      	;ret ;jmp goback 
                         C       
  E6F5                   C      func23: 
                         C      	;rename a file 
  E6F5    CD E651        C      	call	reselect 
  E6F8    CD E216        C      	call	rename 
  E6FB    C3 E101        C      	jmp	copy_dirloc 
                         C      	;ret ;jmp goback 
                         C       
  E6FE                   C      func24: 
                         C      	;return the login vector 
  E6FE    2A E7AF        C      	lhld	dlog 
  E701    C3 E729        C      	jmp	sthl_ret			; 
                         C      ;	ret ;jmp goback 
                         C       
  E704                   C      func25: 
                         C      	;return selected disk number 
  E704    3A DD42        C      	lda	curdsk 
  E707    C3 DD01        C      	jmp	sta_ret 
                         C      ;	ret ;jmp goback 
                         C       
  E70A                   C      func26: 
                         C      	;set the subsequent dma address to info 
  E70A    EB             C      	xchg			;was lhld info	 
  E70B    22 E7B1        C      	shld	dmaad		;dmaad = info 
  E70E    C3 DFDA        C              jmp	setdata		;to data dma address 
                         C      	;ret ;jmp goback 
                         C       
  E711                   C      func27: 
                         C      	;return the login vector address 
  E711    2A E7BF        C      	lhld	alloca 
  E714    C3 E729        C      	jmp	sthl_ret 
                         C      ;	ret ;jmp goback 
                         C       
  DF2C                   C      func28	equ	set_ro 
                         C      	;write protect current disk 
                         C      	;ret ;jmp goback 
                         C       
  E717                   C      func29: 
                         C      	;return r/o bit vector 
  E717    2A E7AD        C      	lhld	rodsk 
  E71A    C3 E729        C      	jmp	sthl_ret 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-80


                         C      ;	ret ;jmp goback 
                         C       
  E71D                   C      func30: 
                         C      	;set file indicators 
  E71D    CD E651        C      	call	reselect 
  E720    CD E23B        C      	call	indicators 
  E723    C3 E101        C      	jmp	copy_dirloc		;lret=dirloc 
                         C      	;ret ;jmp goback 
                         C       
  E726                   C      func31: 
                         C      	;return address of disk parameter block 
  E726    2A E7BB        C      	lhld	dpbaddr 
  E729                   C      sthl_ret: 
  E729    22 DD45        C       	shld	aret 
  E72C    C9             C      	ret			;jmp goback 
  E72D                   C      func32: 
                         C      	;set user code 
  E72D    3A E7D6        C              lda	linfo 
  E730    FE FF          C      	cpi	0ffh 
  E732    C2 E73B        C      	jnz	setusrcode 
                         C      	;interrogate user code instead 
  E735    3A DD41        C      	lda	usrcode		;lret=usrcode 
  E738    C3 DD01        C      	jmp	sta_ret 
                         C      ;		ret ;jmp goback 
  E73B                   C      setusrcode: 
  E73B    E6 1F          C      	ani	1fh 
  E73D    32 DD41        C      	sta	usrcode 
  E740    C9             C      	ret			;jmp goback 
                         C      ; 
  E741                   C      func33: 
                         C      	;random disk read operation 
  E741    CD E651        C      	call	reselect 
  E744    C3 E593        C      	jmp	randiskread	;to perform the disk read 
                         C      	;ret ;jmp goback 
                         C      ; 
  E747                   C      func34: 
                         C      	;random disk write operation 
  E747    CD E651        C      	call	 reselect 
  E74A    C3 E59C        C      	jmp	randiskwrite	;to perform the disk write 
                         C      	;ret ;jmp goback 
                         C      ; 
  E74D                   C      func35: 
                         C      	;return file size (0-65536) 
  E74D    CD E651        C      	call	reselect 
  E750    C3 E5D2        C      	jmp	getfilesize 
                         C      	;ret ;jmp goback 
                         C      ; 
  E60E                   C      func36	equ	setrandom			; 
                         C      	;set random record 
                         C      	;ret ;jmp goback 
  E753                   C      func37: 
                         C      ; 
  E753    2A DD43        C      	lhld	info 
  E756    7D             C      	mov	a,l 
  E757    2F             C      	cma 
  E758    5F             C      	mov	e,a 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-81


  E759    7C             C      	mov	a,h 
  E75A    2F             C      	cma 
  E75B    2A E7AF        C      	lhld	dlog 
  E75E    A4             C      	ana	h 
  E75F    57             C      	mov	d,a 
  E760    7D             C      	mov	a,l 
  E761    A3             C      	ana	e 
  E762    5F             C      	mov	e,a 
  E763    2A E7AD        C      	lhld	rodsk 
  E766    EB             C      	xchg 
  E767    22 E7AF        C      	shld	dlog 
  E76A    7D             C      	mov	a,l 
  E76B    A3             C      	ana	e 
  E76C    6F             C      	mov	l,a 
  E76D    7C             C      	mov	a,h 
  E76E    A2             C      	ana	d 
  E76F    67             C      	mov	h,a 
  E770    22 E7AD        C      	shld	rodsk 
  E773    C9             C      	ret 
                         C      ; 
                         C      ; 
  E774                   C      goback: 
                         C      	;arrive here at end of processing to return to user 
  E774    3A E7DE        C      	lda	resel 
  E777    B7             C      	ora	a 
  E778    CA E791        C      	jz	retmon 
                         C      	;reselection may have taken place 
  E77B    2A DD43        C      	lhld	info		;fcb(0)=0 
  E77E    36 00          C      	mvi	m,0 
  E780    3A E7E0        C      	lda	fcbdsk 
  E783    B7             C      	ora	a 
  E784    CA E791        C      	jz	retmon 
                         C      	;restore disk number 
  E787    77             C      	mov	m,a		;fcb(0)=fcbdsk 
  E788    3A E7DF        C      	lda	_olddsk 
  E78B    32 E7D6        C      	sta	linfo 
  E78E    CD E645        C      	call	curselect 
                         C      ; 
                         C      ;	return from the disk monitor 
  E791                   C      retmon: 
  E791    2A DD0F        C      	lhld	entsp		;user stack restored 
  E794    F9             C      	sphl 
  E795    2A DD45        C      	lhld	aret		;BA = HL = aret 
  E798    7D             C      	mov	a,l 
  E799    44             C      	mov	b,h 
  E79A    C9             C      	ret 
                         C       
  DD04                   C      func38	equ	func_ret 
  DD04                   C      func39	equ	func_ret 
                         C       
  E79B                   C      func40: 
                         C      	;random disk write with zero fill of unallocated block 
  E79B    CD E651        C      	call	reselect 
  E79E    3E 02          C      	mvi	a,2 
  E7A0    32 E7D5        C      	sta	seqio 
  E7A3    0E 00          C      	mvi	c,_false 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-82


  E7A5    CD E507        C      	call	rseek1 
  E7A8    CC E403        C      	cz	diskwrite	;if seek successful 
  E7AB    C9             C      	ret 
                         C       
                         C       
                         C      ;	data areas 
                         C       
                         C      ;	initialized data 
  E7AC    E5             C      efcb:	db	empty	;0e5=available dir entry 
  E7AD    0000           C      rodsk:	dw	0	;read only disk vector 
  E7AF    0000           C      dlog:	dw	0	;logged-in disks 
  E7B1    0080           C      dmaad:	dw	tbuff	;initial dma address 
                         C       
                         C      ;	curtrka - alloca are set upon disk select 
                         C      ;	(data must be adjacent, do not insert variables) 
                         C      ;	(address of translate vector, not used) 
  E7B3                   C      cdrmaxa:ds	word	;pointer to cur dir max value 
  E7B5                   C      curtrka:ds	word	;current track address 
  E7B7                   C      curreca:ds	word	;current record address 
  E7B9                   C      buffa:	ds	word	;pointer to directory dma address 
  E7BB                   C      dpbaddr:ds	word	;current disk parameter block address 
  E7BD                   C      checka:	ds	word	;current checksum vector address 
  E7BF                   C      alloca:	ds	word	;current allocation vector address 
  0008                   C      addlist	equ	$-buffa	;address list size 
                         C       
                         C      ;	sectpt - offset obtained from disk parm block at dpbaddr 
                         C      ;	(data must be adjacent, do not insert variables) 
  E7C1                   C      sectpt:	ds	word	;sectors per track 
  E7C3                   C      blkshf:	ds	byte	;block shift factor 
  E7C4                   C      blkmsk:	ds	byte	;block mask 
  E7C5                   C      extmsk:	ds	byte	;extent mask 
  E7C6                   C      maxall:	ds	word	;maximum allocation number 
  E7C8                   C      dirmax:	ds	word	;largest directory number 
  E7CA                   C      dirblk:	ds	word	;reserved allocation bits for directory 
  E7CC                   C      chksiz:	ds	word	;size of checksum vector 
  E7CE                   C      offset:	ds	word	;offset tracks at beginning 
  000F                   C      dpblist	equ	$-sectpt	;size of area 
                         C       
                         C      ;	local variables 
  E7D0                   C      tranv:	ds	word	;address of translate vector 
  E7D2                   C      fcb_copied: 
  E7D2                   C      	ds	byte	;set true if copy_fcb called 
  E7D3                   C      rmf:	ds	byte	;read mode flag for open_reel 
  E7D4                   C      dirloc:	ds	byte	;directory flag in rename, etc. 
  E7D5                   C      seqio:	ds	byte	;1 if sequential i/o 
  E7D6                   C      linfo:	ds	byte	;low(info) 
  E7D7                   C      dminx:	ds	byte	;local for diskwrite 
  E7D8                   C      searchl:ds	byte	;search length 
  E7D9                   C      searcha:ds	word	;search address 
  E7DB                   C      tinfo:	ds	word	;temp for info in "make" 
  E7DD                   C      single:	ds	byte	;set true if single byte allocation map 
  E7DE                   C      resel:	ds	byte	;reselection flag 
  E7DF                   C      _olddsk:	ds	byte	;disk on entry to bdos 
  E7E0                   C      fcbdsk:	ds	byte	;disk named in fcb 
  E7E1                   C      rcount:	ds	byte	;record count in current fcb 
  E7E2                   C      extval:	ds	byte	;extent number and extmsk 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-83


  E7E3                   C      vrecord:ds	word	;current virtual record 
  E7E5                   C      arecord:ds	word	;current actual record 
  E7E7                   C      arecord1:	ds	word	;current actual block# * blkmsk 
                         C       
                         C      ;	local variables for directory access 
  E7E9                   C      dptr:	ds	byte	;directory pointer 0,1,2,3 
  E7EA                   C      dcnt:	ds	word	;directory counter 0,1,...,dirmax 
  E7EC                   C      drec:	ds	word	;directory record 0,1,...,dirmax/4 
                         C       
  E800                   C      bios	equ	($ AND 0ff00h)+100h	;next module 
                         C      ;	end 
  0DEE                   C      D_SIZE	EQU	$-D_BASE 
                                 
                         C      include B1MAIN.ASM 
                         C      ;******** CP/M BIOS V2.3 FOR R86-RK ******** 
                         C      ;*     (C) TCHV 
                         C      ;******************************************* 
                         C       
                         C      ;	B0MAIN.ASM - CP/M bios main module 
                         C       
                         C      ;	30-MAY-1991 - FIRST VERSION 
                         C      ;	XX-XXX-1991 - 80-SYMBOL SCREEN MODE ADDED 
                         C      ;	03-JAN-1992 - ADDED 2-DRIVE SUPPORT 
                         C      ;	06-JAN-1992 - SECTOR INTERLEAVING FOR DRIVE B: 
                         C      ;	22-Mar-1992 - Add PROFI disk format 
                         C      ;	24-Mar-1992 - Break into modules 
                         C      ;	02-Nov-1992 - Add version information 
                         C       
                         C      ;	INCLUDE         B0CONIO.H 
                         C      ;	INCLUDE         B0DISK.H 
                         C      ;	INCLUDE         B0LSTAUX.H 
                         C       
                         C      ;EXTRN	PUTS	; FROM B0CONIO.ASM 
                         C       
  0000                   C      SYSPG	EQU	0	; THE PAGE OF SYSTEM RAM 
  0005                   C      BDOSTRP EQU	5	; 
                         C       
  0004                   C      DEF_DSK	EQU	4 
  0003                   C      IO_BYTE	EQU	3 
                         C       
  E7EE                   C      	ds	bios-$ 
  E800                   C      B_BASE:: 
                         C      ;---------------------------------------------------- 
                         C      ;	BIOS FUNCTION TABLE 
  E800    C3 E841        C      	JMP	BOOT	; Cold boot of the system 
  E803                   C      WBOOT_ADR: 
  E803    C3 E8CB        C      	JMP	WBOOT	; Warm boot of the system 
                         C       
  E806    C3 ECF4        C      	JMP	CON_ST;##;~~\ 
  E809    C3 ECF7        C      	JMP	 CONIN;##;---)- Console I/O 
  E80C    C3 ED79        C      	JMP	CONOUT;##;__/		(see B0CONIO.ASM) 
                         C       
  E80F    C3 F031        C      	JMP	LSTOUT;##;______  LST and AUX functions 
  E812    C3 F02D        C      	JMP	 PUNCH;##;  !		(see B0LSTAUX.asm) 
  E815    C3 F02E        C      	JMP	READER;##;_/! 
                         C      ;			   ! 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-84


  E818    C3 EBD5        C      	JMP	 HOME@;##;__!_________ Disk functions 
  E81B    C3 EBDC        C      	JMP	SELDSK;##;  !	 /	(see B2DISK.asm) 
  E81E    C3 EBD7        C      	JMP	SETTRK;##;  !	! 
  E821    C3 EC75        C      	JMP	SETREC;##;  !	! 
  E824    C3 ECA4        C      	JMP	SETDMA;##;  !	! 
  E827    C3 ECAA        C      	JMP	RD_REC;##;__!___/! 
  E82A    C3 ECB2        C      	JMP	WR_REC;##;  !	! 
  E82D    C3 F034        C      	JMP	LST_ST;##;_/	! 
  E830    C3 EC7A        C      	JMP	SECTRN;##;______/ 
                         C       
  E833    21 D9CD        C      	LXI	H,C_BASE+7CDH	; SPECIAL SUBROUTINE FOR CCP 
  E836    7E             C      	MOV	A,M 
  E837    FE 02          C      	CPI	2		; MODIFICATION 
  E839    CA D96B        C      	JZ	C_BASE+76BH 
  E83C    36 02          C      	MVI	M,2 
  E83E    C3 D8D8        C      	JMP	C_BASE+6D8H 
                         C       
                         C       
                         C      ;------ FIRST TIME INITIALIZATION -------- 
                         C       
  E841    31 0100        C      BOOT:	LXI	SP,100H 
  E844    CD EBC8        C      	CALL	DskInit;## 
                         C      	;CALL	SETSCR 
  E847    CD F072        C      	CALL	SAV_SYS;## 
  E84A    CD EFB0        C      	CALL	SETSCR 
  E84D    CD ED69        C      	CALL	PRNT;## 
  E850    1B 45 43 50    C      	DB	27,45H,	'CP/M-80 vers. 2.2' 
  E854    2F 4D 2D 38    C      
  E858    30 20 76 65    C      
  E85C    72 73 2E 20    C      
  E860    32 2E 32       C      
  E863    0D 0A 43 6F    C      	DB	0DH,0AH,'Copyright (C) 1980, Digital Research' 
  E867    70 79 72 69    C      
  E86B    67 68 74 20    C      
  E86F    28 43 29 20    C      
  E873    31 39 38 30    C      
  E877    2C 20 44 69    C      
  E87B    67 69 74 61    C      
  E87F    6C 20 52 65    C      
  E883    73 65 61 72    C      
  E887    63 68          C      
  E889    0D 0A 42 49    C      	DB	0DH,0AH,'BIOS vers. 3.0      (c) TCHV,1991-92' 
  E88D    4F 53 20 76    C      
  E891    65 72 73 2E    C      
  E895    20 33 2E 30    C      
  E899    20 20 20 20    C      
  E89D    20 20 28 63    C      
  E8A1    29 20 54 43    C      
  E8A5    48 56 2C 31    C      
  E8A9    39 39 31 2D    C      
  E8AD    39 32          C      
  E8AF    0D 0A 00       C      	DB	0DH,0AH,0 
                         C       
                         C      	;JMP	$ 
                         C       
  E8B2    21 E91E        C      	lxi	h,DSKVER;## 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-85


  E8B5    CD ED6E        C      	call	PUTS 
  E8B8    21 ECCD        C      	lxi	h,CONVER;## 
  E8BB    CD ED6E        C      	call	PUTS 
  E8BE    21 F006        C      	lxi	h,LSTVER;## 
  E8C1    CD ED6E        C      	call	PUTS 
  E8C4    AF             C      	XRA	A 
  E8C5    32 0004        C      	STA	DEF_DSK 
  E8C8    32 0003        C      	STA	IO_BYTE 
                         C       
  E8CB                   C      WBOOT:	; WARM START OF CP/M BIOS - LOADING SYSTEM 
  E8CB    31 0100        C      	LXI	SP,100H 
  E8CE    0E 00          C      	MVI	C,0 
  E8D0    CD EBDC        C      	CALL	SELDSK 
  E8D3    CD EBD5        C      	CALL	HOME@ 
  E8D6    CD EFB0        C      WBT:	CALL	SETSCR;## 
                         C       
  E8D9    CD F082        C      	CALL	LD_SYS;## 
                         C       
  E8DC    2A D200        C      	LHLD	C_BASE 
  E8DF    7D             C      	MOV	A,L	; CHECK CP/M DISK PRESENCE 
  E8E0    FE C3          C      	CPI	0C3H 
  E8E2    C2 E906        C      	JNZ	ASKDOS 
                         C       
  E8E5    01 0080        C      	LXI	B,80H 
  E8E8    CD ECA4        C      	CALL	SETDMA;## 
  E8EB    3E C3          C      	MVI	A,0C3H 
  E8ED    32 0000        C      	STA	SYSPG 
  E8F0    32 0005        C      	STA	BDOSTRP 
  E8F3    21 E803        C      	LXI	H,WBOOT_ADR 
  E8F6    22 0001        C      	SHLD	SYSPG+1 
  E8F9    21 DA00        C      	LXI	H,D_BASE;## 
  E8FC    22 0006        C      	SHLD	BDOSTRP+1 
  E8FF    3A 0004        C      	LDA	DEF_DSK 
  E902    4F             C      	MOV	C,A 
  E903    C3 D200        C      	JMP	C_BASE;## 
                         C       
  E906    CD ED69        C      ASKDOS:	CALL	PRNT;## 
  E909    0A 0D 49 6E    C      	DB	10,13,'Ins DOS disk',0 
  E90D    73 20 44 4F    C      
  E911    53 20 64 69    C      
  E915    73 6B 00       C      
  E918    CD ECF7        C      	CALL	CONIN 
  E91B    C3 E8D6        C      	JMP	WBT 
                         C       
                         C       
                         C       
                         C      ;	END 
                         C       
                         C       
                         C      include B2DISK.ASM 
                         C      ;********************************************** 
                         C      ;*   B2DISK.ASM - CP/M BIOS disk functions    * 
                         C      ;* 	  (c) TCHV	1991-1993     	      * 
                         C      ;********************************************** 
                         C       
                         C      ; This module defines the following procedures : 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-86


                         C      PUBLIC	DSKINIT 	; Disk initialisation 
                         C      ; CP/M BIOS functions 
                         C      PUBLIC	HOME@,SELDSK,SETDMA,SECTRN,SETTRK,SETREC,RD_REC,WR_REC 
                         C       
  E91E    0A 0D 44 69    C      DSKVER::	DB	10,13,'Disk BIOS V3.1      7-sep-1993',0 
  E922    73 6B 20 42    C      
  E926    49 4F 53 20    C      
  E92A    56 33 2E 31    C      
  E92E    20 20 20 20    C      
  E932    20 20 37 2D    C      
  E936    73 65 70 2D    C      
  E93A    31 39 39 33    C      
  E93E    00             C      
                         C       
                         C      ; History 
                         C       
                         C      ;	25-jun-1993 - delete controller dependent features & add fdcntr 
                         C      ;		      module 
                         C      ;	 7-sep-1993 - add some comments & transfer disk features into 
                         C      ;		      separate modules 
                         C       
                         C      ;EXTRN ChgDrive,WT_END_CMD 
                         C       
                         C      ;EXTRN RamD_R,RamD_W,RamD_I,RAM_TO_EXT,EXT_TO_RAM 
                         C       
                         C      ;EXTRN FlpD_R,FlpD_W,FlpD_I,FLSH_WB,LAST_OPER,FLP_TBL 
                         C       
                         C      ;INCLUDE B0DISK.MAC 
                         C       
  0001                   C      PROFI_DISKS	EQU	1 
  0042                   C      MaxDiskCode		EQU	'B';'E'   ; Maximum disk code 
                         C       
                         C       
                         C      ; DISK ALLOCATION 
  0001                   C      FLOP40		EQU	1	; DISK B: 
  0000                   C      SD		EQU	0 
  0000                   C      FLOP80		EQU	0	; A: 
  0002                   C      RAMDISK		EQU	2	; C: 
                         C       
                         C       
  0000                   C      FRST_T	EQU	0	; FIRST TRACK OF CP/M AREA 
                         C       
                         C       
                         C      ;*************** Disk buffers allocation ***************** 
  E93F                   C      DIRBF:	ds 80H;		EQU	0E6D0h-80h 
                         C       
                         C       
                         C      ;ALL00	EQU	DIRBF-31 
                         C      ;CHK00	EQU	ALL00-10h 
                         C       
  E9BF                   C      ALL01:	DS	64 
  E9FF                   C      CHK01:	DS	32 
                         C       
  EA1F                   C      ALL02:	DS	64 
  EA5F                   C      CHK02:	DS	32 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-87


  EA7F                   C      ALL03:	DS	250 
  EB79                   C      CHK03:	DS	1 
                         C       
                         C      ;ALL02:	DS	16 
                         C      ;CHK02:	DS	1 
                         C       
                         C      ;ALL03	EQU	0EFE0H 
                         C      ;CHK03:	DS	16 
                         C       
                         C      ;ALL04:	DS	64 
                         C      ;CHK04:	DS	32 
                         C       
                         C       
                         C       
                         C      ; Disk parameter header table 
  EB7A                   C      DPBASE: 
                         C      	;DW	0,0,0,0,DIRBF,DPBLK1,CHK00,ALL00	; Disk A 
  EB7A    0001 0000      C      	DW	1,0,0,0,DIRBF,DPBLK2,CHK01,ALL01	; Disk A 
  EB7E    0000 0000      C      
  EB82    E93F EBAA      C      
  EB86    E9FF E9BF      C      
  EB8A    0001 0000      C      	DW	1,0,0,0,DIRBF,DPBLK2,CHK02,ALL02	; Disk B 
  EB8E    0000 0000      C      
  EB92    E93F EBAA      C      
  EB96    EA5F EA1F      C      
  EB9A    0000 0000      C      	DW	0,0,0,0,DIRBF,DPBLK3,CHK03,ALL03	; Disk C 
  EB9E    0000 0000      C      
  EBA2    E93F EBB9      C      
  EBA6    EB79 EA7F      C      
                         C      	;DW	0,0,0,0,DIRBF,DPBLK1,CHK03,ALL03	; Disk D 
                         C      	;DW	0,0,0,0,DIRBF,DPBLK4,CHK04,ALL04	; Disk E 
                         C       
                         C       
                         C      ; ** Sector translation tables - not needed 
  EBAA                   C      TRANS1:;DB	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 
                         C      ;	DB	19,20,21,22,23,24,25,26,27,28,29,30,31,32,33 
                         C      ;	DB	34,35,36,37,38,39,40,41,42,43,44,45,46,47,48 
                         C      ;	DB	49,50,51,52,53,54,55,56,57,58,59,60,61,62,63 
                         C      ;	DB	64,65,66,67,68,69,70,71,72 
                         C       
  EBAA                   C      TRANS2:;DB	1,2,3,4,5,6,7,8 
                         C      ; ** 
                         C       
                         C      ; FLOPPY 40-TRK DISK (A:,D:) PARAMETER BLOCK 
                         C      ;DPBLK1:	DW	72	;SEC ON TRK 
                         C      ;	DB	04H	;BLK SHF 
                         C      ;	DB	0FH	;BLK MASK 
                         C      ;	DB	00H	;0-MASK 
                         C      ;	DW	179	;DISK SIZE 
                         C      ;	DW	63	;DIR LEN 
                         C      ;	DB	1000000b;Directory allocation - each bit for one group 
                         C      ;	DB	0000000b; -"- 
                         C      ;	DW	16	;Disk bitmap size 
                         C      ;	DW	FRST_T+1 
                         C       
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-88


                         C      ; FLOPPY 80-TRK DISK (B:) PARAMETER BLOCK 
  EBAA    0050           C      DPBLK2:	DW	80	;SEC ON TRK 
  EBAC    04             C      	DB	04H	;BLK SHF 
  EBAD    0F             C      	DB	0FH	;BLK MASK 
  EBAE    00             C      	DB	00H	;0-MASK 
  EBAF    0185           C      	DW	780/2-1	;DISK SIZE 
  EBB1    007F           C      	DW	128-1	;DIR LEN 
  EBB3    C0             C      	DB	11000000B	; DIRECTORY BIT MAP 
  EBB4    00             C      	DB	00000000B 
  EBB5    0020           C      	DW	32 
  EBB7    0002           C      	DW	2 
                         C       
                         C      ; gide-cfa  DISK (Q:) PARAMETER BLOCK 
  EBB9                   C      DPBLK3: 
  EBB9    0080           C      	DW	128	;SEC ON TRK 
  EBBB    05             C      	DB	5	;BLK SHF 
  EBBC    1F             C      	DB	31	;BLK MASK 
  EBBD    01             C      	DB	01H	;0-MASK 
  EBBE    07CF           C      	DW	2000-1	;DISK SIZE = 1000*512*16/4096 -1 
  EBC0    03FF           C      	DW	1024-1	;DIR LEN 
  EBC2    FF             C      	DB	0FFh	; DIRECTORY BIT MAP 
  EBC3    00             C      	DB	0 
  EBC4    0000           C      	DW	0 
  EBC6    0001           C      	DW	1 
                         C       
                         C      ; ********** RAMDISK (C:) PARAMETER BLOCK *********** 
                         C      ; Last operation codes 
                         C       
                         C       
                         C      ;DPBLK3:	DW	C_SEC_ON_TRK	;SEC ON TRK 
                         C      ;	DB	3	;BLK SHF 
                         C      ;	DB	7	;BLK MASK 
                         C      ;	DB	00H	;0-MASK 
                         C      ;	DW	64-8-1	;DISK SIZE 
                         C      ;	DW	C_DIR_ENTRS-1	;DIR LEN 
                         C      ;	DB	10000000b 
                         C      ;	DB	00000000b 
                         C      ;	DW	0 
                         C      ;	DW	C_OFFSET 
                         C       
                         C      ;; FLOPPY 80-TRK DISK (E:) PARAMETER BLOCK 
                         C      ;DPBLK4:	DW	72	;SEC ON TRK 
                         C      ;	DB	04H	;BLK SHF 
                         C      ;	DB	0FH	;BLK MASK 
                         C      ;	DB	00H	;0-MASK 
                         C      ;	DW	(720-9)/2-1	;DISK SIZE 
                         C      ;	DW	128-1	;DIR LEN 
                         C      ;	DB	1100000b 
                         C      ;	DB	0000000b 
                         C      ;	DW	32 
                         C      ;	DW	1 
                         C      ;************** End disk buffer allocation & parameters ********* 
                         C       
                         C      ;-------- DISK INITIALIZATION ---------- 
  EBC8                   C      DskInit: 
  EBC8    AF             C      	XRA	A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-89


  EBC9    32 ECBA        C      	STA	OLDDSK 
  EBCC    32 ECCC        C      	STA	OLDF40 
                         C              ;call	RamD_I 
  EBCF    CD F0E2        C      	call	SD_I 
  EBD2    C3 F067        C              jmp	FlpD_I 
                         C       
                         C      ;------ SOME CP/M BIOS FUNCTIONS ------- 
                         C       
  EBD5    0E 00          C      HOME@:	MVI	C,0 
  EBD7    21 ECC5        C      SETTRK:	LXI	H,CPM_TRACK 
  EBDA    71             C      	MOV	M,C 
  EBDB    C9             C      	RET 
                         C       
                         C       
  EBDC    21 0000        C      SELDSK:	LXI	H,0 
  EBDF    79             C      	MOV	A,C 
  EBE0    32 ECC7        C      	STA	CPM_DISK 
                         C      	;CALL	CHECK_D 
  EBE3    3A ECC7        C      	LDA	CPM_DISK 
  EBE6    FE 03          C      	CPI	3;MaxDiskCode-'A'+1 
                         C      	;ORA	A 
  EBE8    D0             C      	RNC 
  EBE9    3A ECC7        C      	LDA	CPM_DISK 
  EBEC    6F             C      	MOV	L,A 
  EBED    26 00          C      	MVI	H,0 
  EBEF    29             C      	DAD	H 
  EBF0    29             C      	DAD	H 
  EBF1    29             C      	DAD	H 
  EBF2    29             C      	DAD	H 
  EBF3    11 EB7A        C      	LXI	D,DPBASE 
  EBF6    19             C      	DAD	D 
  EBF7    C9             C      	RET 
                         C       
  EBF8                   C      CHECK_D:: 
  EBF8    3A ECBA        C      	LDA	OLDDSK 
  EBFB    47             C      	MOV	B,A 
  EBFC    3A ECC7        C      	LDA	CPM_DISK 
  EBFF    B8             C      	CMP	B 
  EC00    C8             C      	RZ 
  EC01    32 ECBA        C      	STA	OLDDSK 
  EC04    C9             C      	RET 
  EC05    FE 02          C      	CPI	RAMDISK 
  EC07    C8             C      	RZ 
  EC08    FE 00          C      	CPI	SD 
  EC0A    C8             C      	RZ 
  EC0B    F5             C      	PUSH	PSW	; CHANGE FLOPPY DRIVE 
  EC0C    CD F06C        C      	CALL	FLSH_WB 
  EC0F    CD F06C        C      	CALL	WT_END_CMD 
  EC12    3E 02          C      	MVI	A,WRITING 
  EC14    32 F071        C      	STA	LAST_OPER 
  EC17    F1             C      	POP	PSW 
  EC18    FE 00          C      	CPI	FLOP80 
  EC1A    47             C      	MOV	B,A 
  EC1B    3E 02          C      	MVI	A,2 
  EC1D    32 ECC4        C      	STA	DRIVE 
  EC20    CA F06C        C      	JZ	ChgDrive 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-90


  EC23    3A ECBA        C      	LDA	OLDDSK 
  EC26    FE 04          C      	CPI	'E'-'A' 
  EC28    3A ECC4        C      	LDA	DRIVE 
  EC2B    CA F06C        C      	JZ	ChgDrive 
                         C       
  EC2E    3E 01          C      	MVI	A,1 
  EC30    32 ECC4        C      	STA	DRIVE 
  EC33    3A ECCC        C      	LDA	OLDF40 
  EC36    B8             C      	CMP	B 
  EC37    3A ECC4        C      	LDA	DRIVE 
  EC3A    CA F06C        C              JZ	ChgDrive 
  EC3D    78             C      	MOV	A,B 
  EC3E    32 ECCC        C      	STA	OLDF40 
  EC41    F5             C      	PUSH	PSW 
  EC42    3A ECC4        C      	LDA	DRIVE 
  EC45    CD F06C        C      	CALL	ChgDrive 
  EC48    CD ED69        C      	CALL	PRNT;## 
  EC4B    0A 0D 49 6E    C      	DB	10,13,'Ins disk ',0 
  EC4F    73 20 64 69    C      
  EC53    73 6B 20 00    C      
  EC57    F1             C      	POP	PSW 
  EC58    C6 41          C      	ADI	'A' 
  EC5A    4F             C      	MOV	C,A 
  EC5B    CD ED79        C      	CALL	CONOUT;## 
  EC5E    CD ED69        C      	CALL	PRNT;## 
  EC61    3A 20 26 20    C      	DB	': & type a key',10,13,0 
  EC65    74 79 70 65    C      
  EC69    20 61 20 6B    C      
  EC6D    65 79 0A 0D    C      
  EC71    00             C      
  EC72    C3 ECF7        C      	JMP	CONIN 
                         C       
                         C       
  EC75    21 ECC6        C      SETREC:	LXI	H,CPM_RECORD 
  EC78    71             C      	MOV	M,C 
  EC79    C9             C      	RET 
                         C       
                         C      ;----------------------------------------- 
                         C       
  EC7A                   C      SECTRN: 
                         C      ifdef	PROFI_DISKS 
  EC7A    79             C      	mov	a,c 
  EC7B    3C             C      	inr	a 
  EC7C    32 ECC6        C      	STA	CPM_RECORD 
  EC7F    6F             C      	mov	l,a 
  EC80    C9             C      	ret 
                         C      else 
                         C      	LDA	CPM_DISK 
                         C      	CPI	FLOP80 
                         C      	PUSH	B 
                         C      	MOV	A,C 
                         C      	JNZ	NO_TRAN	; NO INTERLEAVE TRANSLATION 
                         C       
                         C      ; PERFORM INTERLEAVE (1:2) TRANSLATION 
                         C      	ANI	3	; SAVE 2 LOWEST BITS OF SECT NUMBER 
                         C      	MOV	B,A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-91


                         C       
                         C      	MOV	A,C 
                         C      	XRA	B	; RESET THESE 2 BITS 
                         C      	CPI	36 
                         C      	JC	FIRST_HALF 
                         C      	SUI	36 
                         C      	ADD	A 
                         C      	ADI	4 
                         C      	JMP	$+4 
                         C      FIRST_HALF: 
                         C      	ADD	A 
                         C      	ORA	B	; RESTORE SAVED BITS 
                         C       
                         C      NO_TRAN:INR	A 
                         C      	STA	CPM_RECORD 
                         C      	MOV	L,A 
                         C      	POP	B 
                         C      	RET 
                         C      endif 
                         C      ;--------------------------------- 
  EC81                   C      SET_PARAMS:: 
  EC81    21 F06D        C      	lxi	h,FLP_TBL ; Floppy disk physical parameter table 
  EC84    3A ECC7        C      	lda	CPM_DISK 
  EC87    FE 00          C      	cpi	FLOP80 
  EC89    C2 EC98        C      	jnz	noFLOP80 
  EC8C    36 08          C      	mvi	m,8 
  EC8E    23             C      	inx	h 
  EC8F    36 05          C      	mvi	m,5 
  EC91    23             C      	inx	h 
  EC92    36 FF          C      	mvi	m,0ffh 
  EC94    23             C      	inx	h 
  EC95    36 03          C      	mvi	m,3 
  EC97    C9             C      	ret 
                         C       
  EC98                   C      noFLOP80: 
  EC98    36 04          C      	mvi	m,4 
  EC9A    23             C      	inx	h 
  EC9B    36 09          C      	mvi	m,9 
  EC9D    23             C      	inx	h 
  EC9E    36 0F          C      	mvi	m,1111B 
  ECA0    23             C      	inx	H 
  ECA1    36 02          C      	mvi	m,2 
  ECA3    C9             C      	ret 
                         C       
                         C      ;------------------------- 
  ECA4    69             C      SETDMA:	MOV	L,C 
  ECA5    60             C      	MOV	H,B 
  ECA6    22 ECC8        C      	SHLD	DMA_ADDR 
  ECA9    C9             C      	RET 
                         C       
                         C      ;============ FLOPPY DISK OPERATIONS ============ 
                         C       
                         C       
                         C      ;***************************************** 
                         C      ; READ CURRENT RECORD (128 BYTES) 
                         C      ;  TRACK & SECTOR DEFINES RECORD 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-92


                         C      ;	POSITION 
                         C      ;\ 
  ECAA                   C      RD_REC: 
  ECAA    3A ECC7        C      	LDA	CPM_DISK 
  ECAD    FE 00          C      	CPI	SD 
  ECAF    C3 F0B7        C      	JMP	SD_R 
                         C      	;JZ	SD_R 
                         C      	;CPI	RAMDISK 
                         C      	;JZ	RamD_R 
                         C      	;jmp	FlpD_R 
                         C       
                         C      ;********************************************** 
                         C      ; WRITE CURRENT RECORD TO DISK 
                         C      ;  (TRACK) & (SECTOR) DEFINES RECORD 
                         C      ;		POSITION 
  ECB2                   C      WR_REC:: 
  ECB2    3A ECC7        C      	LDA	CPM_DISK 
  ECB5    FE 00          C      	CPI	SD 
  ECB7    C3 F0CD        C      	JMP	SD_W 
                         C      	;JZ	SD_W 
                         C      	;CPI	RAMDISK 
                         C      	;JZ	RamD_W	; Check for ramdisk call. 
                         C      	;jmp	FlpD_W 
                         C       
                         C       
  ECBA    00             C      OLDDSK::	DB	0	; LAST CP/M DISK 
                         C       
                         C       
                         C       
  ECBB    3E FF          C      BAD::	MVI	A,0FFH 
  ECBD    32 ECC1        C      	STA	_IO_RESULT 
  ECC0    C9             C      	RET 
                         C       
                         C      ;	CALL	PRNT## 
                         C      ;	DB	10,13,'Bad sector ',0 
                         C      ;	JMP	0 
                         C       
                         C      ; -------------------------------------------------------- 
                         C      ;		CP/M DISK BIOS VARIABLES 
                         C       
  ECC1                   C      _IO_RESULT:DS	1 
  ECC2                   C      SECT::	ds	1 
  ECC3                   C      SIDE::	ds	1 
  ECC4                   C      DRIVE:	ds	1 
                         C       
  ECC5    00             C      CPM_TRACK::	DB	0 
  ECC6    00             C      CPM_RECORD::	DB	0 
  ECC7    00             C      CPM_DISK::	DB	0 
                         C       
  ECC8    0000           C      DMA_ADDR::	DW	0 
  ECCA    0000           C      _DPTR:		DW	0 
                         C       
                         C      ;STK_SAVE:	DS	2 
  ECCC                   C      OLDF40::		ds	1 
                         C      ;		END 
                                		;include FDCNTR.ASM 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-93


                         C      include B1CONIO.ASM 
                         C      ;************************************************** 
                         C      ;*  B1CONIO.ASM - RK CP/M BIOS console I/O module * 
                         C      ;*	(c) TCHV,		1990-92		  * 
                         C      ;************************************************** 
                         C       
                         C      ; NOTE: This module is designed for use with 8275 display controller 
                         C      ; and 8257 DMA chip 
                         C       
  ECCD                   C      CONVER:: 
  ECCD    0A 0D 43 6F    C      	DB	10,13,'Console I/O        V3.0 Healh/Zenith',0 
  ECD1    6E 73 6F 6C    C      
  ECD5    65 20 49 2F    C      
  ECD9    4F 20 20 20    C      
  ECDD    20 20 20 20    C      
  ECE1    20 56 33 2E    C      
  ECE5    30 20 48 65    C      
  ECE9    61 6C 68 2F    C      
  ECED    5A 65 6E 69    C      
  ECF1    74 68 00       C      
                         C       
                         C      ; This module defines following procedures : 
                         C      PUBLIC		CON_ST,CONIN,CONOUT 
                         C      PUBLIC		PRNT,PUTS 
                         C       
                         C      ;INCLUDE RK86.MAC 
                         C      ;INCLUDE 82XX.MAC 
                         C      ;INCLUDE SCREEN.MAC 
                         C       
                         C      ;------------------ Console Input ------------------------ 
                         C       
  ECF4                   C      CON_ST: 
                         C      IFNDEF OWN_GETC 
                         C      	JMP	0F812H 
                         C      ELSE 
  ECF4    C3 F2DA        C      	JMP	GETST 
                         C      ENDIF 
                         C       
  ECF7                   C      CONIN:: 
                         C      IFDEF OWN_GETC 
  ECF7    CD F2D0        C      	CALL	GETCHR 
                         C      ELSE 
                         C      	CALL 0F803H 
                         C      ENDIF 
  ECFA    B7             C      	ora	a 
  ECFB    CA ED09        C      	jz	ChangeViewMode 
  ECFE    FE 20          C      	cpi	20h 
  ED00    DA ED29        C      	jc	CorrCntrl 
  ED03    FE 7F          C      	cpi	7fh 
  ED05    CA ED29        C      	jz	CorrCntrl 
  ED08    C9             C      	ret 
                         C       
  ED09                   C      ChangeViewMode: 
  ED09    E5             C      	push	h 
  ED0A    2A ED23        C      	lhld	ViewPtr 
  ED0D    23             C      	inx	h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-94


  ED0E    7E             C      	mov	a,m 
  ED0F    B7             C      	ora	a 
  ED10    C2 ED16        C      	jnz	$+6 
  ED13    21 ED25        C      	lxi	h,ViewTbl 
  ED16    7E             C      	mov	a,m 
  ED17    22 ED23        C      	shld	ViewPtr 
  ED1A    E1             C      	pop	h 
  ED1B    32 ED28        C      	sta	ViewMode 
                         C      	;sta	SCR_BUFF 
                         C      IFNDEF	RK60K 
                         C      	@out	PALM_CNTRL 
  ED1E    D3 C0          C+     	out	PALM_CNTRL 
                         C      ENDIF 
  ED20    C3 ECF7        C      	jmp	CONIN 
                         C       
  ED23    ED25           C      ViewPtr: dw	ViewTbl 
  ED25    C0 80 00       C      ViewTbl: db	0c0h,80h,0 ; 84h,85h,80h,0 ; ,81h,0 - Not necesarry 
  ED28    C0             C      ViewMode:db	0C0h;84H 
                         C       
                         C      ; Perform key translation Acc->Acc 
  ED29                   C      CorrCntrl: 
  ED29    E5             C      	push	h 
  ED2A    C5             C      	push	b 
  ED2B    47             C      	mov	b,a 
                         C      	@in	PPI+2 
  ED2C    DB 02          C+     	in	PPI+2 
  ED2E    4F             C      	MOV	C,A 
  ED2F    3E 20          C      	mvi	a,?SHIFT 
  ED31    A1             C      	ana	c 
  ED32    CA ED50        C      	jz	@exit 
  ED35    79             C      	mov	a,c 
  ED36    E6 40          C      	ani	?CTRL 
  ED38    C2 ED3F        C      	jnz	@001 
  ED3B    3E 80          C      	mvi	a,80h 
  ED3D    B0             C      	ora	b 
  ED3E    47             C      	mov	b,a 
  ED3F                   C      @001: 
  ED3F    21 ED56        C      	lxi	h,CorrTbl 
  ED42    7E             C      @loop:	mov	a,m 
  ED43    23             C      	inx	h 
  ED44    23             C              inx	h 
  ED45    3C             C      	inr	a 
  ED46    CA ED50        C      	jz	@exit 
  ED49    3D             C      	dcr	a 
  ED4A    B8             C      	cmp	b 
  ED4B    C2 ED42        C      	jnz	@loop 
  ED4E    2B             C      	dcx	h 
  ED4F    46             C      	mov	b,m 
  ED50    78             C      @exit:	mov	a,b 
  ED51    E6 7F          C      	ani	7fh 
  ED53    C1             C      	pop	b 
  ED54    E1             C      	pop	h 
  ED55    C9             C      	ret 
                         C       
                         C      ; Key translation table 
  ED56                   C      CorrTbl: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-95


                         C      ;****  Arrow keys **** 
  ED56    19 05          C      	db	19h,	'E'-40h	; Up 
  ED58    1A 18          C      	db	1Ah,	'X'-40h ; Down 
  ED5A    08 08          C      	db	8,	'H'-40h	; Left 
  ED5C    18 04          C      	db	18h,	'D'-40h	; Right 
                         C      ;*** Cntrl+Arrow keys *** 
  ED5E    99 12          C      	db	19h+80h,'R'-40h	; ^Up 
  ED60    9A 03          C      	db	1Ah+80h,'C'-40h ; ^Down 
  ED62    88 01          C      	db	8+80h,	'A'-40h	; ^Left 
  ED64    98 06          C      	db	18h+80h,'F'-40h	; ^Right 
                         C      ;*** Other keys *** 
  ED66    7F 08          C      	db	7fh,	8 
                         C       
  ED68    FF             C      	db	0ffh 
                         C       
                         C      ;------------------- Console output ----------------------------- 
                         C       
  ED69    E1             C      PRNT::	POP	H 
  ED6A    CD ED6E        C      	CALL	PUTS 
  ED6D    E9             C      	pchl 
                         C       
  ED6E                   C      PUTS: 
  ED6E    7E             C      PRNT1:	MOV	A,M 
  ED6F    23             C      	INX	H 
  ED70    4F             C      	MOV	C,A 
  ED71    B7             C      	ORA	A 
  ED72    C8             C      	RZ 
  ED73    CD ED79        C      	CALL	CONOUT 
  ED76    C3 ED6E        C      	JMP	PRNT1 
                         C       
                         C       
  ED79    E5             C      CONOUT:	PUSH	H 
  ED7A    C5             C      	PUSH	B 
  ED7B    D5             C      	PUSH	D 
  ED7C    F5             C      	PUSH	PSW 
  ED7D    3A ED28        C      	LDA	ViewMode 
                         C      	;STA	SCR_BUFF 
                         C      IFNDEF	RK60K 
                         C      	@out	PALM_CNTRL 
  ED80    D3 C0          C+     	out	PALM_CNTRL 
                         C      ENDIF 
  ED82    79             C      	MOV	A,C 
  ED83    E6 7F          C      	ANI	7FH 
  ED85    2A EFF7        C      	LHLD	CHPNT 
  ED88    CD ED99        C      	CALL	OUTC 
  ED8B    22 EFF7        C      	SHLD	CHPNT 
                         C       
  ED8E    2A EFFA        C      	lhld	CURX 
  ED91    CD EF9B        C      	call	GOTOXY 
  ED94    F1             C      	POP	PSW 
  ED95    D1             C      	POP	D 
  ED96    C1             C      	POP	B 
  ED97    E1             C      	POP	H 
  ED98    C9             C      	RET 
                         C       
  ED99    47             C      OUTC:	MOV	B,A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-96


  ED9A    3A EFF9        C      	LDA	?ESC 
  ED9D    B7             C      	ORA	A 
  ED9E    CA EE22        C      	JZ	@@@ 
  EDA1    3D             C      	DCR	A 
  EDA2    32 EFF9        C      	STA	?ESC 
  EDA5    CA EE87        C      	JZ	_ESC2 
  EDA8    3D             C      	DCR	A 
  EDA9    CA EE6B        C      	JZ	_ESC1 
  EDAC    78             C      	MOV	A,B 
  EDAD    FE 59          C      	CPI	'Y' 
  EDAF    C8             C      	RZ 
  EDB0    F5             C      	PUSH	PSW 
  EDB1    AF             C      	XRA	A 
  EDB2    32 EFF9        C      	STA	?ESC 
  EDB5    F1             C      	POP	PSW 
  EDB6    FE 41          C      	cpi	'A' 
  EDB8    CA EF03        C      	jz	Up 
  EDBB    FE 42          C      	cpi	'B' 
  EDBD    CA EF20        C      	jz	Down 
  EDC0    FE 43          C      	cpi	'C' 
  EDC2    CA EEE9        C      	jz	LEFT 
  EDC5    FE 44          C      	cpi	'D' 
  EDC7    CA EEF9        C      	jz	Right 
  EDCA    FE 45          C      	CPI	45H 
  EDCC    CA EF64        C      	JZ	CLS 
  EDCF    D6 4B          C      	SUI	4BH 
  EDD1    CA EE18        C      	JZ	DELEOL 
  EDD4    3D             C      	DCR	A 
  EDD5    CA EDF5        C      	JZ	INSLIN 
  EDD8    3D             C      	DCR	A 
  EDD9    C0             C      	RNZ 
                         C      ; Delete line contains the cursor 
  EDDA    E5             C      DELLIN:	PUSH	H 
  EDDB    2A EFFC        C      	LHLD	STRADR 
  EDDE    54             C      	MOV	D,H 
  EDDF    5D             C      	MOV	E,L 
  EDE0    CD EF94        C      	CALL	NXT_S 
  EDE3    7E             C      DL0:	MOV	A,M 
  EDE4    12             C      	STAX	D 
  EDE5    23             C      	INX	H 
  EDE6    13             C      	INX	D 
  EDE7    7A             C      	MOV	A,D 
  EDE8    FE FF          C      	CPI	high(ENDSCR) 
  EDEA    C2 EDE3        C      	JNZ	DL0 
  EDED    7B             C      	MOV	A,E 
  EDEE    FE 58          C      	CPI	low(ENDSCR) 
  EDF0    C2 EDE3        C      	JNZ	DL0 
  EDF3    E1             C      	POP	H 
  EDF4    C9             C      	RET 
                         C       
                         C      ; INSERT LINE UNDER CURSOR 
  EDF5    E5             C      INSLIN:	PUSH	H 
  EDF6    2A EFFC        C      	LHLD	STRADR 
  EDF9    11 FF58        C      	LXI	D,ENDSCR 
  EDFC    01 FF0A        C      	LXI	B,ENDSCR-PHYS_W 
  EDFF    0B             C      CPY:	DCX	B 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-97


  EE00    1B             C      	DCX	D 
  EE01    0A             C      	LDAX	B 
  EE02    12             C      	STAX	D 
  EE03    78             C      	MOV	A,B 
  EE04    BC             C      	CMP	H 
  EE05    C2 EDFF        C      	JNZ	CPY 
  EE08    79             C      	MOV	A,C 
  EE09    BD             C      	CMP	L 
  EE0A    C2 EDFF        C      	JNZ	CPY 
                         C       
  EE0D    3E 4E          C      	MVI	A,SCR_W 
  EE0F    36 00          C      FILL:	MVI	M,0 
  EE11    23             C      	INX	H 
  EE12    3D             C      	DCR	A 
  EE13    C2 EE0F        C      	JNZ	FILL 
  EE16    E1             C      	POP	H 
  EE17    C9             C              RET 
                         C       
                         C       
                         C      ; DELETE TO END OF LINE 
  EE18    E5             C      DELEOL:	PUSH	H 
  EE19    2A EFF7        C      	LHLD	CHPNT 
  EE1C    3A EFFA        C      	LDA	CURX 
  EE1F    C3 EE0F        C      	JMP	FILL 
                         C       
                         C       
  EE22    78             C      @@@:	MOV	A,B 
  EE23    FE 1B          C      	CPI	@ESC 
  EE25    CA EE65        C      	JZ	_ESC 
  EE28    FE 0D          C      	CPI	0DH 
  EE2A    CA EF39        C      	JZ	@CR 
  EE2D    FE 0A          C      	CPI	0AH 
  EE2F    CA EF43        C      	JZ	@LF 
  EE32    FE 08          C      	CPI	8 
  EE34    CA EEE9        C      	JZ	LEFT 
  EE37    FE 07          C      	CPI	7 
  EE39    CA EE98        C      	JZ	BELL 
  EE3C    FE 1F          C      	CPI	1FH 
  EE3E    CA EF64        C      	JZ	CLS 
  EE41    77             C      	MOV	M,A 
  EE42    23             C      	INX	H 
  EE43    3A EFFA        C      	LDA	CURX 
  EE46    3D             C      	DCR	A 
  EE47    32 EFFA        C      	STA	CURX 
  EE4A    C0             C      	RNZ 
  EE4B    3A EFF5        C      	LDA	XSIZE 
  EE4E    32 EFFA        C      	STA	CURX 
  EE51    2A EFFC        C      	LHLD	STRADR 
  EE54    CD EF94        C      	CALL	NXT_S 
  EE57    3A EFFB        C      	LDA	CURY 
  EE5A    3D             C      	DCR	A 
  EE5B    CA EE9E        C      	JZ	SCRUP 
  EE5E    32 EFFB        C      	STA	CURY 
  EE61    22 EFFC        C      	SHLD	STRADR 
  EE64    C9             C      	RET 
                         C       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-98


  EE65    3E 03          C      _ESC:	MVI	A,3 
  EE67    32 EFF9        C      	STA	?ESC 
  EE6A    C9             C      	RET 
                         C       
  EE6B    3A EFF6        C      _ESC1:	LDA	YSIZE 
  EE6E    F5             C      	PUSH	PSW 
  EE6F    C6 20          C      	ADI	20H 
  EE71    90             C      	SUB	B 
  EE72    32 EFFB        C      	STA	CURY 
  EE75    47             C      	MOV	B,A 
  EE76    F1             C      	POP	PSW 
  EE77    90             C      	SUB	B 
  EE78    2A EFF3        C      	LHLD	BEGSCR 
  EE7B    3C             C      	INR	A 
  EE7C    22 EFFC        C      _@ESC:	SHLD	STRADR 
  EE7F    3D             C      	DCR	A 
  EE80    C8             C      	RZ 
  EE81    CD EF94        C      	CALL	NXT_S 
  EE84    C3 EE7C        C      	JMP	_@ESC 
                         C       
  EE87    3A EFF5        C      _ESC2:	LDA	XSIZE 
  EE8A    C6 20          C      	ADI	20H 
  EE8C    90             C      	SUB	B 
  EE8D    32 EFFA        C      	STA	CURX 
  EE90    78             C      	MOV	A,B 
  EE91    D6 20          C      	SUI	20H 
  EE93    4F             C      	MOV	C,A 
  EE94    06 00          C      	MVI	B,0 
  EE96    09             C      	DAD	B 
  EE97    C9             C      	RET 
                         C       
  EE98    E5             C      BELL:	PUSH	H 
  EE99    CD FD24        C      	CALL	0FD24H 
  EE9C    E1             C      	POP	H 
  EE9D    C9             C      	RET 
                         C       
  EE9E    2A EFFC        C      SCRUP:	LHLD	STRADR 
                         C       
  EEA1    E5             C      SCROLL:	PUSH	H 
  EEA2    2A EFF3        C      	LHLD	BEGSCR 
  EEA5    54             C      	MOV	D,H 
  EEA6    5D             C      	MOV	E,L 
  EEA7    CD EF94        C              CALL	NXT_S 
  EEAA    3A EFF6        C      	LDA	YSIZE 
  EEAD    3D             C      	DCR	A 
  EEAE    4F             C      	MOV	C,A 
  EEAF    3A EFF5        C      SCRU0:	LDA	XSIZE 
  EEB2    47             C      	MOV	B,A 
  EEB3    7E             C      SCRU1:	MOV	A,M 
  EEB4    12             C      	STAX	D 
  EEB5    23             C      	INX	H 
  EEB6    13             C      	INX	D 
  EEB7    05             C      	DCR	B 
  EEB8    C2 EEB3        C      	JNZ	SCRU1 
  EEBB    CD EED6        C      	CALL	NEXTST 
  EEBE    EB             C      	XCHG 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-99


  EEBF    CD EED6        C      	CALL	NEXTST 
  EEC2    EB             C      	XCHG 
  EEC3    0D             C      	DCR	C 
  EEC4    C2 EEAF        C      	JNZ	SCRU0 
  EEC7    2A EFFC        C      	LHLD	STRADR 
  EECA    3A EFF5        C      	LDA	XSIZE 
  EECD    36 00          C      SCRU2:	MVI	M,0 
  EECF    23             C      	INX	H 
  EED0    3D             C      	DCR	A 
  EED1    C2 EECD        C       	JNZ	SCRU2 
  EED4    E1             C      	POP	H 
  EED5    C9             C      	RET 
                         C       
  EED6    3A EFF5        C      NEXTST:	LDA	XSIZE 
  EED9    2F             C      	CMA 
  EEDA    3C             C      	INR	A 
  EEDB    C6 4E          C      	ADI	PHYS_W 
  EEDD    85             C      	ADD	L 
  EEDE    6F             C      	MOV	L,A 
  EEDF    D0             C      	RNC 
  EEE0    24             C      	INR	H 
  EEE1    C9             C      	RET 
                         C       
  EEE2    C5             C      PrevST:	push	b 
  EEE3    01 FFB2        C      		lxi	b,-Phys_W 
  EEE6    09             C      		dad	b 
  EEE7    C1             C      	pop	b 
  EEE8    C9             C      	RET 
                         C       
                         C       
  EEE9    3A EFFA        C      LEFT:	LDA	CURX 
  EEEC    3C             C      	INR	A 
  EEED    47             C      	MOV	B,A 
  EEEE    3A EFF5        C      	LDA	XSIZE 
  EEF1    B8             C      	CMP	B 
  EEF2    D8             C      	RC 
  EEF3    78             C      	MOV	A,B 
  EEF4    32 EFFA        C      	STA	CURX 
  EEF7    2B             C      	DCX	H 
  EEF8    C9             C      	RET 
                         C       
                         C       
  EEF9    3A EFFA        C      RIGHT:	LDA	CURX 
  EEFC    3D             C      	DCR	A 
  EEFD    C8             C      	RZ 
  EEFE    32 EFFA        C      	STA	CURX 
  EF01    23             C      	INX	H 
  EF02    C9             C      	RET 
                         C       
                         C       
  EF03    3A EFFB        C      UP:	LDA	CURY 
  EF06    3C             C      	INR	A 
  EF07    47             C      	MOV	B,A 
  EF08    3A EFF6        C      	LDA	YSIZE 
  EF0B    B8             C      	CMP	B 
  EF0C    D8             C      	rc	; JC	LFT0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-100


  EF0D    78             C      	MOV	A,B 
  EF0E    32 EFFB        C      	STA	CURY 
  EF11    CD EEE2        C      	call	PrevSt 
  EF14    E5             C      	push	h 
  EF15    2A EFFC        C              LHLD	STRADR 
  EF18    CD EEE2        C      	call	PrevSt 
  EF1B    22 EFFC        C      	shld	STRADR 
  EF1E    E1             C      	pop	h 
  EF1F    C9             C      	RET 
                         C       
                         C       
                         C       
  EF20    3A EFFB        C      DOWN:	LDA	CURY 
  EF23    3D             C      	DCR	A 
  EF24    CA EF38        C      	JZ	DWN0 
  EF27    32 EFFB        C      	STA	CURY 
                         C       
  EF2A    E5             C      	push	h 
  EF2B    2A EFFC        C      	LHLD	STRADR 
  EF2E    CD EF94        C      	CALL	Nxt_S 
  EF31    22 EFFC        C      	SHLD	STRADR 
  EF34    E1             C      	pop	h 
  EF35    C3 EF94        C      	jmp	Nxt_S 
                         C       
  EF38    C9             C      DWN0:	RET 
                         C       
                         C       
  EF39    3A EFF5        C      @CR:	LDA	XSIZE 
  EF3C    32 EFFA        C      	STA	CURX 
  EF3F    2A EFFC        C      	LHLD	STRADR 
  EF42    C9             C      	RET 
                         C       
  EF43    EB             C      @LF:	XCHG 
  EF44    2A EFFC        C      	LHLD	STRADR 
  EF47    CD EF94        C      	CALL	NXT_S 
  EF4A    EB             C      	XCHG 
  EF4B    CD EF94        C      	CALL	NXT_S 
  EF4E    3A EFFB        C      	LDA	CURY 
  EF51    3D             C      	DCR	A 
  EF52    CA EF5E        C      	JZ	SCRLL 
  EF55    32 EFFB        C      	STA	CURY 
  EF58    EB             C      	XCHG 
  EF59    22 EFFC        C      	SHLD	STRADR 
  EF5C    EB             C      	XCHG 
  EF5D    C9             C      	RET 
                         C       
  EF5E    2A EFF7        C      SCRLL:	LHLD	CHPNT 
  EF61    C3 EEA1        C      	JMP	SCROLL 
                         C       
  EF64    CD EF81        C      CLS:	CALL	@HOME 
                         C      IF 1 
  EF67    E5             C      	PUSH	H 
  EF68    D5             C      	PUSH	D 
  EF69    01 0249        C      	LXI	B,SCR_SIZE/4 
  EF6C    21 0000        C      	LXI	H,0 
  EF6F    54             C      	MOV	D,H 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-101


  EF70    5C             C      	MOV	E,H 
  EF71    39             C      	DAD	SP 
  EF72    31 FFF4        C      	LXI	SP,SCR_BUFF+SCR_SIZE 
  EF75                   C      CLS0: 
  EF75    D5             C      	PUSH	D 
  EF76    D5             C      	PUSH	D 
  EF77    0B             C      	DCX	B 
  EF78    78             C      	MOV	A,B 
  EF79    B1             C      	ORA	C 
  EF7A    C2 EF75        C      	JNZ	CLS0 
  EF7D    F9             C      	SPHL 
  EF7E    D1             C      	POP	D 
  EF7F    E1             C      	POP	H 
  EF80    C9             C      	RET 
                         C      ELSE 
                         C      	LDA	YSIZE 
                         C      	MOV	B,A 
                         C      	PUSH	H 
                         C      CLS0:	LDA	XSIZE 
                         C      	MOV	C,A 
                         C      	PUSH	H 
                         C      CLS1:	MVI	M,0 
                         C      	INX	H 
                         C      	DCR	C 
                         C      	JNZ	CLS1 
                         C      	POP	H 
                         C      	CALL	NXT_S 
                         C      	DCR	B 
                         C      	JNZ	CLS0 
                         C      	POP	H 
                         C      	RET 
                         C      ENDIF 
                         C       
  EF81    2A EFF3        C      @HOME:	LHLD	BEGSCR 
  EF84    22 EFFC        C      	SHLD	STRADR 
  EF87    3A EFF5        C      	LDA	XSIZE 
  EF8A    32 EFFA        C      	STA	CURX 
  EF8D    3A EFF6        C      	LDA	YSIZE 
  EF90    32 EFFB        C      	STA	CURY 
  EF93    C9             C      	RET 
                         C       
                         C       
  EF94    C5             C      NXT_S:	PUSH	B 
  EF95    01 004E        C      	LXI	B,PHYS_W 
  EF98    09             C      	DAD	B 
  EF99    C1             C      	POP	B 
  EF9A    C9             C      	RET 
                         C       
                         C      ;*********** 8275 chip dependent features **************** 
                         C       
                         C      ; Set CURSOR to position  HL : (Y,X) 
  EF9B    3E 80          C      GOTOXY:	MVI	A,80H	; Cursor move command 
                         C      	@OUT	DISP+1 
  EF9D    D3 21          C+     	out	DISP+1 
                         C       
  EF9F    45             C      	MOV	B,L 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-102


  EFA0    3A EFF5        C      	LDA	XSIZE 
  EFA3    90             C      	SUB	B 
                         C      	@out	DISP 
  EFA4    D3 20          C+     	out	DISP 
                         C       
  EFA6    44             C      	MOV	B,H 
  EFA7    3A EFF6        C      	LDA	YSIZE 
  EFAA    90             C      	SUB	B 
  EFAB    C6 02          C      	ADI	FirstStr 
                         C      	@OUT	DISP 
  EFAD    D3 20          C+     	out	DISP 
  EFAF    C9             C      	RET 
                         C       
                         C      ;EXTRN	Disp_PB 
                         C       
                         C      ; Set a screen mode according to Disp_PB 
  EFB0                   C      SETSCR:: 
  EFB0    E5             C      	PUSH	H 
  EFB1    C5             C      	PUSH	B 
                         C       
                         C      ; *** Load 8275 controller **** 
                         C       
  EFB2    AF             C      	XRA	A 
                         C      	@OUT	DISP+1	; Stop displaying 
  EFB3    D3 21          C+     	out	DISP+1 
                         C       
  EFB5    0E 04          C      	MVI	C,4 
  EFB7    21 EFFE        C      	lxi	h,Disp_PB	; Display parameter block 
                         C      	rept	4 
                         C      		mov	a,m 
                         C      		inx	h 
                         C      		@out	DISP 
                         C      	endm 
  EFBA    7E             C+     		mov	a,m 
  EFBB    23             C+     		inx	h 
  EFBC    D3 20          C+     	out	DISP 
  EFBE    7E             C+     		mov	a,m 
  EFBF    23             C+     		inx	h 
  EFC0    D3 20          C+     	out	DISP 
  EFC2    7E             C+     		mov	a,m 
  EFC3    23             C+     		inx	h 
  EFC4    D3 20          C+     	out	DISP 
  EFC6    7E             C+     		mov	a,m 
  EFC7    23             C+     		inx	h 
  EFC8    D3 20          C+     	out	DISP 
                         C       
  EFCA    3E 27          C      	mvi	a,27H 
                         C      	@out	DISP+1 
  EFCC    D3 21          C+     	out	DISP+1 
                         C      	@in	DISP+1	; Clear RVV flag 
  EFCE    DB 21          C+     	in	DISP+1 
  EFD0                   C      @wait_RVV: 
                         C      	@in	DISP+1	; Wait RVV signal 
  EFD0    DB 21          C+     	in	DISP+1 
  EFD2    E6 20          C      	ANI	DISP_INTR_Flag 
  EFD4    CA EFD0        C      	JZ	@wait_RVV 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-103


                         C       
                         C      ;*** Load 8257 controller *** 
                         C       
  EFD7    3E 80          C      	mvi	a,80h 
                         C      	@out	DMA+8	; Control register 
  EFD9    D3 38          C+     	out	DMA+8 
                         C       
                         C      	rept	2 
                         C      		mov	a,m 
                         C      		@out	DMA+4	; Load channel 3 
                         C      		inx	h 
                         C      	endm 
  EFDB    7E             C+     		mov	a,m 
  EFDC    D3 34          C+     	out	DMA+4 
  EFDE    23             C+     		inx	h 
  EFDF    7E             C+     		mov	a,m 
  EFE0    D3 34          C+     	out	DMA+4 
  EFE2    23             C+     		inx	h 
                         C       
  EFE3    7E             C      	mov	a,m 
                         C      	@out	DMA+5 
  EFE4    D3 35          C+     	out	DMA+5 
  EFE6    23             C      	inx	h 
  EFE7    7E             C      	mov	a,m 
  EFE8    F6 40          C      	ori	40h 
                         C      	@out	DMA+5 
  EFEA    D3 35          C+     	out	DMA+5 
  EFEC    3E A4          C      	mvi	a,0a4h 
                         C      	@out	DMA+8 
  EFEE    D3 38          C+     	out	DMA+8 
  EFF0    C1             C      	POP	B 
  EFF1    E1             C      	POP	H 
  EFF2    C9             C      	RET 
                         C       
                         C      ; User defined window coordinates 
  EFF3    F76C           C      BEGSCR:	DW	VRAM 
  EFF5    4E             C      XSIZE:	DB	SCR_W 
  EFF6    1A             C      YSIZE:	DB	SCR_H 
                         C      ;*************************************** 
                         C       
                         C      ; Internal variables 
  EFF7    F76C           C      CHPNT:	DW	VRAM	; Current position in screen buffer 
  EFF9    00             C      ?ESC:	DB	0	; ESC sequence flag 
                         C       
  EFFA    4E             C      CURX:	DB	SCR_W	; Current cursor location ( from DOWN-RIGHT corner) 
  EFFB    1A             C      CURY:	DB	SCR_H 
  EFFC    F76C           C      STRADR:	DW	VRAM	; Start of current line 
                         C      ;	end 
                         C       
                         C      include B1DISPB.ASM 
                         C      ; *****	B1DISPB.ASM - Display parameter block ********* 
                         C       
                         C      ;INCLUDE A:SCREEN.MAC 
                         C       
  0000                   C      S	equ	0b	; All/Odd lines to display    (0/1) 
  0001                   C      VV	equ	01b	; Frame reverse time:   00 - 1 T_Row 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-104


                         C      ;						01 - 2 T_Row 
                         C      ;						02 - 3 T_Row 
                         C      ;						03 - 4 T_Row 
  000F                   C      UUUU	equ	16-1	; Cursor scan line number     (1..16) 
  000F                   C      LLLL	equ	16-1	; Number of scan lines/symbol (1..16) 
  0000                   C      @M	equ	0	; Count lines 0 -  from 0  ; 1 - from 1 
  0001                   C      @F	equ	1	; Display ctrl symbols : 0 - as space 
  0001                   C      CC	equ	01	; Cursor style 		      (0..3) 
                         C      ;						 1 - no display 
  0008                   C      ZZZZ	equ	08h	; Horizontal RVV time 
                         C       
  EFFE    4D             C      Disp_PB::	db	S*128+PHYS_W-1 
  EFFF    5D             C      		db	VV*64+PHYS_H-1	; Display parameters 
  F000    FF             C      		db	UUUU*16+LLLL 
  F001    58             C      		db	@M*128+@F*64+CC*16+ZZZZ 
  F002    F6D0 0923      C      		dw	SCR_BUFF,PHYS_W*PHYS_H-1; DMA parameters 
                         C      ;		END 
                         C       
                         C      		include B1LSTAUX.ASM 
                         C      ;	B0LSTAUX.ASM - LST AND AUX FUNCTIONS 
  F006    0A 0D 4C 53    C      LSTVER::	DB	10,13,'LST/AUX DRIVER V3.02     31-May-1993',0 
  F00A    54 2F 41 55    C      
  F00E    58 20 44 52    C      
  F012    49 56 45 52    C      
  F016    20 56 33 2E    C      
  F01A    30 32 20 20    C      
  F01E    20 20 20 33    C      
  F022    31 2D 4D 61    C      
  F026    79 2D 31 39    C      
  F02A    39 33 00       C      
                         C       
                         C      ;INCLUDE RK86.MAC 
                         C       
                         C      ;--------- AUX DRIVER       (C) TCHV ------------ 
                         C       
  F02D    C9             C      PUNCH::		RET 
                         C       
  F02E    3E 1A          C      READER::	MVI	A,1AH 
  F030    C9             C      		RET 
                         C       
                         C      ;--------- LST DRIVER       (C) TCHV --------------- 
  F031    C3 F037        C      LSTOUT::	JMP	LPUTC 
  F034    3E FF          C      LST_ST::	MVI	A,0FFH 
  F036    C9             C      		RET 
                         C       
  0001                   C      MC6312	EQU	1 
                         C       
                         C      if 	MC6312	; MC6312 printer with centronix interface 
  0000                   C      TextTransl	equ	0 
  0000                   C      TabReplace	equ	0 
  0000                   C      NoPrint		equ	0 
  0001                   C      CENTRONIX	equ	1 
                         C      else 
                         C      TextTransl	equ	1 
                         C      TabReplace	equ	1 
                         C      NoPrint		equ	0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-105


                         C      endif 
                         C       
                         C      IF 	NoPrint 
                         C      LPUTC:		RET 
                         C      ELSE 
  0008                   C      TabSize 	equ	8 
                         C       
                         C       
                         C      IF 	TabReplace 
                         C      ExpandTab: 
                         C      	push	b 
                         C      	lda	TabLeft 
                         C      	mvi	c,20h 
                         C      @exp_tab_loop: 
                         C      	call	Raw_LPUTC 
                         C      	dcr	a 
                         C      	jnz	@exp_Tab_Loop 
                         C      	mvi	a,TabSize 
                         C      	sta	TabLeft 
                         C      	pop	b 
                         C      	pop	psw 
                         C      	ret 
                         C      ENDIF 
                         C       
  F037                   C      LPUTC: 
  F037    F5             C      	push	psw 
                         C      IF	TabReplace 
                         C      	mov	a,c 
                         C      	cpi	9 
                         C      	jz	ExpandTab 
                         C      	cpi	0Ah 
                         C      	jz	@01 
                         C      	lda	TabLeft 
                         C      	dcr	a 
                         C      	sta	TabLeft 
                         C      	jnz	@00 
                         C      @01:	mvi	a,TabSize 
                         C      	sta	TabLeft 
                         C      @00: 
                         C      ENDIF 
                         C      IF	TextTransl 
                         C      	mov	a,c 
                         C      	cpi	60h 
                         C      	jc	@3 
                         C       
                         C      	cpi	80h 
                         C      	jnc	@1 
                         C      	adi	0c0h-60h 
                         C      	jmp	@3 
                         C       
                         C      @1:	cpi	80h+40h 
                         C      	jc	@3 
                         C       
                         C      	cpi	80h+60h 
                         C      	jnc	@2 
                         C      	adi	20h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-106


                         C      	jmp	@3 
                         C       
                         C      @2:	sui	80h 
                         C      @3:	mov	c,a 
                         C      ENDIF 
  F038    F1             C      	pop	psw 
  F039                   C      Raw_LPUTC: 
                         C       
  0011                   C      PPI2_B	EQU	PPI2+1 
  0012                   C      PPI2_C	EQU	PPI2+2 
  0013                   C      PPI2_CR	EQU	PPI2+3 
                         C       
  F039    F5             C      	push	psw 
  F03A    3A F066        C      	lda	PPI_Init_flag 
  F03D    B7             C      	ora	a 
  F03E    C2 F048        C      	jnz	@skip 
  F041    3E 91          C      	mvi	a,91H 
                         C      	@out	PPI2_CR 
  F043    D3 13          C+     	out	PPI2_CR 
  F045    32 F066        C      	sta	PPI_Init_flag 
  F048    3E 0F          C      @skip:	MVI	A,@set 
                         C      	@out	PPI2_CR 
  F04A    D3 13          C+     	out	PPI2_CR 
  F04C                   C      @L_wait: 
                         C      	@in	PPI2_C	; Wait for busy signal 
  F04C    DB 12          C+     	in	PPI2_C 
                         C      ifdef	CENTRONIX 
  F04E    E6 01          C      	ani	00000001b 
  000F                   C      @set	equ	0fh 
  000E                   C      @clr	equ	0eh 
                         C      else 
                         C      @set	equ	0eh 
                         C      @clr	equ	0fh 
                         C      	ani	00000011b 
                         C      endif 
                         C       
  F050    C2 F04C        C      	jnz	@L_wait 
  F053    79             C      	mov	a,c 
                         C      	@out	PPI2_B 
  F054    D3 11          C+     	out	PPI2_B 
  F056    3E 0E          C      	mvi	a,@clr 
                         C      	@out	PPI2_CR 
  F058    D3 13          C+     	out	PPI2_CR 
  F05A    3E 3F          C      	MVI	A,3FH 
  F05C                   C      @L_delay: 
  F05C    3D             C      	DCR	A 
  F05D    C2 F05C        C      	JNZ	@L_Delay 
  F060    3E 0F          C      	MVI	A,@SET 
                         C      	@OUT	PPI2_CR 
  F062    D3 13          C+     	out	PPI2_CR 
  F064    F1             C      	pop	psw 
  F065    C9             C      	RET 
                         C       
  F066    00             C      PPI_Init_Flag:	db	0 
                         C      IF	TabReplace 
                         C      TabLeft:	db	TabSize 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-107


                         C      ENDIF 
                         C      ENDIF	; NoPrint 
                         C      ;	END 
                         C       
                                ;include B0FLPDSK.ASM 
                         C      include B0FlpDmy.ASM 
  F067                   C      FlpD_I: 
  F067    AF             C      	XRA	A 
  F068    32 ECBA        C      	STA	OLDDSK 
  F06B    C9             C      	RET 
  F06C                   C      FLSH_WB: 
  F06C                   C      WT_END_CMD: 
  F06C                   C      ChgDrive: 
  F06C                   C      FlpD_R: 
  F06C                   C      FlpD_W: 
  F06C    C9             C      	RET 
                         C      ; Disk parameters 
  F06D                   C      FLP_TBL:: 
  F06D    04             C      RecsPerSect:	db	4 
  F06E    09             C      MaxSect:	db	9	; Maximum sector number 
  F06F    0F             C      FullMask:	db	0fh	; Full sector mask 
  F070    02             C      SectShift:	db	2 
                         C       
  F071    00             C      LAST_OPER:	DB	0 
                                ;include b0RAMDSK.ASM 
                         C      include B0SD.ASM 
                         C      ; 	B0SD.ASM - RK-86 SD card operations 
                         C       
                         C      ;	 7-sep-1993 - separate module 
                         C      	.8080 
                         C       
                         C      PUBLIC	SD_R,SD_W 
                         C       
                         C      ;EXTRN	CPM_RECORD,CPM_TRACK,DMA_ADDR	; From BxDISK module 
                         C       
                         C      IFNDEF	USE_PRG_DC 
                         C      SAV_SYS:: 
                         C      	RET 
                         C      LD_SYS:: 
                         C      	LXI	H,CPM_BIN 
                         C      	MVI	D,0 
                         C      	CALL	CmdOpenDelete 
                         C      	LXI	D,0 
                         C      	LXI	H,4+(CCP_START-100h) 
                         C      	MVI	B,0 
                         C      	CALL	CmdSeekGetSize 
                         C       
                         C      	LXI	D,C_BASE 
                         C      	LXI	H,B_BASE-C_BASE;C_SIZE+D_SIZE 
                         C      	CALL	CmdRead 
                         C      	JMP	SD_I01 
                         C       
                         C      CPM_BIN: 
                         C      	DS	64 
                         C      ELSE 
  F072                   C      SAV_SYS:: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-108


  F072    21 0000        C      	LXI	H,0 
  F075    39             C      	DAD	SP 
  F076    22 F0B5        C      	SHLD	STK 
                         C       
  F079    11 D200        C      	LXI	D,C_BASE 
  F07C    21 0000        C      	LXI	H, 0 
  F07F    C3 F08F        C      	JMP	LD_S01 
                         C       
  F082                   C      LD_SYS:: 
  F082    21 0000        C      	LXI	H,0 
  F085    39             C      	DAD	SP 
  F086    22 F0B5        C      	SHLD	STK 
  F089    21 D200        C      	LXI	H,C_BASE 
  F08C    11 0000        C      	LXI	D,0 
  F08F    01 0580        C      LD_S01:	LXI	B, (B_BASE-C_BASE) / 4 
                         C       
  F092    3E C1          C      	MVI	A,0C1H 
                         C      	@out	PALM_CNTRL 
  F094    D3 C0          C+     	out	PALM_CNTRL 
                         C       
  F096    EB             C      	XCHG 
  F097    F9             C      	SPHL 
  F098    EB             C      	XCHG 
  F099    04             C      	INR	B 
  F09A                   C      @02:	REPT	2 
                         C      	POP	D	; 10 
                         C      	MOV	M,E	; 7 
                         C      	INX	H	; 5 
                         C      	MOV	M,D	; 7 
                         C      	INX	H	; 5 = 34 
                         C      	ENDM 
  F09A    D1             C+     	POP	D	; 10 
  F09B    73             C+     	MOV	M,E	; 7 
  F09C    23             C+     	INX	H	; 5 
  F09D    72             C+     	MOV	M,D	; 7 
  F09E    23             C+     	INX	H	; 5 = 34 
  F09F    D1             C+     	POP	D	; 10 
  F0A0    73             C+     	MOV	M,E	; 7 
  F0A1    23             C+     	INX	H	; 5 
  F0A2    72             C+     	MOV	M,D	; 7 
  F0A3    23             C+     	INX	H	; 5 = 34 
                         C       
  F0A4    0D             C      	DCR	C	; 5 
  F0A5    C2 F09A        C      	JNZ	@02	; 10 = 49 / 2 bytes = 25 or (34 * 2 + 15)/4 = 21 
  F0A8    05             C      	DCR	B 
  F0A9    C2 F09A        C      	JNZ	@02 
  F0AC    2A F0B5        C      	LHLD	STK 
  F0AF    F9             C      	SPHL 
                         C       
  F0B0    3E C0          C      	MVI	A,0C0H 
                         C      	@out	PALM_CNTRL 
  F0B2    D3 C0          C+     	out	PALM_CNTRL 
  F0B4    C9             C      	RET 
                         C       
                         C       
                         C      IF	0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-109


                         C      ; 
                         C      ;void *memcpy(dest,source,n) 
                         C      ; void *dest,*source; size_t n; 
                         C      ; 
                         C      memcpy:: 
                         C      @01: 
                         C      	MOV	A,C	; 5 
                         C      	ORA	B	; 4 
                         C      	JZ	@00	; 10 
                         C      	LDAX	D	; 7 
                         C      	INX	D	; 5 
                         C      	MOV	M,A	; 7 
                         C      	INX	H	; 5 
                         C      	DCX	B	; 5 
                         C      	JMP	@01	; 10 = 58 
                         C      @00: 
                         C      ENDIF 
                         C       
  F0B5                   C      STK:	DS	2 
                         C      ENDIF 
                         C       
                         C      ;------ RAM DISK OPERATIONS ------------- 
                         C      ; READ ONE SECTOR FROM RAM DISK 
  F0B7    CD F0FA        C      SD_R:	CALL	SD_SEEK 
  F0BA    2A ECC8        C      	LHLD	DMA_ADDR 
  F0BD    EB             C      	XCHG 
  F0BE    21 0080        C      	LXI	h,128 
  F0C1    CD F196        C      	CALL	CmdRead 
  F0C4                   C      SD_ERR_CHECK: 
  F0C4    AF             C      	XRA	A 
  F0C5    C9             C      	RET 
  F0C6    B7             C      	ORA	A 
  F0C7    3E 00          C      	MVI	A,0 
  F0C9    C8             C      	RZ 
  F0CA    3E 01          C      	MVI	A,1 
  F0CC    C9             C      	RET 
                         C       
                         C      ; WRITE ONE SECTOR TO RAM DISK 
  F0CD    E5             C      SD_W:	PUSH	H 
  F0CE    D5             C      	PUSH	D 
  F0CF    C5             C      	PUSH	B 
  F0D0    CD F0FA        C      	CALL	SD_SEEK 
  F0D3    2A ECC8        C      	LHLD	DMA_ADDR 
  F0D6    EB             C      	XCHG 
  F0D7    21 0080        C      	LXI	h,128 
  F0DA    CD F1A6        C      	CALL	CmdWrite 
  F0DD    C1             C      	POP	B 
  F0DE    D1             C      	POP	D 
  F0DF    E1             C      	POP	H 
  F0E0    AF             C      	XRA	A 
  F0E1    C9             C      	RET 
                         C      	;JMP	SD_ERR_CHECK 
                         C       
  F0E2                   C      SD_I:: 
                         C       
  F0E2                   C      SD_I01: 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-110


  F0E2    21 F13C        C      	LXI	H,FNAME 
  F0E5    E5             C      	PUSH	H 
  F0E6    11 0004        C      	LXI	D,4 
  F0E9    19             C      	DAD	D 
  F0EA    3A ECC7        C      	LDA	CPM_DISK 
  F0ED    32 ECBA        C      	STA	OLDDSK 
  F0F0    C6 41          C      	ADI	'A' 
  F0F2    77             C      	MOV	M,A 
  F0F3    E1             C      	POP	H 
                         C       
  F0F4    16 00          C      	MVI	D,0 
  F0F6    CD F15D        C      	CALL	CmdOpenDelete 
                         C      	;LXI	D,BUF 
                         C      	;LXI	H,16 
                         C      	;CALL	CmdRead 
  F0F9    C9             C      	RET 
                         C       
  F0FA                   C      SD_SEEK: 
  F0FA    3A ECBA        C      	LDA	OLDDSK 
  F0FD    47             C      	MOV	B,A 
  F0FE    3A ECC7        C      	LDA	CPM_DISK 
  F101    B8             C      	CMP	B 
  F102    CA F108        C      	JZ	SD_S01 
  F105    CD F0E2        C      	CALL	SD_I01 
  F108                   C      SD_S01: 
  F108    3A ECC5        C      	LDA	CPM_TRACK 
  F10B    6F             C      	MOV	L,A 
  F10C    26 00          C      	MVI	H,0 
  F10E    29             C      	DAD	H 
  F10F    29             C      	DAD	H 
  F110    29             C      	DAD	H 
  F111    54             C      	MOV	D,H 
  F112    5D             C      	MOV	E,L 
  F113    29             C      	DAD	H 
  F114    29             C      	DAD	H 
  F115    3A ECC7        C      	LDA	CPM_DISK 
  F118    FE 02          C      	CPI	2 
  F11A    CA F121        C      	JZ	SD_S02 
  F11D    19             C      	DAD	D ; hl = trk*1024*5*2/256 
  F11E    C3 F122        C      	JMP	SD_S03 
  F121                   C      SD_S02: 
  F121    29             C      	DAD	H 
  F122                   C      SD_S03: 
  F122    16 00          C      	MVI	D,0 
  F124    5C             C      	MOV	E,H 
  F125    65             C      	MOV	H,L 
  F126    6A             C      	MOV	L,D 
                         C      	;MOV	B,D 
                         C      	;PUSH	D 
                         C      	;XCHG 
                         C      	;LHLD	DATA_ADDR 
                         C      	;DAD	D 
                         C      	;POP	D 
  F127    AF             C      	XRA	A 
  F128    3A ECC6        C      	LDA	CPM_RECORD ; A*128->BC 
  F12B    3D             C      	DCR	A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-111


  F12C    1F             C      	RAR 
  F12D    47             C      	MOV	B,A 
  F12E    3E 00          C      	MVI	A,0 
  F130    1F             C      	RAR 
  F131    4F             C      	MOV	C,A 
  F132    09             C      	DAD	B 
  F133    D2 F137        C      	JNC	@cmp12 
  F136    13             C      	INX	D 
  F137                   C      @cmp12: 
  F137    06 00          C      	MVI	B,0 
  F139    C3 F174        C      	JMP	CmdSeekGetSize 
                         C       
                         C      ;BUF:	DS	16 
                         C      ;DATA_ADDR	EQU	BUF+0Ah 
  F13C    43 50 4D 2F    C      FNAME:	DB	'CPM/A.KDI',0 
  F140    41 2E 4B 44    C      
  F144    49 00          C      
                         C      ;	END 
                         C      include sdbios.asm 
                         C      ; SD BIOS for Computer "Radio 86RK" 
                         C      ; (c) 09-10-2014 vinxru (aleksey.f.morozov@gmail.com) 
                         C       
                         C           ;.org 07600h-683 ; Onqkedmhi a`ir jnd` dnkfem a{r| 075FFh 
                         C                              
                         C      ;---------------------------------------------------------------------------- 
                         C       
                         C      ;INIT_VIDEO      EQU SETSCR;0F82DH 
  0010                   C      USER_PORT       EQU PPI2    ; @dpeq JP580BB55 
                         C      ;INIT_STACK      EQU 0B6CFh 
  0080                   C      SEND_MODE       EQU 10000000b ; Pefhl oeped`wh (1 0 0 A QH 0 B CL) 
  0090                   C      RECV_MODE       EQU 10010000b ; Pefhl ophel` (1 0 0 A QH 0 B CL) 
                         C       
  0040                   C      ERR_START   	EQU 040h 
  0041                   C      ERR_WAIT    	EQU 041h 
  0042                   C      ERR_OK_NEXT 	EQU 042h 
  0043                   C      ERR_OK          EQU 043h 
  0044                   C      ERR_OK_READ     EQU 044h 
  0045                   C      ERR_OK_ENTRY    EQU 045h 
  0046                   C      ERR_OK_WRITE	EQU 046h 
  0047                   C      ERR_OK_ADDR  	EQU 047h 
  004F                   C      ERR_OK_BLOCK    EQU 04Fh  
                         C       
  0000                   C      VER_BUF         EQU 0 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; G`cnknbnj RK t`ik` 
                         C       
                         C           ;db ($+2)>>8, ($+2)&0FFh 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      	       
                         C      ;Entry: 
                         C      ;     ; Sqr`m`bkhb`el cp`mhvs qbnandmni o`lrh 
                         C      ;     LXI	H, SELF_NAME 
                         C      ;     CALL	0F833h 
                         C      ; 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-112


                         C      ;     ; B{bnd m`gb`mh jnmrpnkkep` m` }jp`m 
                         C      ;     LXI	H, aHello 
                         C      ;     CALL	0F818h 
                         C      ; 
                         C      ;     ; B{bnd bepqhh jnmrpnkkep` 
                         C      ;     CALL	PrintVer 
                         C      ; 
                         C      ;     ; Oepebnd qrpnjh 
                         C      ;     lxi	h, aCrLf 
                         C      ;     CALL	0F818h 
                         C      ; 
                         C      ;     ; G`osqj`el t`ik SHELL.RK aeg jnl qrpnjh 
                         C      ;     LXI	H, aShellRk 
                         C      ;     LXI	D, aEmpty 
                         C      ;     CALL	CmdExec 
                         C      ;     PUSH	PSW 
                         C      ; 
                         C      ;     ; Nxhaj` - t`ik me m`idem 
                         C      ;     CPI	04h 
                         C      ;     JNZ 	Error2 
                         C      ; 
                         C      ;     ; B{bnd qnnayemh "T@IK ME M@IDEM BOOT/SHELL.RK" 
                         C      ;     LXI	H, aErrorShellRk 
                         C      ;     CALL	0F818h 
                         C      ;     JMP	$ 
                         C      ; 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ; 
                         C      ;PrintVer: 
                         C      ;     ; Jnl`md` onkswemh bepqhh 
                         C      ;     MVI	A, 1 
                         C      ;     CALL	StartCommand	; Khxmhi r`jr b jnrnpnl opnosqrhl bepqh~ 
                         C      ;     CALL	SwitchRecv 
                         C      ;      
                         C      ;     ; Onksw`el bepqh~ m`anp` jnl`md h rejqr 
                         C      ;     LXI	B, VER_BUF 
                         C      ;     LXI	D, 18          ; 1 {i a`ir bepqh, onqkedmhi a`ir - nrosqj`el xhms 
                         C      ;     CALL	RecvBlock 
                         C      ;           
                         C      ;     ; B{bnd bepqhh fekeg` 
                         C      ;     XRA	A 
                         C      ;     STA	VER_BUF+17 
                         C      ;     LXI	H, VER_BUF+1 
                         C      ;     JMP 	0F818h 
                         C      ; 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ; 
                         C      ;aHello:         db 13,10,"SD BIOS V1.0",13,10 
                         C      ;aSdController:  db "SD CONTROLLER ",0 
                         C      ;aCrLf:          db 13,10,0 
                         C      ;aErrorShellRk:  db "fajl ne najden " 
                         C      ;aShellRk:       db "BOOT/SHELL.RK",0 
                         C      ;                db "(c) 04-05-2014 vinxru" 
                         C      ; 
                         C      ;; Jnd mhfe asder g`repr jnl qrpnjni h qnaqrbem{l hlemel 
                         C      ; 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-113


                         C      ;SELF_NAME    EQU $-512 ; osr| (astep 256 a`ir) 
                         C      ;CMD_LINE     EQU  $-256 ; jnl`md`m` qrpnj` 256 a`ir 
                         C      ; 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ;; PEGHDEMRM@_ W@QR\ SD BIOS 
                         C      ;;---------------------------------------------------------------------------- 
                         C      ; 
                         C      ;aError:    db "o{ibka SD " 
                         C      ;aEmpty:    db 0 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Rsr bnqqr`m`bkhb`erq rn, wrn lnfmn a{r| hqonpwemn oph qane 
                         C       
                         C      ;Error:      
                         C      ;     ; Hmhvh`khg`vh qrej` 
                         C      ;     LXI	SP, INIT_STACK 
                         C      ; 
                         C      ;     ; Qnup`mel jnd nxhajh 
                         C      ;     PUSH	PSW 
                         C      ; 
                         C      ;     ; Nwhqrj` }jp`m` 
                         C      ;     ; Qm`w`k` m`dn sd`khr| hg nak`qrh }jp`m` bqe qoev qhlbnk{, ` rn qhmup` qahb`erq 
                         C      ;     MVI	C, 1Fh 
                         C      ;     CALL	0F809h      
                         C      ;     ; @ reoep| oepeg`cpsghr| bhdenjnmrpnkkep 
                         C      ;     CALL       INIT_VIDEO 
                         C      ; 
                         C      ;Error2: 
                         C      ;     ; B{bnd rejqr` "NXHAJ@ SD " 
                         C      ;     LXI	H, aError 
                         C      ;     CALL	0F818h 
                         C      ; 
                         C      ;     ; B{bnd jnd` nxhajh 
                         C      ;     POP	PSW 
                         C      ;     CALL	0F815h 
                         C      ; 
                         C      ;     ; Bhqmel 
                         C      ;     JMP	$ 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C       
  F146                   C      BiosEntry: 
  F146    E5             C           PUSH       H 
  F147    21 F14F        C           LXI	H, JmpTbl 
  F14A    85             C           ADD	L 
  F14B    6F             C           MOV	L, A 
  F14C    6E             C           MOV	L, M 
  F14D    E3             C           XTHL 
  F14E    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Qrp`mhv` 8D00. Bqe oepeund{ JmpTbl b opedek`u ndmni qrp`mhv{ 
                         C       
  F14F                   C      JmpTbl: 
  F14F    0000           C           dw 0;CmdExec           ; 0 HL-hl t`ik`, DE-jnl`mdm` qrpnj`  / A-jnd nxhajh 
  F151    0000           C           dw 0;CmdFind           ; 1 HL-hl t`ik`, DE-l`jqhlsl t`iknb dk g`cpsgjh, BC-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-114


  F153    F15D           C           dw CmdOpenDelete     ; 2 D-pefhl, HL-hl t`ik` / A-jnd nxhajh 
  F155    F174           C           dw CmdSeekGetSize    ; 3 B-pefhl, DE:HL-onghvh / A-jnd nxhajh, DE:HL-onghvh 
  F157    F196           C           dw CmdRead           ; 4 HL-p`glep, DE-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
  F159    F1A6           C           dw CmdWrite          ; 5 HL-p`glep, DE-`dpeq / A-jnd nxhajh 
  F15B    0000           C           dw 0;CmdMove           ; 6 HL-hg, DE-b / A-jnd nxhajh 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-osr|, DE-l`jqhlsl t`iknb dk g`cpsgjh, BC-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
                         C       
                         C      ;CmdFind: 
                         C      ;     ; Jnd jnl`md{ 
                         C      ;     MVI	A, 3 
                         C      ;     CALL	StartCommand 
                         C      ; 
                         C      ;     ; Osr| 
                         C      ;     CALL	SendString 
                         C      ; 
                         C      ;     ; L`jqhlsl t`iknb 
                         C      ;     XCHG 
                         C      ;     CALL	SendWord 
                         C      ; 
                         C      ;     ; Oepejk~w`elq b pefhl ophel` 
                         C      ;     CALL	SwitchRecv 
                         C      ; 
                         C      ;     ; Qwerwhj 
                         C      ;     LXI	H, 0 
                         C      ; 
                         C      ;CmdFindLoop: 
                         C      ;     ; Fdel onj` LJ opnwhr`er 
                         C      ;     CALL	WaitForReady 
                         C      ;     CPI	ERR_OK 
                         C      ;     JZ		Ret0 
                         C      ;     CPI	ERR_OK_ENTRY 
                         C      ;     JNZ	EndCommand 
                         C      ; 
                         C      ;     ; Ophel aknj` d`mm{u 
                         C      ;     LXI	D, 20	; Dkhm` aknj` 
                         C      ;     CALL	RecvBlock 
                         C      ; 
                         C      ;     ; Sbekhwhb`el qwerwhj t`iknb 
                         C      ;     INX	H 
                         C      ; 
                         C      ;     ; Vhjk 
                         C      ;     JMP	CmdFindLoop 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; D-pefhl, HL-hl t`ik` / A-jnd nxhajh 
                         C       
  F15D                   C      CmdOpenDelete:  
                         C           ; Jnd jnl`md{ 
  F15D    3E 04          C           MVI	A, 4 
  F15F    CD F1D0        C           CALL	StartCommand 
                         C       
                         C           ; Pefhl 
  F162    7A             C           MOV	A, D 
  F163    CD F29C        C           CALL	Send 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-115


                         C       
                         C           ; Hl t`ik` 
  F166    CD F235        C           CALL	SendString 
                         C       
                         C           ; Fdel onj` LJ qnnap`ghr 
  F169    CD F246        C           CALL	SwitchRecvAndWait 
  F16C    FE 43          C           CPI	ERR_OK 
  F16E    CA F21D        C           JZ		Ret0 
  F171    C3 F21E        C           JMP	EndCommand 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      ; B-pefhl, DE:HL-onghvh / A-jnd nxhajh, DE:HL-onghvh 
                         C       
  F174                   C      CmdSeekGetSize: 
                         C           ; Jnd jnl`md{ 
  F174    3E 05          C           MVI 	A, 5 
  F176    CD F1D0        C           CALL	StartCommand 
                         C       
                         C           ; Pefhl      
  F179    78             C           MOV	A, B 
  F17A    CD F29C        C           CALL	Send 
                         C       
                         C           ; Onghvh      
  F17D    CD F22D        C           CALL	SendWord 
  F180    EB             C           XCHG 
  F181    CD F22D        C           CALL	SendWord 
                         C       
                         C           ; Fdel onj` LJ qnnap`ghr. LJ dnkfem nrberhr| jndnl ERR_OK 
  F184    CD F246        C           CALL	SwitchRecvAndWait 
  F187    FE 43          C           CPI	ERR_OK 
  F189    C2 F21E        C           JNZ	EndCommand 
                         C       
                         C           ; Dkhm` t`ik` 
  F18C    CD F224        C           CALL	RecvWord 
  F18F    EB             C           XCHG 
  F190    CD F224        C           CALL	RecvWord 
                         C       
                         C           ; Pegsk|r`r 
  F193    C3 F21D        C           JMP	Ret0 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-p`glep, DE-`dpeq / HL-qjnk|jn g`cpsghkh, A-jnd nxhajh 
                         C       
  F196                   C      CmdRead: 
                         C           ; Jnd jnl`md{ 
  F196    3E 06          C           MVI	A, 6 
  F198    CD F1D0        C           CALL	StartCommand 
                         C       
                         C           ; @dpeq b BC 
  F19B    42             C           MOV	B, D 
  F19C    4B             C           MOV	C, E 
                         C       
                         C           ; P`glep aknj` 
  F19D    CD F22D        C           CALL	SendWord        ; HL-p`glep 
                         C       
                         C           ; Oepejk~w`elq b pefhl ophel` 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-116


  F1A0    CD F241        C           CALL	SwitchRecv 
                         C       
                         C           ; Ophel aknj`. M` bunde `dpeq BC, ophmr` dkhm` b HL 
  F1A3    C3 F273        C           JMP	RecvBuf 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-p`glep, DE-`dpeq / A-jnd nxhajh 
                         C       
  F1A6                   C      CmdWrite: 
                         C           ; Jnd jnl`md{ 
  F1A6    3E 07          C           MVI	A, 7 
  F1A8    CD F1D0        C           CALL	StartCommand 
                         C            
                         C           ; P`glep aknj` 
  F1AB    CD F22D        C           CALL	SendWord        ; HL-p`glep 
                         C       
                         C           ; Reoep| `dpeq b HL 
  F1AE    EB             C           XCHG 
                         C       
  F1AF                   C      CmdWriteFile2: 
                         C           ; Pegsk|r`r b{onkmemh jnl`md{ 
  F1AF    CD F246        C           CALL	SwitchRecvAndWait 
  F1B2    FE 43          C           CPI  	ERR_OK 
  F1B4    CA F21D        C           JZ  	Ret0 
  F1B7    D6 46          C           SUI  	ERR_OK_WRITE 
  F1B9    C2 F21E        C           JNZ	EndCommand 
                         C       
                         C           ; P`glep aknj`, jnrnp{i lnfer ophmr| LJ b DE 
  F1BC    CD F224        C           CALL	RecvWord 
                         C       
                         C           ; Oepejk~w`elq b pefhl oeped`wh     
  F1BF    CD F215        C           CALL	SwitchSend 
                         C       
                         C           ; Oeped`w` aknj`. @dpeq HL, dkhm` DE. (Lnfmn norhlhghpnb`r| vhjk) 
  F1C2                   C      CmdWriteFile1: 
  F1C2    7E             C           MOV	A, M 
  F1C3    23             C           INX	H 
  F1C4    CD F29C        C           CALL	Send 
  F1C7    1B             C           DCX	D 
  F1C8    7A             C           MOV	A, D 
  F1C9    B3             C           ORA	E 
  F1CA    C2 F1C2        C           JNZ 	CmdWriteFile1 
                         C       
  F1CD    C3 F1AF        C           JMP	CmdWriteFile2 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-hg, DE-b / A-jnd nxhajh 
                         C       
                         C      ;CmdMove:      
                         C      ;     ; Jnd jnl`md{ 
                         C      ;     MVI	A, 8 
                         C      ;     CALL	StartCommand 
                         C      ; 
                         C      ;     ; Hl t`ik` 
                         C      ;     CALL	SendString 
                         C      ; 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-117


                         C      ;     ; Fdel onj` LJ qnnap`ghr 
                         C      ;     CALL	SwitchRecvAndWait 
                         C      ;     CPI	ERR_OK_WRITE 
                         C      ;     JNZ	EndCommand 
                         C      ; 
                         C      ;     ; Oepejk~w`elq b pefhl oeped`wh 
                         C      ;     CALL	SwitchSend 
                         C      ; 
                         C      ;     ; Hl t`ik` 
                         C      ;     XCHG 
                         C      ;     CALL	SendString 
                         C       
                         C      ;WaitEnd: 
                         C      ;     ; Fdel onj` LJ qnnap`ghr 
                         C      ;     CALL	SwitchRecvAndWait 
                         C      ;     CPI	ERR_OK 
                         C      ;     JZ		Ret0 
                         C      ;     JMP	EndCommand 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; HL-hl t`ik`, DE-jnl`mdm` qrpnj` / A-jnd nxhajh 
                         C       
                         C      ;CmdExec: 
                         C      ;     ; Jnd jnl`md{ 
                         C      ;     MVI	A, 2 
                         C      ;     CALL	StartCommand 
                         C      ; 
                         C      ;     ; Hl t`ik` 
                         C      ;     PUSH	H 
                         C      ;     CALL	SendString 
                         C      ;     POP	H 
                         C      ; 
                         C      ;     ; Fdel onj` LJ opnwhr`er t`ik 
                         C      ;     ; LJ dnkfem nrberhr| jndnl ERR_OK_ADDR 
                         C      ;     CALL	SwitchRecvAndWait 
                         C      ;     CPI	ERR_OK_ADDR 
                         C      ;     JNZ	EndCommand 
                         C      ; 
                         C      ;     ; Qnup`mel hl t`ik` (HL-qrpnj`) 
                         C      ;     PUSH	D 
                         C      ;     XCHG 
                         C      ;     LXI	H, SELF_NAME 
                         C      ;     CALL	strcpy255 
                         C      ;     POP	D 
                         C      ; 
                         C      ;     ; Qnup`mel jnl`mdms~ qrpnjs (DE-qrpnj`) 
                         C      ;     LXI	H, CMD_LINE 
                         C      ;     CALL	strcpy255 
                         C      ; 
                         C      ;     ; *** ]rn rnwj` mebngbp`r`. K~a` nxhaj` ophbeder j oepeg`cpsgje. *** 
                         C      ; 
                         C      ;     ; Hmhvh`khg`vh qrej` (`m`knchwmn qr`md`prmnls lnmhrnps) 
                         C      ;     LXI	SP, INIT_STACK 
                         C      ; 
                         C      ;     ; Ophmhl`el `dpeq g`cpsgjh b BC h qnup`mel ecn b qrej 
                         C      ;     CALL	RecvWord 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-118


                         C      ;     PUSH	D 
                         C      ;     MOV 	B, D 
                         C      ;     MOV 	C, E 
                         C      ; 
                         C      ;     ; G`cpsf`el t`ik 
                         C      ;     CALL	RecvBuf 
                         C      ;     JNZ 	Error 
                         C      ; 
                         C      ;     ; Nwhqrj` }jp`m` 
                         C      ;     ; Qm`w`k` m`dn sd`khr| hg nak`qrh }jp`m` bqe qoev qhlbnk{, ` rn qhmup` qahb`erq 
                         C      ;     MVI	C, 1Fh 
                         C      ;     CALL	0F809h      
                         C      ;     ; @ reoep| oepeg`cpsghr| bhdenjnmrpnkkep 
                         C      ;     CALL       INIT_VIDEO 
                         C      ; 
                         C      ;     ; M`qrpnijh dk opncp`ll{ 
                         C      ;     MVI  A, 1		; Bepqh jnmrpnkkep` 
                         C      ;     LXI  B, BiosEntry  ; Rnwj` bund` SD BIOS 
                         C      ;     LXI  D, SELF_NAME  ; Qnaqrbemmne hl 
                         C      ;     LXI  H, CMD_LINE   ; Jnl`mdm` qrpnj` 
                         C      ; 
                         C      ;     ; G`osqj g`cpsfemmni opncp`ll{ 
                         C      ;     RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; ]rn a{k` onqkedm jnl`md`. D`k|xe qrp`mhv` 8E00. 
                         C      ;---------------------------------------------------------------------------- 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; M`w`kn k~ani jnl`md{.  
                         C      ; A - jnd jnl`md{ 
                         C       
  F1D0                   C      StartCommand: 
                         C           ; Oepb{l }r`onl opnhqundhr qhmupnmhg`vh q jnmrpnkkepnl 
                         C           ; Ophmhl`erq 256 ono{rnj, b j`fdni hg jnrnp{u opnosqj`erq 256+ a`ir 
                         C           ; Rn eqr| }rn l`jqhl`k|mne jnk-bn d`mm{u, jnrnpne lnfer oeped`r| jnmrpnkkep 
  F1D0    C5             C           PUSH	B 
  F1D1    E5             C           PUSH	H 
  F1D2    F5             C           PUSH	PSW 
  F1D3    0E 00          C           MVI	C, 0 
                         C       
  F1D5                   C      StartCommand1: 
                         C           ; Pefhl oeped`wh (nqbnanfd`el xhms) h hmhvh`khghpsel HL 
  F1D5    CD F241        C           CALL       SwitchRecv 
                         C       
                         C           ; M`w`kn k~ani jnl`md{ (}rn xhm` `dpeq`) 
                         C           ;LXI	H, USER_PORT+1 
                         C           ;MVI       M,0 
  F1D8    AF             C           XRA        A 
                         C           @out        USER_PORT+1 
  F1D9    D3 11          C+     	out	USER_PORT+1 
                         C           ;MVI        M, 44h 
  F1DB    3E 44          C           MVI        A,44h 
                         C           @out        USER_PORT+1 
  F1DD    D3 11          C+     	out	USER_PORT+1 
                         C           ;MVI        M, 40h 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-119


  F1DF    3E 40          C           MVI        A,40h 
                         C           @out        USER_PORT+1 
  F1E1    D3 11          C+     	out	USER_PORT+1 
                         C           ;MVI        M, 0h 
  F1E3    AF             C           XRA        A 
                         C           @out        USER_PORT+1 
  F1E4    D3 11          C+     	out	USER_PORT+1 
                         C       
                         C           ; Eqkh eqr| qhmupnmhg`vh, rn jnmrpnkkep nrberhr ERR_START 
  F1E6    CD F29E        C           CALL	Recv 
  F1E9    FE 40          C           CPI	ERR_START 
  F1EB    CA F204        C           JZ		StartCommand2 
                         C       
                         C           ; O`sg`. H g` ndmn opnosqj`el 256 a`ir (b qslle asder  
                         C           ; opnosyemn 64 Ja d`mm{u, l`jqhl`k|m{i p`glep o`jer`) 
  F1EE    C5             C           PUSH	B 
  F1EF    0E 00          C           MVI	C, 0 
  F1F1                   C      StartCommand3: 
  F1F1    CD F29E        C           CALL	Recv 
  F1F4    0D             C           DCR	C 
  F1F5    C2 F1F1        C           JNZ	StartCommand3 
  F1F8    C1             C           POP	B 
                         C               
                         C           ; Ono{rjh 
  F1F9    0D             C           DCR	C 
  F1FA    C2 F1D5        C           JNZ	StartCommand1     
                         C       
                         C           ; Jnd nxhajh 
  F1FD    3E 40          C           MVI	A, ERR_START 
  F1FF                   C      StartCommandErr2: 
  F1FF    C1             C           POP	B ; Opnxkne gm`wemhe PSW 
  F200    E1             C           POP	H ; Opnxkne gm`wemhe H 
  F201    C1             C           POP	B ; Opnxkne gm`wemhe B      
  F202    C1             C           POP	B ; B{undhl wepeg tsmjvh~. 
  F203    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Qhmupnmhg`vh q jnmrpnkkepnl eqr|. Jnmrpnkkep dnkfem nrberhr| ERR_OK_NEXT 
                         C       
  F204                   C      StartCommand2: 
                         C           ; Nrber         	 
  F204    CD F249        C           CALL	WaitForReady 
  F207    FE 42          C           CPI	ERR_OK_NEXT 
  F209    C2 F1FF        C           JNZ	StartCommandErr2 
                         C       
                         C           ; Oepejk~w`elq b pefhl oeped`wh 
  F20C    CD F215        C           CALL       SwitchSend 
                         C       
  F20F    F1             C           POP        PSW 
  F210    E1             C           POP        H 
  F211    C1             C           POP        B 
                         C       
                         C           ; Oeped`el jnd jnl`md{ 
  F212    C3 F29C        C           JMP        Send 
                         C       
                         C      ;---------------------------------------------------------------------------- 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-120


                         C      ; Oepejk~whr|q b pefhl oeped`wh 
                         C       
  F215                   C      SwitchSend: 
  F215    CD F29E        C           CALL	Recv 
  F218                   C      SwitchSend0: 
  F218    3E 80          C           MVI	A, SEND_MODE 
                         C           @out	USER_PORT+3 
  F21A    D3 13          C+     	out	USER_PORT+3 
  F21C    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Sqoexmne njnmw`mhe jnl`md{  
                         C      ; h dnonkmhrek|m{i r`jr, wrn a{ LJ nrosqrhk xhms 
                         C       
  F21D                   C      Ret0: 
  F21D    AF             C           XRA	A 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Njnmw`mhe jnl`md{ q nxhajni b A  
                         C      ; h dnonkmhrek|m{i r`jr, wrn a{ LJ nrosqrhk xhms 
                         C       
  F21E                   C      EndCommand: 
  F21E    F5             C           PUSH	PSW 
  F21F    CD F29E        C           CALL	Recv 
  F222    F1             C           POP	PSW 
  F223    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Ophmr| qknbn b DE  
                         C      ; Onprhl A. 
                         C       
  F224                   C      RecvWord: 
  F224    CD F29E        C          CALL Recv 
  F227    5F             C          MOV  E, A 
  F228    CD F29E        C          CALL Recv 
  F22B    57             C          MOV  D, A 
  F22C    C9             C          RET 
                         C           
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nrop`bhr| qknbn hg HL  
                         C      ; Onprhl A. 
                         C       
  F22D                   C      SendWord: 
  F22D    7D             C          MOV		A, L 
  F22E    CD F29C        C          CALL	Send 
  F231    7C             C          MOV		A, H 
  F232    C3 F29C        C          JMP		Send 
                         C           
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nrop`bj` qrpnjh 
                         C      ; HL - qrpnj` 
                         C      ; Onprhl A. 
                         C       
  F235                   C      SendString: 
  F235    AF             C           XRA	A 
  F236    B6             C           ORA	M 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-121


  F237    CA F29C        C           JZ		Send 
  F23A    CD F29C        C           CALL	Send 
  F23D    23             C           INX	H 
  F23E    C3 F235        C           JMP	SendString 
                         C            
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Oepejk~whr|q b pefhl ophel` 
                         C       
  F241                   C      SwitchRecv: 
  F241    3E 90          C           MVI	A, RECV_MODE 
                         C           @out	USER_PORT+3 
  F243    D3 13          C+     	out	USER_PORT+3 
  F245    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Oepejk~whr|q b pefhl oeped`lh h nfhd`mhe cnrnbmnqrh LJ. 
                         C       
  F246                   C      SwitchRecvAndWait: 
  F246    CD F241        C           CALL SwitchRecv 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nfhd`mhe cnrnbmnqrh LJ. 
                         C       
  F249                   C      WaitForReady: 
  F249    CD F29E        C           CALL	Recv 
  F24C    FE 41          C           CPI	ERR_WAIT 
  F24E    CA F249        C           JZ		WaitForReady 
  F251    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Ophmr| DE a`ir on `dpeqs BC 
                         C      ; Onprhl A 
                         C       
  F252                   C      RecvBlock: 
  F252    E5             C           PUSH	H 
  F253    21 0011        C           LXI 	H, USER_PORT+1 
  F256    14             C           INR 	D 
  F257    AF             C           XRA 	A 
  F258    B3             C           ORA 	E 
  F259    CA F26D        C           JZ 	RecvBlock2 
                         C       
  F25C                   C      RecvBlock1: 
                         C      IF 1 
                         C           ;MVI        M, 20h			; 7 
  F25C    3E 20          C           MVI        A, 20h 
                         C           @out       USER_PORT+1 
  F25E    D3 11          C+     	out	USER_PORT+1 
                         C           ;MVI        M, 0			; 7 
  F260    AF             C           XRA        A 
                         C           @out       USER_PORT+1 
  F261    D3 11          C+     	out	USER_PORT+1 
                         C      ELSE 
                         C           MVI        M, 20h			; 7 
                         C           MVI        M, 0			; 7 
                         C      ENDIF 
  F263    00             C           NOP 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-122


  F264    00             C           NOP 
                         C           @in	USER_PORT		; 13 
  F265    DB 10          C+     	in	USER_PORT 
  F267    02             C           STAX	B		        ; 7 
  F268    03             C           INX	B		        ; 5 
  F269    1D             C           DCR	E		        ; 5 
  F26A    C2 F25C        C           JNZ	RecvBlock1		; 10 = 54 
  F26D                   C      RecvBlock2: 
  F26D    15             C           DCR	D 
  F26E    C2 F25C        C           JNZ	RecvBlock1 
  F271    E1             C           POP	H 
  F272    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; G`cpsgj` d`mm{u on `dpeqs BC.  
                         C      ; M` b{unde HL qjnk|jn g`cpsghkh 
                         C      ; Onprhl A 
                         C      ; Eqkh g`cpsfemn aeg nxhanj, m` b{unde Z=1 
                         C       
  F273                   C      RecvBuf: 
  F273    21 0000        C           LXI	H, 0 
  F276                   C      RecvBuf0:    
                         C           ; Ondnfd`r| 
  F276    CD F249        C           CALL	WaitForReady 
  F279    FE 44          C           CPI	ERR_OK_READ 
  F27B    CA F21D        C           JZ		Ret0		; m` b{unde Z (mer nxhajh) 
  F27E    D6 4F          C           SUI        ERR_OK_BLOCK 
  F280    C2 F21E        C           JNZ	EndCommand	; m` b{unde NZ (nxhaj`) 
                         C       
                         C           ; P`glep g`cpsfemm{u d`mm{u b DE 
  F283    CD F224        C           CALL	RecvWord 
                         C       
                         C           ; B HL nayhi p`glep 
  F286    19             C           DAD D 
                         C       
                         C           ; Ophmr| DE a`ir on `dpeqs BC 
  F287    CD F252        C           CALL	RecvBlock 
                         C       
  F28A    C3 F276        C           JMP	RecvBuf0 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Qjnohpnb`r| qrpnjs q ncp`mhwemhel 256 qhlbnknb (bjk~w` replhm`rnp) 
                         C       
  F28D                   C      strcpy255: 
  F28D    06 FF          C           MVI  B, 255 
  F28F                   C      strcpy255_1: 
  F28F    1A             C           LDAX D 
  F290    13             C           INX  D 
  F291    77             C           MOV  M, A 
  F292    23             C           INX  H 
  F293    B7             C           ORA  A 
  F294    C8             C           RZ 
  F295    05             C           DCR  B 
  F296    C2 F28F        C           JNZ  strcpy255_1 
  F299    36 00          C           MVI  M, 0 ; Replhm`rnp 
  F29B    C9             C           RET 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-123


                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Nrop`bhr| a`ir hg A. 
                         C       
  F29C                   C      Send: 
                         C           @out	USER_PORT 
  F29C    D3 10          C+     	out	USER_PORT 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C      ; Ophmr| a`ir b @ 
                         C       
  F29E                   C      Recv: 
  F29E    3E 20          C           MVI	A, 20h 
                         C           @out	USER_PORT+1 
  F2A0    D3 11          C+     	out	USER_PORT+1 
  F2A2    AF             C           XRA	A 
                         C           @out	USER_PORT+1 
  F2A3    D3 11          C+     	out	USER_PORT+1 
                         C           @in	USER_PORT 
  F2A5    DB 10          C+     	in	USER_PORT 
  F2A7    C9             C           RET 
                         C       
                         C      ;---------------------------------------------------------------------------- 
                         C       
                         C      ;.End 
                                IFDEF OWN_GETC 
                         C      include E0GETC.ASM 
                         C      ; 
                         C      ;	E0GETC.ASM -	ED SC80  get symbol module (OS dependent) 
                         C      ;			RK version (hardware dependent) 
                         C      ;			Uses external PPI_ADR 
                         C       
  0040                   C      ?Ctrl	equ	40h 
  0020                   C      ?Shift	equ	20h 
                         C       
                         C      IFNDEF	PPI_ADR 
                         C      ;EXTRN	PPI_ADR 
                         C      ENDIF 
                         C       
                         C      ; Return SYMBOL and SHIFT/CNTRL flags 
                         C      ; 	40h - CNTRL  &  80h - SHIFT 
                         C      ;	B - SYMBOL or MASK 
                         C      ;	C - SYMBOL 
  F2A8                   C      GETCHC:: 
  F2A8    CD F2D0        C      	CALL	GETCHR 
  F2AB    E5             C      	PUSH	H 
  F2AC    F5             C      	push	psw 
  F2AD    E6 3F          C      	ANI	3FH 
  F2AF    4F             C      	MOV	C,A 
  F2B0    3A F519        C      	LDA	@CTRL 
  F2B3    47             C      	MOV	B,A 
                         C      	@in	PPI+2 
  F2B4    DB 02          C+     	in	PPI+2 
  F2B6    A0             C      	ANA	B 
                         C      	;LDA	PPI+2 
                         C      	;LHLD	PPI_ADR 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-124


                         C      	;INX	H 
                         C      	;INX	H 
                         C      	;ANA	M 
                         C      	;PUSH	H ; PPI+2 
  F2B7    79             C      	MOV	A,C 
  F2B8    C2 F2BD        C      	JNZ	$+5 
  F2BB    F6 40          C      	ORI	40H 
  F2BD    4F             C      	MOV	C,A 
                         C       
  F2BE    3A F51A        C      	LDA	@SHFT 
                         C      	;POP	H 
  F2C1    47             C      	MOV	B,A 
                         C      	@in	PPI+2 
  F2C2    DB 02          C+     	in	PPI+2 
  F2C4    A0             C      	ANA	B 
                         C      	;ANA	M 
  F2C5    79             C      	MOV	A,C 
  F2C6    C2 F2CB        C      	JNZ	$+5 
  F2C9    F6 80          C      	ORI	80H 
  F2CB    47             C      	mov	b,a 
  F2CC    F1             C      	pop	psw 
  F2CD    4F             C      	mov	c,a 
  F2CE    E1             C      	POP	H 
  F2CF    C9             C      	RET 
                         C       
                         C      ; Get character from concole (returns in Acc) 
  F2D0                   C      GETCHR: 
  F2D0    E5             C      	PUSH	H 
  F2D1    D5             C      	PUSH	D 
  F2D2    C5             C      	PUSH	B 
  F2D3    CD F2EE        C      	CALL	GTC 
                         C      	;CALL	0F803h 
  F2D6    C1             C      	POP	B 
  F2D7    D1             C      	POP	D 
  F2D8    E1             C      	POP	H 
  F2D9    C9             C      	RET 
                         C       
                         C      ; Get keyboard status A=0 - not pressed; A=0FFh - key pressed 
  F2DA                   C      GETST: 
  F2DA    2A F51C        C      	LHLD	PNT 
  F2DD    7E             C      	MOV	A,M 
  F2DE    3C             C      	INR	A 
  F2DF    3E 00          C      	MVI	A,0 
  F2E1    C8             C      	RZ 
  F2E2    CD F36C        C      	CALL	GTVECT 
  F2E5    3A F51E        C      	LDA	ET1 
  F2E8    3C             C      	INR	A 
  F2E9    3E 00          C      	MVI	A,0 
  F2EB    C8             C      	RZ 
  F2EC    3D             C      	DCR	A 
  F2ED    C9             C      	RET 
                         C       
  F2EE    2A F51C        C      GTC:	LHLD	PNT 
  F2F1    7E             C      	MOV	A,M 
  F2F2    FE FF          C      	CPI	0FFH 
  F2F4    CA F2FE        C      	JZ	GTCH0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-125


  F2F7    23             C       	INX	H 
  F2F8    22 F51C        C      	SHLD	PNT 
  F2FB    C3 F34B        C      	JMP	??RUS 
                         C       
  F2FE    06 32          C      GTCH0:	MVI	B,50 
  F300    C5             C      RP3:	PUSH	B 
  F301    CD F36C        C      	CALL	GTVECT 
  F304    C1             C      	POP	B 
  F305    3A F528        C      	LDA	NREP 
  F308    FE 01          C      	CPI	1 
  F30A    C2 F322        C      	JNZ	RP1 
  F30D    AF             C      	XRA	A 
  F30E    32 F528        C      	STA	NREP 
  F311    05             C      	DCR	B 
  F312    C2 F300        C      	JNZ	RP3 
  F315    3C             C      	INR	A 
  F316    32 F528        C      	STA	NREP 
  F319    21 F51E        C      	LXI	H,ET1 
  F31C    22 F51C        C      	SHLD	PNT 
  F31F    C3 F2EE        C      	JMP	GTC 
  F322    3A F528        C      RP1:	LDA	NREP 
  F325    B7             C      	ORA	A 
  F326    C2 F340        C      	JNZ	RP01 
  F329    21 F51E        C      	LXI	H,ET1 
  F32C    23             C      RP02:	INX	H 
  F32D    7E             C      	MOV	A,M 
  F32E    FE FF          C      	CPI	0FFH 
  F330    C2 F32C        C      	JNZ	RP02 
  F333    22 F51C        C      	SHLD	PNT 
  F336    E5             C      	PUSH	H 
  F337    CD F357        C      	CALL	MDEL 
  F33A    E1             C      	POP	H 
  F33B    2B             C      	DCX	H 
  F33C    7E             C      	MOV	A,M 
  F33D    C3 F34B        C      	JMP	??RUS 
                         C       
  F340    CD F357        C      RP01:	CALL	MDEL 
  F343    21 F51E        C      	LXI	H,ET1 
  F346    7E             C      	MOV	A,M 
  F347    23             C      	INX	H 
  F348    22 F51C        C      	SHLD	PNT 
  F34B    FE FE          C      ??RUS:	CPI	0FEH 
  F34D    C0             C      	RNZ 
                         C      	@in	PPI+2 
  F34E    DB 02          C+     	in	PPI+2 
                         C      	;PUSH	H 
                         C      	;LHLD	PPI_ADR 
                         C      	;INX	H 
                         C      	;INX	H 
                         C      	;MOV	A,M 
  F350    EE 08          C      	XRI	8 
                         C      	@out	PPI+2 
  F352    D3 02          C+     	out	PPI+2 
                         C      	;MOV	M,A 
                         C      	;POP	H 
  F354    C3 F2EE        C      	JMP	GTC 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-126


                         C       
  F357                   C      MDEL: 
                         C      IF	0 
                         C      	EI 
                         C      	LXI	H,1000 
                         C      RP2:	DCX	H 
                         C      	MOV	A,H 
                         C      	ORA	L 
                         C      	JNZ	RP2 
                         C      	DI 
                         C      ELSE 
  F357    C5             C      	PUSH	B 
  F358    01 0808        C      	LXI	B,0808h 
                         C      	;PUSH	H 
                         C      	;LXI	H,PSG1+3 
  F35B    3E 36          C      	MVI	A,36h 
                         C      	@out	PSG1+3 
  F35D    D3 43          C+     	out	PSG1+3 
                         C      	;MVI	L,0 
  F35F    79             C      	MOV	A,C 
                         C      	;@out	PSG1 
                         C      	;@out	PSG1 
                         C      	;MOV	M,C 
                         C      	;MOV	M,C 
  F360                   C      RP21: 
  F360    0B             C      	DCX	B 
  F361    78             C      	MOV	A,B 
  F362    B1             C      	ORA	C 
  F363    C2 F360        C      	JNZ	RP21 
                         C      	;MVI	L,3 
                         C      	;MVI	M,36 
  F366    3E 36          C      	MVI	A,36h 
                         C      	@out	PSG1+3 
  F368    D3 43          C+     	out	PSG1+3 
                         C      	;POP	H 
  F36A    C1             C      	POP	B 
                         C      ENDIF 
  F36B    C9             C       	RET 
                         C       
                         C      ; (ET1) - Pressed keys vector (in order of press) 
                         C      ; (NREP) - Repeat number 
  F36C    06 05          C      GTVECT:	MVI	B,5 
  F36E    C5             C      GETC0:	PUSH	B 
  F36F    3A F51B        C      	LDA	@RD 
  F372    B7             C      	ORA	A 
  F373    3E 00          C      	MVI	A,0 
  F375    32 F51B        C      	STA	@RD 
  F378    C2 F37E        C      	JNZ	$+6 
  F37B    CD F41A        C      	CALL	KBDSCN 
  F37E    C1             C      	POP	B 
  F37F    21 F529        C      	LXI	H,PRESS 
  F382    7E             C      	MOV	A,M 
  F383    FE FF          C      	CPI	0FFH 
  F385    C2 F392        C      	JNZ	GTV04 
  F388    05             C      	DCR	B 
  F389    C2 F36E        C      	JNZ	GETC0 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-127


  F38C    32 F51E        C      	STA	ET1 
  F38F    C3 F36C        C      	JMP	GTVECT 
                         C       
  F392    21 F533        C      GTV04: 	LXI	H,ET2 
  F395    11 F51E        C      	LXI	D,ET1 
  F398    E5             C      	PUSH	H 
  F399    D5             C      	PUSH	D 
  F39A    1A             C      GTV08:	LDAX	D 
  F39B    77             C      	MOV	M,A 
  F39C    23             C      	INX	H 
  F39D    13             C      	INX	D 
  F39E    FE FF          C      	CPI	0FFH 
  F3A0    C2 F39A        C      	JNZ	GTV08 
  F3A3    D1             C      	POP	D 
  F3A4    E1             C      	POP	H 
                         C       
  F3A5    7E             C      GTV00:	MOV	A,M 
  F3A6    FE FF          C      	CPI	0FFH 
  F3A8    CA F3C6        C      	JZ	GTV06 
                         C       
  F3AB    01 F529        C      	LXI	B,PRESS 
  F3AE    0A             C      GTV07:	LDAX	B 
  F3AF    FE FF          C      	CPI	0FFH 
  F3B1    CA F3C2        C      	JZ	GTV01 
  F3B4    BE             C      	CMP	M 
  F3B5    03             C      	INX	B 
  F3B6    C2 F3AE        C      	JNZ	GTV07 
  F3B9    36 FD          C      	MVI	M,0FDH 
  F3BB    12             C      	STAX	D 
  F3BC    13             C      	INX	D 
  F3BD    0B             C      	DCX	B 
  F3BE    3E FD          C      	MVI	A,0FDH 
  F3C0    02             C      	STAX	B 
  F3C1    03             C      	INX	B 
  F3C2    23             C      GTV01:	INX	H 
  F3C3    C3 F3A5        C      	JMP	GTV00 
                         C       
  F3C6    01 F529        C      GTV06:	LXI	B,PRESS 
  F3C9    0B             C      	DCX	B 
  F3CA    03             C      GTV10:	INX	B 
  F3CB    0A             C      	LDAX	B 
  F3CC    FE FD          C      	CPI	0FDH 
  F3CE    CA F3CA        C      	JZ	GTV10 
  F3D1    FE FF          C      	CPI	0FFH 
  F3D3    CA F3F0        C      	JZ	REP 
  F3D6    0B             C      	DCX	B 
  F3D7    03             C      GTV11:	INX	B 
  F3D8    0A             C      	LDAX	B 
  F3D9    FE FD          C      	CPI	0FDH 
  F3DB    CA F3D7        C      	JZ	GTV11 
  F3DE    FE FF          C      	CPI	0FFH 
  F3E0    CA F3E8        C      	JZ	GTV22 
  F3E3    12             C      	STAX	D 
  F3E4    13             C      	INX	D 
  F3E5    C3 F3D7        C      	JMP	GTV11 
  F3E8    AF             C      GTV22:	XRA	A 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-128


  F3E9    32 F528        C      	STA	NREP 
  F3EC    3E FF          C      GTV21:	MVI	A,0FFH 
  F3EE    12             C      	STAX	D 
  F3EF    C9             C      	RET 
                         C       
  F3F0    3A F528        C      REP:	LDA	NREP 
  F3F3    B7             C      	ORA	A 
  F3F4    CA F40D        C      	JZ	GTV31 
  F3F7    21 F533        C      	LXI	H,ET2 
  F3FA    7E             C      GTV30:	MOV	A,M 
  F3FB    23             C      	INX	H 
  F3FC    FE FF          C      	CPI	0FFH 
  F3FE    CA F40D        C      	JZ	GTV31 
  F401    FE FD          C      	CPI	0FDH 
  F403    CA F3FA        C      	JZ	GTV30 
  F406    AF             C      	XRA	A 
  F407    32 F528        C      	STA	NREP 
  F40A    C3 F3EC        C      	JMP	GTV21 
                         C       
  F40D    3A F528        C      GTV31:	LDA	NREP 
  F410    3C             C      	INR	A 
  F411    CA F3EC        C      	JZ	GTV21 
  F414    32 F528        C      	STA	NREP 
  F417    C3 F3EC        C      	JMP	GTV21 
                         C       
                         C      ; (PRESS) -  Pressed keys vector (in order of discover) 
  F41A    01 0040        C      KBDSCN:	LXI	B,40H 
  F41D    21 F529        C      	LXI	H,PRESS 
  F420    11 807F        C      	LXI	D,807FH 
                         C       
  F423    C5             C      	PUSH	B 
                         C      	@IN	PPI+2 
  F424    DB 02          C+     	in	PPI+2 
  F426    47             C      	MOV	B,A 
  F427    3A F518        C      	LDA	@RUS 
  F42A    A0             C      	ANA	B 
  F42B    C2 F431        C      	JNZ	$+6 
  F42E    36 FE          C      	MVI	M,0FEH 
  F430    23             C      	INX	H 
  F431    C1             C      	POP	B 
                         C       
  F432    CD F440        C      NORM0:	CALL	?PRESS 
  F435    CC F467        C      	CZ	FOUND 
  F438    04             C      	INR	B 
  F439    0D             C      	DCR	C 
  F43A    C2 F432        C      	JNZ	NORM0 
  F43D    36 FF          C      	MVI	M,0FFH 
  F43F    C9             C      	RET 
                         C       
  F440    CD F45F        C      ?PRESS:	CALL	GETMSK 
  F443    7B             C      	MOV	A,E 
                         C      	@out	PPI 
  F444    D3 00          C+     	out	PPI 
  F446    00             C      	NOP 
  F447    00             C      	NOP 
  F448    00             C      	NOP 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-129


                         C      	@in	PPI+1 
  F449    DB 01          C+     	in	PPI+1 
  F44B    A2             C      	ANA	D 
  F44C    C0             C      	RNZ 
                         C       
  F44D    E5             C      	PUSH	H 
  F44E    21 00C8        C      	LXI	H,200 
  F451                   C      ?PRES0:	@in	PPI+1 
  F451    DB 01          C+     	in	PPI+1 
  F453    A2             C      	ANA	D 
  F454    C2 F45D        C      	JNZ	?PRES1 
  F457    2B             C      	DCX	H 
  F458    7C             C      	MOV	A,H 
  F459    B5             C      	ORA	L 
  F45A    C2 F451        C      	JNZ	?PRES0 
  F45D    E1             C      ?PRES1:	POP	H 
  F45E    C9             C      	RET 
                         C       
                         C       
  F45F    7A             C      GETMSK:	MOV	A,D 
  F460    07             C      	RLC 
  F461    57             C      	MOV	D,A 
  F462    D0             C      	RNC 
  F463    7B             C      	MOV	A,E 
  F464    07             C      	RLC 
  F465    5F             C      	MOV	E,A 
  F466    C9             C      	RET 
                         C       
  F467    E5             C      FOUND:	PUSH	H 
  F468    D5             C      	PUSH	D 
  F469    C5             C      	PUSH	B 
  F46A    78             C      	MOV	A,B 
  F46B    FE 3F          C      	CPI	3FH 
  F46D    C2 F475        C      	JNZ	FND01 
  F470    3E 20          C      	MVI	A,20H 
  F472    C3 F487        C      	JMP	FND02 
  F475    FE 10          C      FND01:	CPI	10H 
  F477    DA F47F        C      	JC	FND03 
  F47A    C6 20          C      	ADI	20H 
  F47C    C3 F487        C      	JMP	FND02 
  F47F    58             C      FND03:	MOV	E,B 
  F480    16 00          C      	MVI	D,0 
  F482    21 F508        C      	LXI	H,KEYBRD 
  F485    19             C      	DAD	D 
  F486    7E             C      	MOV	A,M 
  F487    5F             C      FND02:	MOV	E,A 
                         C       
  F488    FE 21          C      	CPI	21H 
  F48A    D4 F494        C      	CNC	MODCHR 
  F48D    7B             C      	MOV	A,E 
  F48E    C1             C      	POP	B 
  F48F    D1             C      	POP	D 
  F490    E1             C      	POP	H 
  F491    77             C      	MOV	M,A 
  F492    23             C      	INX	H 
  F493    C9             C      	RET 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-130


                         C       
  F494    5F             C      MODCHR:	MOV	E,A 
  F495    FE 40          C      	CPI	40H 
  F497    D2 F49F        C      	JNC	MOD4 
  F49A    FE 3C          C      	CPI	3CH 
  F49C    D2 F4BB        C      	JNC	MOD3 
  F49F                   C      MOD4:	@in	PPI+2 
  F49F    DB 02          C+     	in	PPI+2 
  F4A1    47             C      	MOV	B,A 
  F4A2    3A F519        C      	LDA	@CTRL 
  F4A5    A0             C      	ANA	B 
  F4A6    CA F4C6        C      	JZ	SCTRL 
                         C      	@in	PPI+2 
  F4A9    DB 02          C+     	in	PPI+2 
  F4AB    E6 08          C      	ANI	8 
  F4AD    C2 F4CE        C      	JNZ	SHIFT0 
                         C      	@in	PPI+2 
  F4B0    DB 02          C+     	in	PPI+2 
  F4B2    47             C      	MOV	B,A 
  F4B3    3A F51A        C      	LDA	@SHFT 
  F4B6    A0             C      	ANA	B 
  F4B7    CA F4E3        C      	JZ	@SHIFT 
  F4BA    C9             C      	RET 
                         C       
  F4BB                   C      MOD3:	@in	PPI+2 
  F4BB    DB 02          C+     	in	PPI+2 
  F4BD    47             C      	MOV	B,A 
  F4BE    3A F51A        C      	LDA	@SHFT 
  F4C1    A0             C      	ANA	B 
  F4C2    C2 F4E8        C      	JNZ	SH3 
  F4C5    C9             C      	RET 
                         C       
  F4C6    7B             C      SCTRL:	MOV	A,E 
  F4C7    FE 40          C      	CPI	40H 
  F4C9    D8             C      	RC 
  F4CA    D6 40          C      	SUI	40H 
  F4CC    5F             C      	MOV	E,A 
  F4CD    C9             C      	RET 
                         C       
  F4CE                   C      SHIFT0:	@in	PPI+2 
  F4CE    DB 02          C+     	in	PPI+2 
  F4D0    47             C      	MOV	B,A 
  F4D1    3A F51A        C      	LDA	@SHFT 
  F4D4    A0             C      	ANA	B 
  F4D5    CA F4F6        C      	JZ	SH5 
  F4D8    7B             C      	MOV	A,E 
  F4D9    FE 40          C      	CPI	40H 
  F4DB    D8             C      	RC 
  F4DC    FE 7F          C      	CPI	07Fh 
  F4DE    C8             C      	RZ 
  F4DF    C6 20          C      	ADI	20H 
  F4E1    5F             C      	MOV	E,A 
  F4E2    C9             C      	RET 
                         C       
  F4E3                   C      @SHIFT:	@in	PPI+2 
  F4E3    DB 02          C+     	in	PPI+2 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	1-131


  F4E5    E6 08          C      	ANI	8 
  F4E7    C0             C      	RNZ 
  F4E8    7B             C      SH3:	MOV	A,E 
  F4E9    FE 40          C      	CPI	40H 
  F4EB    DA F4F6        C      	JC	SH5 
  F4EE    FE 7F          C      	CPI	7Fh 
  F4F0    C8             C      	rz 
  F4F1    C6 20          C      	ADI	20H 
  F4F3    C3 F4FC        C      	JMP	SH1 
  F4F6    7B             C      SH5:	MOV	A,E 
  F4F7    FE 40          C      	CPI	40H 
  F4F9    DA F4FE        C      	JC	SB 
  F4FC    5F             C      SH1:	MOV	E,A 
  F4FD    C9             C      	RET 
  F4FE    D6 10          C      SB:	SUI	10H 
  F500    FE 20          C      	CPI	20H 
  F502    C2 F4FC        C      	JNZ	SH1 
  F505    1E 5F          C      	MVI	E,5Fh 
  F507    C9             C      	RET 
                         C       
                         C       
  F508    0C 1F 1B 00    C      KEYBRD:	DB	0CH,1FH,1BH,0,1,2,3,4 
  F50C    01 02 03 04    C      
  F510    09 0A 0D       C      	DB	9,0AH,0DH 
  F513    7F             C      	DB	7FH; Here was 5FH 
  F514    08 19 18 1A    C      	DB	8,19H,18H,1AH 
                         C      ; Following map part may be done more compact algoritmically 
                         C      ; Decrease size by 27 bytes 
                         C      ;	DB	'0123456789:;<=>?' 
                         C      ;	DB	'@ABCDEFGHIJKLMNO' 
                         C      ;	DB	'PQRSTUVWXYZ[\]^ ' 
                         C       
                         C       
  F518    80             C      @RUS:	DB	80H 
  F519    40             C      @CTRL:	DB	?Ctrl 
  F51A    20             C      @SHFT:	DB	?Shift 
  F51B    00             C      @RD:	DB	0 
                         C       
  F51C    F51E           C      PNT:	DW	ET1 
  F51E    FF             C      ET1:	DB	0ffh 
  F51F                   C      	ds	9 
                         C      	;DSEG 
  F528                   C      NREP:	DS	1 
  F529                   C      PRESS:	DS	10 
  F533                   C      ET2:	DS	10 
                         C      IFNDEF	noend 
                         C      ;	END 
                         C      ENDIF 
                         C       
                         C       
                                ENDIF 
  F53D                          BIOS_END: 
                                	END 
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S


Macros:
@IN             @OUT            @SYSREG         

Symbols:
F34B 	??RUS           0040 	?CTRL           EFF9 	?ESC            
F451 	?PRES0          F45D 	?PRES1          F440 	?PRESS          
0020 	?SHIFT          EE7C 	_@ESC           DAFB 	_CONIN          
DB48 	_CONOUT         ECCA 	_DPTR           EE65 	_ESC            
EE6B 	_ESC1           EE87 	_ESC2           0000 	_FALSE          
ECC1 	_IO_RESULT      E7DF 	_OLDDSK         DFE3 	_SETDMA         
00FF 	_TRUE           ED3F 	@001            F09A 	@02             
EE22 	@@@             000E 	@CLR            F137 	@CMP12          
EF39 	@CR             F519 	@CTRL           001B 	@ESC            
ED50 	@EXIT           0001 	@F              EF81 	@HOME           
EF43 	@LF             ED42 	@LOOP           F05C 	@L_DELAY        
F04C 	@L_WAIT         0000 	@M              DD50 	@MOVE0          
F51B 	@RD             F518 	@RUS            000F 	@SET            
F51A 	@SHFT           F4E3 	@SHIFT          F048 	@SKIP           
EFD0 	@WAIT_RVV       DF64 	ADDH            D64B 	ADDHCF          
0008 	ADDLIST         E9BF 	ALL01           EA1F 	ALL02           
EA7F 	ALL03           E7BF 	ALLOCA          DE84 	ALLOCATED       
E464 	ALLOCWD         E7E5 	ARECORD         E7E7 	ARECORD1        
DD45 	ARET            E906 	ASKDOS          DE8A 	ATRAN           
DE90 	ATRAN0          DC99 	BACKSP          DBA4 	BACKUP          
DC4E 	BACKX           ECBBI 	BAD             E584 	BADSEEK         
D5CF 	BADSERIAL       0005 	BDOS            0006 	BDOSA           
DA11 	BDOSE           DA00 	BDOSL           0005 	BDOSTRP         
D2F4 	BDOS_COND       D2C3 	BDOS_INR        DA00 	BDOS_START      
01B8 	BEGPRO          EFF3 	BEGSCR          EE98 	BELL            
E800 	BIOS            F146 	BIOSENTRY       F53D 	BIOS_END        
D2A2 	BLANK           E7C4 	BLKMSK          E7C3 	BLKSHF          
E448 	BLOCKOK         D92D 	BMOVE0          D93B 	BMOVE1          
D940 	BMOVE2          D94C 	BMOVE3          E841 	BOOT            
E800 	BOOTF           D9EE 	BPTR            000B 	BREAKF          
D3C2 	BREAK_KEY       0080 	BUFF            E7B9 	BUFFA           
E2E1 	BUFFNZERO       0001 	BYTE            E800I 	B_BASE          
0001 	CC              D582 	CCP             D598 	CCP0            
D558 	CCPCLEAR        D200 	CCPLOC          D55C 	CCPSTART        
D459 	CCP_ADDH        D2DA 	CCP_CLOSE       D298 	CCP_CRLF        
D9EB 	CCP_DCNT        D2EF 	CCP_DELETE      D2F9 	CCP_DISKREAD    
D304 	CCP_DISKWRITE   D2B8 	CCP_INITIALIZE  D309 	CCP_MAKE        
D2CB 	CCP_OPEN        D2A7 	CCP_PRINT       D810 	CCP_RENAME      
D2DF 	CCP_SEARCH      D2E4 	CCP_SEARCHN     D2BD 	CCP_SELECT      
D3D8 	CCP_SETDMA      020B 	CCP_START       D9EC 	CDISK           
E7B3 	CDRMAXA         0001 	CENTRONIX       ED09 	CHANGEVIEWMODE  
E7BD 	CHECKA          DF9E 	CHECKSUM        EBF8I 	CHECK_D         
DF44 	CHECK_RODIR     DF47 	CHECK_ROFILE    DF54 	CHECK_WRITE     
F06C 	CHGDRIVE        E9FF 	CHK01           EA5F 	CHK02           
EB79 	CHK03           E7CC 	CHKSIZ          EFF7 	CHPNT           
E2A2 	CLOSE           0010 	CLOSEF          DF72 	CLRMODNUM       
EF64 	CLS             EF75 	CLS0            F15D 	CMDOPENDELETE   
F196 	CMDREAD         F174 	CMDSEEKGETSIZE  F1A6 	CMDWRITE        
F1C2 	CMDWRITEFILE1   F1AF 	CMDWRITEFILE2   DD0C 	COLUMN          
D288 	COMADDR         D208 	COMBUF          D409 	COMERR          
D40F 	COMERR0         D422 	COMERR1         D9CA 	COMFCB          
D207 	COMLEN          DF7F 	COMPCDR         DD0A 	COMPCOL         
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-1


E107 	COMPEXT         DB62 	COMPOUT         DEFD 	COMPUTECS0      
DEF7 	COMPUTE_CS      E5A5 	COMPUTE_RR      D9EA 	COMREC          
D980 	COMTYPE         DB42 	CONB0           DB45 	CONB1           
DB23 	CONBRK          DB06 	CONECH          ECF7I 	CONIN           
E809 	CONINF          ED79I 	CONOUT          E80C 	CONOUTF         
E806 	CONSTF          D608 	CONV0           D633 	CONV1           
ECCDI 	CONVER          ECF4I 	CON_ST          E201 	COPY_DIR        
E101 	COPY_DIRLOC     E1FD 	COPY_FCB        ED29 	CORRCNTRL       
ED56 	CORRTBL         0199 	CP001           ECC7I 	CPM_DISK        
ECC6I 	CPM_RECORD      ECC5I 	CPM_TRACK       EDFF 	CPY             
000D 	CR              DBC9 	CRLF            DBB1 	CRLFP           
DBB9 	CRLFP0          D3D0 	CSELECT         0019 	CSELF           
005E 	CTL             0003 	CTLC            0005 	CTLE            
0008 	CTLH            DB7F 	CTLOUT          0010 	CTLP            
0012 	CTLR            0013 	CTLS            0015 	CTLU            
0018 	CTLX            001A 	CTLZ            DD42 	CURDSK          
E7B7 	CURRECA         E645 	CURSELECT       E7B5 	CURTRKA         
EFFA 	CURX            EFFB 	CURY            D200 	C_BASE          
0020 	C_DIR_ENTRS     0008 	C_OFFSET        0008 	C_SEC_ON_TRK    
07EF 	C_SIZE          E7EA 	DCNT            D44F 	DEBLANK         
0004 	DEF_DSK         EE18 	DELEOL          E19C 	DELETE          
E1A4 	DELETE0         0013 	DELF            D430 	DELIM           
EDDA 	DELLIN          D3DD 	DEL_SUB         DDBB 	DIOCOMP         
D688 	DIR0            D68F 	DIR1            D698 	DIR2            
D6D9 	DIR3            D6F9 	DIR4            D70E 	DIR5            
D70F 	DIR6            D6F7 	DIRB            E93F 	DIRBF           
E7CA 	DIRBLK          D677 	DIRECT          D6CC 	DIRHDR0         
D6D4 	DIRHDR1         DCE0 	DIRINP          E7D4 	DIRLOC          
E7C8 	DIRMAX          0004 	DIRREC          DFE9 	DIR_TO_USER     
0004 	DISKA           E3FB 	DISKEOF         000C 	DISKF           
E3C1 	DISKREAD        D2FE 	DISKREADC       E41C 	DISKWR0         
E46E 	DISKWR1         E4BB 	DISKWR11        E4D2 	DISKWR2         
E500 	DISKWR3         E403 	DISKWRITE       E46C 	DISKWRU         
0020 	DISP            0040 	DISP_INTE_FLAG  0020 	DISP_INTR_FLAG  
EFFEI 	DISP_PB         EDE3 	DL0             E7AF 	DLOG            
0030 	DMA             E7B1 	DMAAD           001A 	DMAF            
ECC8I 	DMA_ADDR        E7D7 	DMINX           DE45 	DMPOS0          
DE53 	DMPOS1          DE5C 	DMPOS2          E2FD 	DMSET           
DE3E 	DM_POSITION     EF20 	DOWN            E7BB 	DPBADDR         
EB7A 	DPBASE          000F 	DPBLIST         EBAA 	DPBLK2          
EBB9 	DPBLK3          E7E9 	DPTR            0014 	DREADF          
E7EC 	DREC            ECC4 	DRIVE           DAC6 	DSKERR          
EBC8I 	DSKINIT         0010 	DSKMAP          DABA 	DSKMSG          
0003 	DSKMSK          0002 	DSKSHF          E91EI 	DSKVER          
0022 	DVERS           EF38 	DWN0            0015 	DWRITF          
DA00 	D_BASE          0DEE 	D_SIZE          DB14 	ECHOC           
E7AC 	EFCB            D4F0 	EFILL           D4F2 	EFILL0          
00E5 	EMPTY           D986 	ENDCOM          F21E 	ENDCOMMAND      
FFFF 	ENDDIR          D71B 	ENDIR           E317 	ENDMERGE        
FF58 	ENDSCR          E183 	ENDSEARCH       DFF5 	END_OF_DIR      
DD0F 	ENTSP           001A 	EOFILE          D71F 	ERASE           
D742 	ERASEFILE       D752 	ERMSG           DAE5 	ERRFLG          
0043 	ERR_OK          0047 	ERR_OK_ADDR     004F 	ERR_OK_BLOCK    
0045 	ERR_OK_ENTRY    0042 	ERR_OK_NEXT     0044 	ERR_OK_READ     
0046 	ERR_OK_WRITE    01A4 	ERR_READ        0040 	ERR_START       
0041 	ERR_WAIT        F51E 	ET1             F533 	ET2             
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-2


0001 	EXTERNAL_PORTS  E7C5 	EXTMSK          000C 	EXTNUM          
E7E2 	EXTVAL          005C 	FCB             E7E0 	FCBDSK          
0020 	FCBLEN          E2DB 	FCBNZERO        0005 	FCBSHF          
E7D2 	FCB_COPIED      EE0F 	FILL            E48C 	FILL0           
E49A 	FILL1           D460 	FILLFCB         D45E 	FILLFCB0        
0002 	FIRSTSTR        0001 	FLOP40          0000 	FLOP80          
F067 	FLPD_I          F06C 	FLPD_R          F06C 	FLPD_W          
F06DI 	FLP_TBL         F06C 	FLSH_WB         F13C 	FNAME           
F475 	FND01           F487 	FND02           F47F 	FND03           
01EF 	FONT            F467 	FOUND           0000 	FRST_T          
F06F 	FULLMASK        D807 	FULLMSG         DCC8 	FUNC1           
DBE1 	FUNC10          DCFE 	FUNC11          E67E 	FUNC12          
E683 	FUNC13          E645 	FUNC14          E69C 	FUNC15          
E6A5 	FUNC16          E6AB 	FUNC17          E6C8 	FUNC18          
E6D7 	FUNC19          DB90 	FUNC2           E6E0 	FUNC20          
E6E6 	FUNC21          E6EC 	FUNC22          E6F5 	FUNC23          
E6FE 	FUNC24          E704 	FUNC25          E70A 	FUNC26          
E711 	FUNC27          DF2C 	FUNC28          E717 	FUNC29          
DCCE 	FUNC3           E71D 	FUNC30          E726 	FUNC31          
E72D 	FUNC32          E741 	FUNC33          E747 	FUNC34          
E74D 	FUNC35          E60E 	FUNC36          E753 	FUNC37          
DD04 	FUNC38          DD04 	FUNC39          E79B 	FUNC40          
DCD4 	FUNC6           DCED 	FUNC7           DCF3 	FUNC8           
DCF8 	FUNC9           DA47 	FUNCTAB         DD04 	FUNC_RET        
0080 	FWFMSK          E035 	GETALLOCBIT     F36E 	GETC0           
F2A8I 	GETCHC          F2D0 	GETCHR          DE5E 	GETDM           
DE71 	GETDMD          DF5E 	GETDPTRA        DEA6 	GETEXTA         
DEBB 	GETFCB          DEAE 	GETFCBA         E5D2 	GETFILESIZE     
DF69 	GETMODNUM       F45F 	GETMSK          E606 	GETNEXTSIZE     
D5F8 	GETNUMBER       E5E4 	GETSIZE         F2DA 	GETST           
D313 	GETUSER         E1BE 	GET_BLOCK       E774 	GOBACK          
DD4A 	GOERR           EF9B 	GOTOXY          F2EE 	GTC             
F2FE 	GTCH0           F3A5 	GTV00           F3C2 	GTV01           
F392 	GTV04           F3C6 	GTV06           F3AE 	GTV07           
F39A 	GTV08           F3CA 	GTV10           F3D7 	GTV11           
F3EC 	GTV21           F3E8 	GTV22           F3FA 	GTV30           
F40D 	GTV31           F36C 	GTVECT          DF04 	HLROTL          
DF05 	HLROTL0         DEEA 	HLROTR          DEEB 	HLROTR0         
DDA1 	HOME            EBD5I 	HOME@           E818 	HOMEF           
DE77 	INDEX           E240 	INDIC0          E23B 	INDICATORS      
DD43 	INFO            000D 	INITF           E0B1 	INITIAL0        
E0D2 	INITIAL2        E0A3 	INITIALIZE      DFC4 	INITIAL_CS      
EDF5 	INSLIN          0006 	INTLEN          D533 	INTRIN0         
D53C 	INTRIN1         D54F 	INTRIN2         D554 	INTRIN3         
D52E 	INTRINSIC       D510 	INTVEC          000A 	INVIS           
0003 	IOLOC           0003 	IO_BYTE         D5C1 	JMPTAB          
F14F 	JMPTBL          DD0E 	KBCHAR          F41A 	KBDSCN          
F508 	KEYBRD          005F 	LA              F071 	LAST_OPER       
F08F 	LD_S01          F082I 	LD_SYS          EEE9 	LEFT            
E1C0 	LEFTTST         000A 	LF              000C 	LIFTF           
DC70 	LINELEN         E7D6 	LINFO           DD0D 	LISTCP          
E80F 	LISTF           E82D 	LISTSTF         000F 	LLLL            
D8DE 	LOAD0           D8FE 	LOAD1           D96E 	LOADERR         
D977 	LOADMSG         0018 	LOGF            01CC 	LOOP            
01DB 	LOOP01          F037 	LPUTC           DD45 	LRET            
DD41 	LSTACK          001F 	LSTFCB          F031I 	LSTOUT          
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-3


007F 	LSTREC          F006I 	LSTVER          F034I 	LST_ST          
E324 	MAKE            E346 	MAKE0           0016 	MAKEF           
01FF 	MAP             0208 	MAP2            E7C6 	MAXALL          
0042 	MAXDISKCODE     001F 	MAXEXT          D206 	MAXLEN          
000F 	MAXMOD          F06E 	MAXSECT         0001 	MC6312          
F357 	MDEL            E2CD 	MERGE0          E2E8 	MERGED          
E31F 	MERGERR         E294 	MERGEZERO       F4BB 	MOD3            
F49F 	MOD4            F494 	MODCHR          000E 	MODNUM          
DD4F 	MOVE            D642 	MOVE0           D640 	MOVENAME        
000F 	NAMLEN          DF9C 	NEWCHECKSUM     EED6 	NEXTST          
0029 	NFUNCS          D5EA 	NOFILE          EC98 	NOFLOP80        
D5F0 	NOFMSG          E43B 	NOPBLOCK        0000 	NOPRINT         
D3A7 	NOREAD          F432 	NORM0           E675 	NOSELECT        
0001 	NOSERIALIZE     E4FE 	NOSPACE         D396 	NOSUB           
DB79 	NOTBACKSP       DCBD 	NOTC            DC37 	NOTE            
DC16 	NOTH            0000 	NOTHING         DC48 	NOTP            
DCA6 	NOTR            DC26 	NOTRUB          DC6B 	NOTU            
DC5F 	NOTX            E4DF 	NOUPDATE        DF1E 	NOWRITE         
F528 	NREP            0020 	NXTREC          EF94 	NXT_S           
0000 	OFF             E7CE 	OFFSET          ECBAI 	OLDDSK          
ECCCI 	OLDF40          FFFF 	ON              E251 	OPEN            
D2D0 	OPENC           000F 	OPENF           E25A 	OPEN_COPY       
E383 	OPEN_MOD        E28B 	OPEN_RCNT       E35A 	OPEN_REEL       
E38E 	OPEN_REEL0      E3AC 	OPEN_REEL1      E3AF 	OPEN_REEL2      
E3B6 	OPEN_R_ERR      ED99 	OUTC            0001 	OWN_GETC        
D4B9 	PADNAME         D4E9 	PADTY           00C0 	PALM_CNTRL      
0001 	PATCH1          0009 	PBUFF           0002 	PCHARF          
DBAC 	PCTLH           E0F6 	PDOLLAR         DA09 	PERERR          
DACA 	PERMSG          DA99 	PERSUB          001E 	PHYS_H          
004E 	PHYS_W          F51C 	PNT             0000 	PPI             
0010 	PPI2            0011 	PPI2_B          0012 	PPI2_C          
0013 	PPI2_CR         F066 	PPI_INIT_FLAG   F529 	PRESS           
EEE2 	PREVST          D2AC 	PRIN0           DBD3 	PRINT           
D292 	PRINTBC         D28C 	PRINTCHAR       ED69I 	PRNT            
ED6E 	PRNT1           0001 	PROFI_DISKS     01C0 	PROG_DC         
0040 	PSG1            F02DI 	PUNCH           E812 	PUNCHF          
ED6EI 	PUTS            E6C2 	QSELECT         0002 	RAMDISK         
E547 	RANCLOSE        E593 	RANDISKREAD     E59C 	RANDISKWRITE    
0021 	RANREC          F039 	RAW_LPUTC       000A 	RBUFF           
0001 	RCHARF          E7E1 	RCOUNT          DDB2 	RDBUFF          
DCA9 	RDECH1          DCA6 	RDECHO          D5DF 	RDMSG           
DFD4 	RD_DIR          ECAAI 	RD_REC          DBE1 	READ            
D339 	READCOM         D3AB 	READCOM0        D3BA 	READCOM1        
DCC1 	READEN          F02EI 	READER          E815 	READERF         
D5D9 	READERR         E827 	READF           0001 	READING         
DBF1 	READN0          DBEF 	READNX          01B7 	READR           
E005 	READ_DIR        E019 	READ_DIR0       E020 	READ_DIR1       
0000 	REBOOT          000F 	RECCNT          E3E6 	RECORDOK        
0080 	RECSIZ          F06D 	RECSPERSECT     F29E 	RECV            
F252 	RECVBLOCK       F25C 	RECVBLOCK1      F26D 	RECVBLOCK2      
F273 	RECVBUF         F276 	RECVBUF0        F224 	RECVWORD        
0090 	RECV_MODE       D83F 	REN1            D859 	REN2            
D30E 	RENAM           E216 	RENAME          E227 	RENAME0         
D86D 	RENERR1         D873 	RENERR2         D879 	RENERR3         
0017 	RENF            D882 	RENMSG          F3F0 	REP             
DC78 	REP0            DC8A 	REP1            E7DE 	RESEL           
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-4


E651 	RESELECT        D666 	RESETDISK       F21D 	RET0            
E1EC 	RETBLOCK        E1F4 	RETBLOCK0       D983 	RETCOM          
E791 	RETMON          D801 	RETSAVE         DD9D 	RETSELECT       
EEF9 	RIGHT           E1D1 	RIGHTTST        E7D3 	RMF             
DA0D 	RODERR          DAE1 	RODMSG          E7AD 	RODSK           
DAAB 	RODSUB          DA0F 	ROFERR          0009 	ROFILE          
DADC 	ROFMSG          DAB1 	ROFSUB          E056 	ROTL            
E064 	ROTR            F340 	RP01            F32C 	RP02            
F322 	RP1             F360 	RP21            F300 	RP3             
E503 	RSEEK           E507 	RSEEK1          007F 	RUBOUT          
0000 	S               D7AD 	SAVE            D7D4 	SAVE0           
D7F1 	SAVE1           D7FB 	SAVERR          D31A 	SAVEUSER        
F072I 	SAV_SYS         F4FE 	SB              E06B 	SCANDM          
E075 	SCANDM0         E088 	SCANDM1         E08E 	SCANDM2         
E09D 	SCANM3          D501 	SCNQ            D509 	SCNQ0           
EF5E 	SCRLL           EEA1 	SCROLL          EEAF 	SCRU0           
EEB3 	SCRU1           EECD 	SCRU2           EE9E 	SCRUP           
F6D0 	SCR_BUFF        001A 	SCR_H           0924 	SCR_SIZE        
004E 	SCR_W           F4C6 	SCTRL           0000 	SD              
D9ED 	SDISK           F0C4 	SD_ERR_CHECK    F0E2I 	SD_I            
F0E2 	SD_I01          F0B7I 	SD_R            F108 	SD_S01          
F121 	SD_S02          F122 	SD_S03          F0FA 	SD_SEEK         
F0CDI 	SD_W            E118 	SEARCH          E7D9 	SEARCHA         
D2E9 	SEARCHCOM       E173 	SEARCHEXT       E7D8 	SEARCHL         
E153 	SEARCHLOOP      E12D 	SEARCHN         E14A 	SEARCHNEXT      
E17C 	SEARCHOK        E194 	SEARCH_FIN      0011 	SEARF           
0012 	SEARNF          ECC2I 	SECT            E7C1 	SECTPT          
E830 	SECTRAN         EC7AI 	SECTRN          F070 	SECTSHIFT       
DDD1 	SEEK            DDE4 	SEEK0           DDFA 	SEEK1           
DE0F 	SEEK2           E58B 	SEEKERR         E57F 	SEEKOK          
E210 	SEEK_COPY       DDC3 	SEEK_DIR        EBDCI 	SELDSK          
E81B 	SELDSKF         E621 	SELECT          DD59 	SELECTDISK      
DA0B 	SELERR          000E 	SELF            DAD5 	SELMSG          
DAA5 	SELSUB          DD47 	SEL_ERROR       F29C 	SEND            
F235 	SENDSTRING      F22D 	SENDWORD        0080 	SEND_MODE       
E3BC 	SEQDISKREAD     E3FE 	SEQDISKWRITE    E7D5 	SEQIO           
D3FD 	SER0            D528 	SERIAL          D3F5 	SERIALIZE       
DF8C 	SETCDR          D488 	SETCUR          D489 	SETCUR0         
DFDA 	SETDATA         DFE0 	SETDIR          D654 	SETDISK         
D329 	SETDISKA        ECA4I 	SETDMA          D3D5 	SETDMABUFF      
E824 	SETDMAF         D490 	SETDSK          DED2 	SETFCB          
DEDE 	SETFCB1         DF78 	SETFWF          DD05 	SETLRET1        
D498 	SETNAM0         D4A9 	SETNAM1         D4AB 	SETNAM2         
D496 	SETNAME         E60E 	SETRANDOM       EC75I 	SETREC          
EFB0I 	SETSCR          E821 	SETSECF         E60C 	SETSIZE         
EBD7I 	SETTRK          E81E 	SETTRKF         D4C0 	SETTY           
D4C8 	SETTY0          D4D9 	SETTY1          D4DB 	SETTY2          
D315 	SETUSER         E73B 	SETUSRCODE      E05C 	SET_ALLOC_BIT   
DF0B 	SET_CDISK       DFFE 	SET_END_DIR     EC81I 	SET_PARAMS      
DF2C 	SET_RO          F4FC 	SH1             F4E8 	SH3             
F4F6 	SH5             F4CE 	SHIFT0          ECC3I 	SIDE            
E7DD 	SINGLE          0018 	SSIZE           D9A8 	STACK           
D28A 	STADDR          F1D0 	STARTCOMMAND    F1D5 	STARTCOMMAND1   
F204 	STARTCOMMAND2   F1F1 	STARTCOMMAND3   F1FF 	STARTCOMMANDERR2 
D200 	START_CCP       DD01 	STA_RET         E729 	STHL_RET        
F0B5 	STK             EFFC 	STRADR          F28D 	STRCPY255       
"Bdos Interface, Bdos, Version 2.2 Feb, 1980" 	MACRO-80 3.44	09-Dec-81	PAGE	S-5


F28F 	STRCPY255_1     01E2 	STRCPYN         DD0B 	STRTCOL         
D9C9 	SUBCR           DF95 	SUBDH           D9A9 	SUBFCB          
D9A8 	SUBMIT          D9B7 	SUBMOD          D9B8 	SUBRC           
F241 	SWITCHRECV      F246 	SWITCHRECVANDWAI F215 	SWITCHSEND      
F218 	SWITCHSEND0     000A 	SYSFILE         0000 	SYSPG           
0009 	TAB             DB96 	TAB0            DB90 	TABOUT          
0000 	TABREPLACE      0008 	TABSIZE         0080 	TBUFF           
0000 	TEST            0000 	TESTING         0000 	TEXTTRANSL      
005C 	TFCB            E7DB 	TINFO           0100 	TRAN            
D200 	TRANM           EBAA 	TRANS1          EBAA 	TRANS2          
D330 	TRANSLATE       E7D0 	TRANV           D4AF 	TRNAME          
D4DF 	TRTYP           D75D 	TYPE            D774 	TYPE0           
D787 	TYPE1           D7A0 	TYPEOF          D7A7 	TYPERR          
000D 	UBYTES          EF03 	UP              D88E 	USER            
D8C1 	USER0           D968 	USERER          0020 	USERF           
D8A5 	USERFUNC        0010 	USER_PORT       0001 	USE_PRG_DC      
DD41 	USRCODE         000F 	UUUU            0000 	VER_BUF         
ED28 	VIEWMODE        ED23 	VIEWPTR         ED25 	VIEWTBL         
F76C 	VRAM            E7E3 	VRECORD         0001 	VV              
F249 	WAITFORREADY    DAB4 	WAIT_ERR        E8CB 	WBOOT           
E803 	WBOOTF          E803 	WBOOT_ADR       E8D6 	WBT             
0002 	WORD            DDB8 	WRBUFF          DFC6 	WRDIR           
E82A 	WRITEF          0002 	WRITING         ECB2I 	WR_REC          
F06C 	WT_END_CMD      EFF5 	XSIZE           EFF6 	YSIZE           
0008 	ZZZZ            



No Fatal error(s)


   ED23 	VIEWPTR         ED25 	VIEWTBL        